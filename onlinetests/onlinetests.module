<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * @file
 * Provides the operations of online tests.
 */
define("ONLINETEST_STATUS_ABOUT_TO_BEGIN",1);
define("ONLINETEST_STATUS_ONGOING",2);
define("ONLINETEST_STATUS_ENDED",3);
define("ONLINETEST_STATUS_INTERVIEWING",4);
define("ONLINETEST_STATUS_FINISHED",5);


/**
 * Implementation of hook_help().
 */
function onlinetests_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'definations/itemspec':
      $output = t('Define specification of online examinations.');
      break;
    case 'definations/onlinetests':
      $output = t('Organize online tests.');
      break;
  }
    return '<p>'.$output.'</p>';
}

/**
 * Implements hook_permission
 */
function onlinetests_permission() {
  return array(
    'administer online exams' => array(
      'title' => t('Administrater online tests'),
    ),
    'participate online exams' => array(
      'title' => t('Participate online tests'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function onlinetests_menu() {
  $items['definations/itemspec'] = array(
    'title' => 'Item specification',
    'description' => "Define specification of online examinations.",
    'weight' => 10,
    'page callback' => 'onlinetests_itemspec_list',
    'access callback' => 'onlinetests_admin_perm',
  );
  $items['definations/itemspec/%'] = array(
    'title' => 'Item specification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_itemspec_edit',2),
    'access callback' => 'onlinetests_admin_perm',
    'access arguments' => array(2),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['definations/onlinetests'] = array(
    'title' => 'Online tests',
    'description' => "Organize online tests.",
    'weight' => 13,
    'page callback' => 'onlinetests_onlinetests_list',
    'access callback' => 'onlinetests_onlinetests_list_perm',
  );
  $items['definations/onlinetests/modify/%'] = array(
    'title' => 'Modify paper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_modify_quest',3),
    'access callback' => 'onlinetests_onlinetests_list_perm',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['definations/onlinetests/op/%'] = array(
    'title' => 'Operation on tests',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_operations',3),
    'access callback' => 'onlinetests_onlinetests_list_perm',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['myonlinetests'] = array(
    'title' => 'My Online tests',
    'description' => "Participate online examinations.",
    'weight' => -2,
    'page callback' => 'onlinetests_myonlinetests_for_students',
    'access callback' => 'onlinetests_myonlinetests_perm',
  );
  return $items;
}

function onlinetests_admin_perm($eid=NULL) {
	$query=db_select('vl_exam','e')->condition('e.uid',$GLOBALS['user']->name)->fields('e')->condition('e.etype',3);
	if(!empty($eid)) $query=$query->condition('eid',$eid);
	$is_dep_only=$query->countQuery()->execute()->fetchField();
	return user_access('administer online exams') && ($GLOBALS['user']->uid==1? 1: $is_dep_only);
}

function onlinetests_itemspec_list() {
	$is_dep_only=db_select('vl_exam','e')->condition('e.uid',$GLOBALS['user']->name)->fields('e')->countQuery()->execute()->fetchField();
	$query=db_select('vl_exam','e')->condition('etype',3)->fields('e');
	$query->innerJoin('vl_research_sec','r','e.uid=r.uid');
	$query=$query->fields('r',array('rname'))->orderBy('e.eid');
	if($is_dep_only) {
		$query=$query->condition('e.uid',$GLOBALS['user']->name);
	}
	$is_itemspec_exist=db_table_exists('vl_itemspec');
	if($is_itemspec_exist) {
		$query->leftJoin('vl_itemspec','i','e.eid=i.eid');
		$query=$query->fields('i',array('itematts','answeratts'));
	}
	$result=$query->execute();
	
	$rows=array();

	$header = array(t('Exam ID'), t('Exam Name'));
	if(!$is_dep_only)
		$header[]=t('Teachers');
	if($is_itemspec_exist) {
		$header[]=t('Num of item attachments');
		$header[]=t('Num of answer attachments');
	}
	$header[]=t('Operations');
	
	foreach($result as $r) {
		$row=array(
			$r->eid,
			$r->ename.$r->elevel,
		);
		if(!$is_dep_only)
			$row[]=$r->rname;
		if($is_itemspec_exist) {
			$row[]=empty($r->itematts)?t('N/A'):$r->itematts;
			$row[]=empty($r->answeratts)?t('N/A'):$r->answeratts;
		}
		$row[]=l(t('Edit'),'definations/itemspec/'.$r->eid);
		$rows[]=$row;
	}
	$output = theme('table', array('header'=>$header, 'rows'=>$rows, 'empty' => t('No suitable exams.')));

	return $output;
}

function onlinetests_itemspec_edit($form, $form_state, $eid) {
	$e=db_select('vl_exam','e')->condition('e.eid',$eid)->condition('e.etype',3)->fields('e')->execute()->fetchObject();
	drupal_set_title(t('Item specification').' - '.$e->ename.$e->elevel);
	
	$e=db_select('vl_itemspec','i')->condition('i.eid',$eid)->fields('i')->execute()->fetchObject();
	
	$form=array();
	$form['itematts']=array(
		'#title' => t('Num of item attachments'),
		'#type' => 'textfield',
		'#size' => 3,
		'#required' => TRUE,
		'#default_value' => isset($e->itematts)?$e->itematts:'0',
	);
	$form['answeratts']=array(
		'#title' => t('Num of answer attachments'),
		'#type' => 'textfield',
		'#size' => 3,
		'#required' => TRUE,
		'#default_value' => isset($e->answeratts)?$e->answeratts:'0',
	);
	$form['submit'] = array('#type' => 'submit', '#value' =>t('Save'));
	return $form;
}

function onlinetests_itemspec_edit_validate($form, $form_state) {
	if(!is_numeric($form_state['values']['itematts']))
		form_set_error('itematts', t('Only numerics are allowed.'));
	if(!is_numeric($form_state['values']['answeratts']))
		form_set_error('answeratts', t('Only numerics are allowed.'));
}

function onlinetests_itemspec_edit_submit($form, &$form_state) {
	db_delete('vl_itemspec')
		->condition('eid',arg(2))
		->execute();
	db_insert('vl_itemspec')
		->fields(array(
			'eid' => arg(2),
			'itematts' => $form_state['values']['itematts'],
			'answeratts' => $form_state['values']['answeratts'],
	))->execute();
	$form_state['redirect']='definations/itemspec';
	drupal_set_message(t('Modification saved.'));
}

function onlinetests_onlinetests_list() {
  $is_dep_only=db_select('vl_exam','e')->condition('uid',$GLOBALS['user']->name)->fields('e')->countQuery()->execute()->fetchField();

  $header = array(
  	array('data'=>t('Status'), 'field'=>'num'),
  	array('data'=>t('Schedule Name'), 'field'=>'gid', 'sort'=>'asc'),
  	array('data'=>t('Place'), 'field'=>'g.place'),
  	array('data'=>t('Existing people'), 'field'=>'num'),
  	array('data'=>t('Time'), 'field'=>'g.time'),
  	array('data'=>t('Operations'), 'colspan'=>'2'),
  );
  
  $query=db_select('vl_going', 'g')
	->fields('g')
	->extend('TableSort')
	->orderByHeader($header);

  $result = $query->execute();

  $rows=array();
  
  foreach($result as $r) {
  	  $num=db_select('students_going','sg')
  	  	  ->fields('sg')
  	  	  ->groupBy('sg.uid')
  	  	  ->condition('sg.gid',$r->gid)
  	  	  ->countQuery()
  	  	  ->execute()->fetchField();
  	  if($num) {
  	  	  $tmp_status=t('N/A');
  	  	  switch($r->status) {
  	  	  	  case ONLINETEST_STATUS_ABOUT_TO_BEGIN:
  	  	  	  	  $tmp_status=t("About to begin"); break;
  	  	  	  case ONLINETEST_STATUS_ONGOING:
  	  	  	  	  $tmp_status=t("Now performing"); break;
  	  	  	  case ONLINETEST_STATUS_ENDED:
  	  	  	  	  $tmp_status=t("Ended"); break;
  	  	  	  case ONLINETEST_STATUS_INTERVIEWING:
  	  	  	  	  $tmp_status=t("Now interviewing"); break;
  	  	  	  case ONLINETEST_STATUS_FINISHED:
  	  	  	  	  $tmp_status=t("Finished"); break;
  	  	  }
  	  }
  	  else
  	  	  $tmp_satus=t('About to begin');
  	  
  	  $rows[] = array(
  	  	  '<nobr>'.$tmp_status.'</nobr>',
  	  	  $r->gname,
  	  	  db_select('vl_room', 'r')->fields('r',array('rname'))->condition('r.rid', $r->place)->execute()->fetchField(),
  	  	  $num,
  	  	  '<nobr>'.implode('</nobr><br/><nobr>',explode(' ',_going_datetime_to_string($r->time))).'</nobr>',
  	  );
  	  if($num) {
  	  	if($r->status===FALSE) $status=ONLINETEST_STATUS_ABOUT_TO_BEGIN;
		switch($r->status) {
			case ONLINETEST_STATUS_ABOUT_TO_BEGIN:
				$rows[count($rows)-1][]='<nobr>'.l(t('Modify paper'), "definations/onlinetests/modify/$r->gid").'</nobr>';
				$rows[count($rows)-1][]='<nobr>'.l(t('Start'), "definations/onlinetests/op/$r->gid").'</nobr>';
				break;
  	  	  	  case ONLINETEST_STATUS_ONGOING:
				$rows[count($rows)-1][]='<nobr>'.l(t('View paper'), "definations/onlinetests/modify/$r->gid").'</nobr>';
				$rows[count($rows)-1][]='<nobr>'.l(t('End'), "definations/onlinetests/op/$r->gid").'</nobr>';
				break;
  	  	  	  case ONLINETEST_STATUS_ENDED:
				$rows[count($rows)-1][]='<nobr>'.l(t('View paper'), "definations/onlinetests/modify/$r->gid").'</nobr>';
				$rows[count($rows)-1][]='<nobr>'.l(t('Begin review'), "definations/onlinetests/op/$r->gid").'</nobr>';
				break;
  	  	  	  case ONLINETEST_STATUS_INTERVIEWING:
				$rows[count($rows)-1][]='<nobr>'.l(t('View paper'), "definations/onlinetests/modify/$r->gid").'</nobr>';
				$rows[count($rows)-1][]='<nobr>'.l(t('Stop review'), "definations/onlinetests/op/$r->gid").'</nobr>';
				break;
  	  	  	  case ONLINETEST_STATUS_FINISHED:
				$rows[count($rows)-1][]=array(
					'data'=>'<nobr>'.l(t('View paper'), "definations/onlinetests/modify/$r->gid").'</nobr>',
					'colspan'=>'2',
				);
				break;
  	  	  }
      } else {
      	  $rows[count($rows)-1][]=array(
      	  	  'data'=>'<nobr/>','colspan'=>2,
      	  );
      }
  }

  if(count($rows)==0) {
    $rows[] = array(array('data' => t('No going have been filled.'), 'colspan' => $should_list_paper_admin?'8':'7'));
  }
  
  $output = '';
  $output .= theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');
  
  return $output;
}

function onlinetests_onlinetests_list_perm($gid=NULL) {
	$is_dep_only=db_select('vl_exam','e')->condition('uid',$GLOBALS['user']->name)->fields('e')->countQuery()->execute()->fetchField();
	if(!$is_dep_only)
		return user_access('administer online exams');
	else { 
		$goingexams=array();
		$query=db_select('vl_going','g')->condition('department',$GLOBALS['user']->name)->fields('g');
		if($gid) $query->condition('gid',$gid);
		$result=$query->execute();
		foreach($result as $r) {
			$goingexams+=explode(', ',$r->valid_exams);
		}
		foreach($goingexams as $eid) {
			$etype=db_select('vl_exam','e')->fields('e',array('etype'))->condition('eid',$eid)->execute()->fetchField();
			if($etype==3) return TRUE;
		}
	}
	return FALSE; 
}

function onlinetests_modify_quest($form, $form_state, $gid) {
	$going=db_select('vl_going','g')->condition('gid',$gid)->fields('g')->execute()->fetchObject();
	
	$is_passed = ($going->status != ONLINETEST_STATUS_ABOUT_TO_BEGIN);
	if($is_passed)
		drupal_set_title(t('View paper').' - '.$going->gname);
	else
		drupal_set_title(t('Modify paper').' - '.$going->gname);;
	
	$exam_ids=explode(', ', $going->valid_exams);
	$exam_names=array();
	foreach($exam_ids as $exam_id) {
		$rd=db_select('vl_exam', 'e')
			->fields('e')
			->condition('eid',$exam_id)
			->execute()->fetchObject();
		if($rd)
			$exam_names[$exam_id]=$rd->ename.$rd->elevel;
	}
	
	$form=array();
	$form['exams']=array(
		'#type' => 'vertical_tabs',
	);
	foreach($exam_ids as $exam_id) {
		$default_values=db_select('vl_quest','q')->fields('q')->condition('gid',$gid)->condition('eid',$exam_id)->execute()->fetchObject();
		$form[$exam_id]=array(
			'#type' => 'fieldset',
			'#title' => $exam_names[$exam_id],
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
			'#group' => 'exams',
		);
		$form[$exam_id]['stem']=array(
			'#type' => 'textarea',
			'#title' => t('Stem'),
			'#rows' => 10,
			'#disabled' => $is_passed,
			'#default_value' => isset($default_values->stem)?$default_values->stem:'',
			'#required' => TRUE,
		);
		$r=db_select('vl_itemspec','i')->condition('eid',$exam_id)->fields('i')->execute()->fetchObject();
		$quests=explode(', ', $default_values->materials);
		for($i=1;$i<=$r->itematts;$i++) {
			$form[$exam_id]['quest'.$exam_id.'_'.$i]=array(
				'#type' => 'managed_file',
				'#title' => t('Material @i', array('@i'=>$i)),
				'#disabled' => $is_passed,
				'#upload_validators' => array('file_validate_extensions'=>array()),
				'#default_value' => $quests[$i-1],
				'#required' => TRUE,
			);
		}
		$answertexts=explode(', ', $default_values->descriptivetext);
		for($i=1;$i<=$r->answeratts;$i++) {
			$form[$exam_id]['ans'.$exam_id.'_'.$i]=array(
				'#type' => 'textfield',
				'#title' => t('Title of answer @i', array('@i'=>$i)),
				'#disabled' => $is_passed,
				'#default_value' => $answertexts[$i-1],
				'#required' => TRUE,
				'#size' => 50,
			);
		}
	}
	if(count($exam_ids)==1) {
		foreach($form[$exam_ids[0]] as $k=>$c) {
			if(substr($k,0,1)!='#')
				$form[$k]=$form[$exam_ids[0]][$k];
		}
		unset($form[$exam_ids[0]]);
		unset($form['exams']);
	}
	
	if(!$is_passed)	$form['submit'] = array('#type' => 'submit', '#value' =>t('Save'));
	$form['cancel'] = array('#markup' => l(t('Cancel'), 'definations/onlinetests'));
	
	return $form;
}

function onlinetests_modify_quest_submit($form, &$form_state) {
	$gid=arg(3);
	$exams=db_select('vl_going','g')->condition('gid',$gid)->fields('g',array('valid_exams'))->execute()->fetchField();
	$exam_ids=explode(', ', $exams);
	foreach($exam_ids as $eid) {
		$orig_materials=explode(', ',db_select('vl_quest','q')->fields('q',array('materials'))->condition('gid',$gid)->condition('eid',$eid)->execute()->fetchField());
		db_delete('vl_quest')->condition('gid',$gid)->condition('eid',$eid)->execute();
		$materials=array();
		$answertext=array();
		foreach($form_state['values'] as $fid => $fvalue) {
			if(strpos($fid, 'quest'.$eid) !== FALSE)
				$materials[]=$fvalue;
			else if(strpos($fid, 'ans'.$eid) !== FALSE)
				$answertext[]=$fvalue;
		}
		db_insert('vl_quest')->fields(array(
			'gid' => $gid,
			'eid' => $eid,
			'stem' => $form_state['values']['stem'],
			'materials' => implode(', ', $materials),
			'descriptivetext' => implode(', ', $answertext),
		))->execute();
		
		$files_to_add=array_diff($materials, $orig_materials);
		$files_to_remove=array_diff($orig_materials, $materials);
		foreach($files_to_add as $fileid) {
			$file = file_load($fileid);
			$file->status = FILE_STATUS_PERMANENT;
			file_save($file);
			file_usage_add($file, 'onlinetests', 'quest', $GLOBALS['user']->uid);
		}
		foreach($files_to_remove as $fileid) {
			$file = file_load($fileid);
			if($file) {
				file_usage_delete($file, 'onlinetests', 'quest', $GLOBALS['user']->uid);
				file_delete($file);
			}
		}
	}
	drupal_set_message(t('Modification saved.'));
	$form_state['redirect']='definations/onlinetests';
}

function onlinetests_myonlinetests_perm() {
	$query=db_select('vl_exam','e')->condition('e.etype',3);
	$query->innerJoin('students_going','sg','sg.eid=e.eid');
	$query->fields('sg')->isNotNull('sg.gid')->condition('sg.uid',$GLOBALS['user']->name);
	return user_access('participate online exams') && $query->countQuery()->execute()->fetchField();
}

function onlinetests_myonlinetests_for_students() {
	return 'THANK YOU';
}