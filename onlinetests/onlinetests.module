<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * @file
 * Provides the operations of online tests.
 */
define("ONLINETEST_STATUS_ABOUT_TO_BEGIN",1);
define("ONLINETEST_STATUS_ONGOING",2);
define("ONLINETEST_STATUS_ENDED",3);
define("ONLINETEST_STATUS_INTERVIEWING",4);
define("ONLINETEST_STATUS_FINISHED",5);

define("ONLINETEST_ACCESSCODE_LENGTH", 8);


/**
 * Implementation of hook_help().
 */
function onlinetests_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'definations/itemspec':
      $output = t('Define specification of online examinations.');
      break;
    case 'definations/onlinetests':
      $output = t('Organize online tests.');
      break;
  }
    return '<p>'.$output.'</p>';
}

/**
 * Implements hook_permission
 */
function onlinetests_permission() {
  return array(
    'administer online exams' => array(
      'title' => t('Administrater online tests'),
    ),
    'participate online exams' => array(
      'title' => t('Participate online tests'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function onlinetests_menu() {
  $items['definations/itemspec'] = array(
    'title' => 'Item specification',
    'description' => "Define specification of online examinations.",
    'weight' => 10,
    'page callback' => 'onlinetests_itemspec_list',
    'access callback' => 'onlinetests_admin_perm',
  );
  $items['definations/itemspec/%'] = array(
    'title' => 'Item specification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_itemspec_edit',2),
    'access callback' => 'onlinetests_admin_perm',
    'access arguments' => array(2),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['definations/onlinetests'] = array(
    'title' => 'Online tests',
    'description' => "Organize online tests.",
    'weight' => 13,
    'page callback' => 'onlinetests_onlinetests_list',
    'access callback' => 'onlinetests_onlinetests_list_perm',
  );
  $items['definations/onlinetests/modify/%'] = array(
    'title' => 'Modify paper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_modify_quest',3),
    'access callback' => 'onlinetests_onlinetests_list_perm',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['definations/onlinetests/op/%'] = array(
    'title' => 'Operation on tests',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_operations',3),
    'access callback' => 'onlinetests_onlinetests_list_perm',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['definations/onlinetests/quest/%'] = array(
    'title' => 'Output all students quest',
    'page callback' => 'onlinetests_quest_report',
    'page arguments' => array(3),
    'access callback' => 'onlinetests_onlinetests_quest_perm',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  $items['myonlinetests'] = array(
    'title' => 'My Online tests',
    'description' => "Participate online examinations.",
    'weight' => -2,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_myonlinetests_for_students'),
    'access callback' => 'onlinetests_myonlinetests_perm',
  );
  return $items;
}

function onlinetests_admin_perm($eid=NULL) {
	$query=db_select('vl_exam','e')->condition('e.uid',$GLOBALS['user']->name)->fields('e')->condition('e.etype',3);
	if(!empty($eid)) $query=$query->condition('eid',$eid);
	$is_dep_only=$query->countQuery()->execute()->fetchField();
	return user_access('administer online exams') && ($GLOBALS['user']->uid==1? 1: $is_dep_only);
}

function onlinetests_itemspec_list() {
	$is_dep_only=db_select('vl_exam','e')->condition('e.uid',$GLOBALS['user']->name)->fields('e')->countQuery()->execute()->fetchField();
	$query=db_select('vl_exam','e')->condition('etype',3)->fields('e');
	$query->innerJoin('vl_research_sec','r','e.uid=r.uid');
	$query=$query->fields('r',array('rname'))->orderBy('e.eid');
	if($is_dep_only) {
		$query=$query->condition('e.uid',$GLOBALS['user']->name);
	}
	$is_itemspec_exist=db_table_exists('vl_itemspec');
	if($is_itemspec_exist) {
		$query->leftJoin('vl_itemspec','i','e.eid=i.eid');
		$query=$query->fields('i',array('itematts','answeratts'));
	}
	$result=$query->execute();
	
	$rows=array();

	$header = array(t('Exam ID'), t('Exam Name'));
	if(!$is_dep_only)
		$header[]=t('Teachers');
	if($is_itemspec_exist) {
		$header[]=t('Num of item attachments');
		$header[]=t('Num of answer attachments');
	}
	$header[]=t('Operations');
	
	foreach($result as $r) {
		$row=array(
			$r->eid,
			$r->ename.$r->elevel,
		);
		if(!$is_dep_only)
			$row[]=$r->rname;
		if($is_itemspec_exist) {
			$row[]=empty($r->itematts)?t('N/A'):$r->itematts;
			$row[]=empty($r->answeratts)?t('N/A'):$r->answeratts;
		}
		$row[]=l(t('Edit'),'definations/itemspec/'.$r->eid);
		$rows[]=$row;
	}
	$output = theme('table', array('header'=>$header, 'rows'=>$rows, 'empty' => t('No suitable exams.')));

	return $output;
}

function onlinetests_itemspec_edit($form, $form_state, $eid) {
	$e=db_select('vl_exam','e')->condition('e.eid',$eid)->condition('e.etype',3)->fields('e')->execute()->fetchObject();
	drupal_set_title(t('Item specification').' - '.$e->ename.$e->elevel);
	
	$e=db_select('vl_itemspec','i')->condition('i.eid',$eid)->fields('i')->execute()->fetchObject();
	
	$form=array();
	$form['itematts']=array(
		'#title' => t('Num of item attachments'),
		'#type' => 'textfield',
		'#size' => 3,
		'#required' => TRUE,
		'#default_value' => isset($e->itematts)?$e->itematts:'0',
	);
	$form['answeratts']=array(
		'#title' => t('Num of answer attachments'),
		'#type' => 'textfield',
		'#size' => 3,
		'#required' => TRUE,
		'#default_value' => isset($e->answeratts)?$e->answeratts:'0',
	);
	$form['submit'] = array('#type' => 'submit', '#value' =>t('Save'));
	return $form;
}

function onlinetests_itemspec_edit_validate($form, $form_state) {
	if(!is_numeric($form_state['values']['itematts']))
		form_set_error('itematts', t('Only numerics are allowed.'));
	if(!is_numeric($form_state['values']['answeratts']))
		form_set_error('answeratts', t('Only numerics are allowed.'));
}

function onlinetests_itemspec_edit_submit($form, &$form_state) {
	db_delete('vl_itemspec')
		->condition('eid',arg(2))
		->execute();
	db_insert('vl_itemspec')
		->fields(array(
			'eid' => arg(2),
			'itematts' => $form_state['values']['itematts'],
			'answeratts' => $form_state['values']['answeratts'],
	))->execute();
	$form_state['redirect']='definations/itemspec';
	drupal_set_message(t('Modification saved.'));
}

function onlinetests_onlinetests_list() {
  $is_dep_only=db_select('vl_exam','e')->condition('uid',$GLOBALS['user']->name)->fields('e')->countQuery()->execute()->fetchField();

  $header = array(
  	array('data'=>t('Status'), 'field'=>'num'),
  	array('data'=>t('Schedule Name'), 'field'=>'gid', 'sort'=>'asc'),
  	array('data'=>t('Place'), 'field'=>'g.place'),
  	array('data'=>t('Existing people'), 'field'=>'num'),
  	array('data'=>t('Time'), 'field'=>'g.time'),
  	array('data'=>t('Operations'), 'colspan'=>'2'),
  );
  
  $query=db_select('vl_going', 'g')
	->fields('g')
	->extend('TableSort')
	->orderByHeader($header);

  $result = $query->execute();

  $rows=array();
  
  foreach($result as $r) {
  	  $num=db_select('students_going','sg')
  	  	  ->fields('sg')
  	  	  ->groupBy('sg.uid')
  	  	  ->condition('sg.gid',$r->gid)
  	  	  ->countQuery()
  	  	  ->execute()->fetchField();
  	  if($num) {
  	  	  $tmp_status=t('N/A');
  	  	  switch($r->status) {
  	  	  	  case ONLINETEST_STATUS_ABOUT_TO_BEGIN:
  	  	  	  	  $tmp_status=t("About to begin"); break;
  	  	  	  case ONLINETEST_STATUS_ONGOING:
  	  	  	  	  $tmp_status=t("Now performing").' '.l('<img src="'.base_path().drupal_get_path('module', 'going').'/printer.png" title="'.t('Print Quest Paper').'"/>',"definations/onlinetests/quest/$r->gid", array('html'=>true));
  	  	  	  	  break;
  	  	  	  case ONLINETEST_STATUS_ENDED:
  	  	  	  	  $tmp_status=t("Ended"); break;
  	  	  	  case ONLINETEST_STATUS_INTERVIEWING:
  	  	  	  	  $tmp_status=t("Now interviewing"); break;
  	  	  	  case ONLINETEST_STATUS_FINISHED:
  	  	  	  	  $tmp_status=t("Finished"); break;
  	  	  }
  	  }
  	  else
  	  	  $tmp_satus=t('About to begin');
  	  
  	  $rows[] = array(
  	  	  '<nobr>'.$tmp_status.'</nobr>',
  	  	  $r->gname,
  	  	  db_select('vl_room', 'r')->fields('r',array('rname'))->condition('r.rid', $r->place)->execute()->fetchField(),
  	  	  $num,
  	  	  '<nobr>'.implode('</nobr><br/><nobr>',explode(' ',_going_datetime_to_string($r->time))).'</nobr>',
  	  );
  	  if($num) {
  	  	if($r->status===FALSE) $status=ONLINETEST_STATUS_ABOUT_TO_BEGIN;
		switch($r->status) {
			case ONLINETEST_STATUS_ABOUT_TO_BEGIN:
				$rows[count($rows)-1][]='<nobr>'.l(t('Modify paper'), "definations/onlinetests/modify/$r->gid").'</nobr>';
				$rows[count($rows)-1][]='<nobr>'.l(t('Start'), "definations/onlinetests/op/$r->gid").'</nobr>';
				break;
  	  	  	  case ONLINETEST_STATUS_ONGOING:
				$rows[count($rows)-1][]='<nobr>'.l(t('View paper'), "definations/onlinetests/modify/$r->gid").'</nobr>';
				$rows[count($rows)-1][]='<nobr>'.l(t('End'), "definations/onlinetests/op/$r->gid").'</nobr>';
				break;
  	  	  	  case ONLINETEST_STATUS_ENDED:
				$rows[count($rows)-1][]='<nobr>'.l(t('View paper'), "definations/onlinetests/modify/$r->gid").'</nobr>';
				$rows[count($rows)-1][]='<nobr>'.l(t('Begin review'), "definations/onlinetests/op/$r->gid").'</nobr>';
				break;
  	  	  	  case ONLINETEST_STATUS_INTERVIEWING:
				$rows[count($rows)-1][]='<nobr>'.l(t('View paper'), "definations/onlinetests/modify/$r->gid").'</nobr>';
				$rows[count($rows)-1][]='<nobr>'.l(t('Stop review'), "definations/onlinetests/op/$r->gid").'</nobr>';
				break;
  	  	  	  case ONLINETEST_STATUS_FINISHED:
				$rows[count($rows)-1][]=array(
					'data'=>'<nobr>'.l(t('View paper'), "definations/onlinetests/modify/$r->gid").'</nobr>',
					'colspan'=>'2',
				);
				break;
  	  	  }
      } else {
      	  $rows[count($rows)-1][]=array(
      	  	  'data'=>'<nobr/>','colspan'=>2,
      	  );
      }
  }

  if(count($rows)==0) {
    $rows[] = array(array('data' => t('No going have been filled.'), 'colspan' => $should_list_paper_admin?'8':'7'));
  }
  
  $output = '';
  $output .= theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');
  
  return $output;
}

function onlinetests_onlinetests_list_perm($gid=NULL) {
	$is_dep_only=db_select('vl_exam','e')->condition('uid',$GLOBALS['user']->name)->fields('e')->countQuery()->execute()->fetchField();
	if(!$is_dep_only)
		return user_access('administer online exams');
	else { 
		$goingexams=array();
		$query=db_select('vl_going','g')->condition('department',$GLOBALS['user']->name)->fields('g');
		if($gid) $query->condition('gid',$gid);
		$result=$query->execute();
		foreach($result as $r) {
			$goingexams+=explode(', ',$r->valid_exams);
		}
		foreach($goingexams as $eid) {
			$etype=db_select('vl_exam','e')->fields('e',array('etype'))->condition('eid',$eid)->execute()->fetchField();
			if($etype==3) return TRUE;
		}
	}
	return FALSE; 
}

function onlinetests_modify_quest($form, $form_state, $gid) {
	$going=db_select('vl_going','g')->condition('gid',$gid)->fields('g')->execute()->fetchObject();
	
	$is_passed = ($going->status != ONLINETEST_STATUS_ABOUT_TO_BEGIN);
	if($is_passed)
		drupal_set_title(t('View paper').' - '.$going->gname);
	else
		drupal_set_title(t('Modify paper').' - '.$going->gname);;
	
	$exam_ids=explode(', ', $going->valid_exams);
	$exam_names=array();
	foreach($exam_ids as $exam_id) {
		$rd=db_select('vl_exam', 'e')
			->fields('e')
			->condition('eid',$exam_id)
			->execute()->fetchObject();
		if($rd)
			$exam_names[$exam_id]=$rd->ename.$rd->elevel;
	}
	
	$form=array();
	$form['exams']=array(
		'#type' => 'vertical_tabs',
	);
	foreach($exam_ids as $exam_id) {
		$default_values=db_select('vl_quest','q')->fields('q')->condition('gid',$gid)->condition('eid',$exam_id)->execute()->fetchObject();
		$form[$exam_id]=array(
			'#type' => 'fieldset',
			'#title' => $exam_names[$exam_id],
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
			'#group' => 'exams',
		);
		$form[$exam_id]['stem']=array(
			'#type' => 'textarea',
			'#title' => t('Stem'),
			'#rows' => 10,
			'#disabled' => $is_passed,
			'#default_value' => isset($default_values->stem)?$default_values->stem:'',
			'#required' => TRUE,
		);
		$r=db_select('vl_itemspec','i')->condition('eid',$exam_id)->fields('i')->execute()->fetchObject();
		$quests=explode(', ', $default_values->materials);
		for($i=1;$i<=$r->itematts;$i++) {
			$form[$exam_id]['quest'.$exam_id.'_'.$i]=array(
				'#type' => 'managed_file',
				'#title' => t('Material @i', array('@i'=>$i)),
				'#disabled' => $is_passed,
				'#upload_validators' => array('file_validate_extensions'=>array()),
				'#default_value' => $quests[$i-1],
				'#required' => TRUE,
				'#upload_location' => 'private://onlinetests/quests/',
			);
		}
		$answertexts=explode(', ', $default_values->descriptivetext);
		for($i=1;$i<=$r->answeratts;$i++) {
			$form[$exam_id]['ans'.$exam_id.'_'.$i]=array(
				'#type' => 'textfield',
				'#title' => t('Title of answer @i', array('@i'=>$i)),
				'#disabled' => $is_passed,
				'#default_value' => $answertexts[$i-1],
				'#required' => TRUE,
				'#size' => 50,
			);
		}
	}
	if(count($exam_ids)==1) {
		foreach($form[$exam_ids[0]] as $k=>$c) {
			if(substr($k,0,1)!='#')
				$form[$k]=$form[$exam_ids[0]][$k];
		}
		unset($form[$exam_ids[0]]);
		unset($form['exams']);
	}
	
	if(!$is_passed)	{
		$form['submit'] = array('#type' => 'submit', '#value' =>t('Save'));
		$form['cancel'] = array('#markup' => l(t('Cancel'), 'definations/onlinetests'));
	}
	
	return $form;
}

function onlinetests_modify_quest_submit($form, &$form_state) {
	$gid=arg(3);
	$exams=db_select('vl_going','g')->condition('gid',$gid)->fields('g',array('valid_exams'))->execute()->fetchField();
	$exam_ids=explode(', ', $exams);
	foreach($exam_ids as $eid) {
		$orig_materials=explode(', ',db_select('vl_quest','q')->fields('q',array('materials'))->condition('gid',$gid)->condition('eid',$eid)->execute()->fetchField());
		db_delete('vl_quest')->condition('gid',$gid)->condition('eid',$eid)->execute();
		$materials=array();
		$answertext=array();
		foreach($form_state['values'] as $fid => $fvalue) {
			if(strpos($fid, 'quest'.$eid) !== FALSE)
				$materials[]=$fvalue;
			else if(strpos($fid, 'ans'.$eid) !== FALSE)
				$answertext[]=$fvalue;
		}
		db_insert('vl_quest')->fields(array(
			'gid' => $gid,
			'eid' => $eid,
			'stem' => $form_state['values']['stem'],
			'materials' => implode(', ', $materials),
			'descriptivetext' => implode(', ', $answertext),
		))->execute();
		
		$files_to_add=array_diff($materials, $orig_materials);
		$files_to_remove=array_diff($orig_materials, $materials);
		foreach($files_to_add as $fileid) {
			$file = file_load($fileid);
			$file->status = FILE_STATUS_PERMANENT;
			file_save($file);
			file_usage_add($file, 'onlinetests', 'quest', $GLOBALS['user']->uid);
		}
		foreach($files_to_remove as $fileid) {
			$file = file_load($fileid);
			if($file) {
				file_usage_delete($file, 'onlinetests', 'quest', $GLOBALS['user']->uid);
				file_delete($file);
			}
		}
	}
	drupal_set_message(t('Modification saved.'));
	$form_state['redirect']='definations/onlinetests';
}

function onlinetests_operations($form, $form_state, $gid=NULL) {
	$query=db_select('vl_going','g')->condition('gid',$gid)->fields('g');
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$query->fields('r',array('rname'));
	$going=$query->execute()->fetchObject();
	if($going===false || is_null($going->status)) { drupal_access_denied(); return; }
	$operation_impossible=array('status' => 0);
	$form=array();
	switch($going->status) {
		case ONLINETEST_STATUS_ABOUT_TO_BEGIN: // Now to start
			// First check whether the students are available
			$result=db_select('students_going','sg')->condition('sg.gid',$gid)->fields('sg',array('uid'))->execute();
			foreach($result as $r) {
				$query=db_select('students_going','sg')->condition('sg.gid',$gid,'<>')->condition('sg.uid',$r->uid)->condition('sg.status',ONLINETEST_STATUS_ONGOING)->fields('sg');
				if($query->countQuery()->execute()->fetchField()) {
					$operation_impossible=array(
						'status' => 1,
						'description' => t('Operation cannot be done.').t('Some of the students are participating other exams.'),
					);
				}
			}
			if($operation_impossible['status']) break;
			// Now provides information to start the test
			$form['info']=array(
				'#type' => 'markup',
				'#markup'=>'<div class="messages">'._going_datetime_to_string($going->time).' / '.$going->gname.' / '.$going->rname.'</div>',
			);
			$title=t('About to start following test');
			$description=t('The students will be able to view the quest online after the test begins.');
			$submit=t('Start the test');
	}
	if($operation_impossible['status'] ) {
		drupal_set_message($operation_impossible['description'], 'error');
		drupal_goto('definations/onlinetests');
	}
	return confirm_form($form, $title,
		'definations/onlinetests',
		$description,
		$submit
	);
}

function onlinetests_operations_submit($form, &$form_state) {
	$st=db_select('vl_going','g')->condition('gid',arg(3))->fields('g',array('status'))->execute()->fetchField();
	db_update('vl_going')->condition('gid',arg(3))
		->fields(array(
			'status'=>$st+1,
		))->execute();
	// If about to start the exam, the initialize the students' status
	if($st==1) {
		$query=db_select('students_going','sg')->condition('gid',arg(3))->fields('sg',array('uid'))->distinct();
		$result=$query->execute();
		foreach($result as $r) {
			// Generate an eight-digit acccess code for students to use
			$accesscode='';
			$allowable_characters = 'ABCDEFHKLMNPQRSTUVWXYZ';
			$len = strlen($allowable_characters) - 1;
			for($i=0;$i<ONLINETEST_ACCESSCODE_LENGTH;$i++)
				$accesscode.=$allowable_characters[mt_rand(0, $len)];
			db_update('students_going')->condition('gid',arg(3))->condition('uid',$r->uid)
				->fields(array(
					'accesscode'=>$accesscode,
					'status'=>1,
				))->execute();
		}
	}
	drupal_set_message(t('Operation done.'));
	$form_state['redirect']='definations/onlinetests';
}

function onlinetests_file_download($uri) {
	$target=file_uri_target($uri);
	if(preg_match('/^onlinetests\/quests/', $target)) {
		if(!user_access('administer online exams') && !user_access('participate online exams')) return -1;
		$query=db_select('file_managed','f')->condition('f.uri',$uri)->fields('f');
		$r=$query->execute()->fetchObject();
		$headers=array(
			'Content-type' => $r->filemime,
			'Content-Transfer-Encoding' => 'binary',
			'Content-Length' => $r->filesize,
		);
		
		$ua = $_SERVER["HTTP_USER_AGENT"];
		$filename=$r->filename;
		$encoded_filename = urlencode($filename);
		if (preg_match("/MSIE/", $ua) || preg_match("/Chrome/", $ua)) {
			$headers['Content-Disposition'] = 'attachment; filename="' . $encoded_filename . '"';
		} else if (preg_match("/Firefox/", $ua)) {
			$headers['Content-Disposition'] = 'attachment; filename*="utf8\'\'' . $filename . '"';
		} else {
			$headers['Content-Disposition'] = 'attachment; filename="' . $filename . '"';
		}
		return $headers;
	}
	if(preg_match('/^onlinetests\/answers/', $target)) {
		$query=db_select('file_managed','f')->condition('f.uid',$GLOBALS['user']->uid)->condition('f.uri',$uri)->fields('f')->countQuery();
		$r=$query->execute()->fetchField();
		if($r==1 || $GLOBALS['user']->uid==1) {
			$query=db_select('file_managed','f')->condition('f.uri',$uri)->fields('f');
			$r=$query->execute()->fetchObject();
			$headers=array(
				'Content-type' => $r->filemime,
				'Content-Transfer-Encoding' => 'binary',
				'Content-Length' => $r->filesize,
			);
			
			$ua = $_SERVER["HTTP_USER_AGENT"];
			$filename=$r->filename;
			$encoded_filename = urlencode($filename);
			if (preg_match("/MSIE/", $ua) || preg_match("/Chrome/", $ua)) {
				$headers['Content-Disposition'] = 'attachment; filename="' . $encoded_filename . '"';
			} else if (preg_match("/Firefox/", $ua)) {
				$headers['Content-Disposition'] = 'attachment; filename*="utf8\'\'' . $filename . '"';
			} else {
				$headers['Content-Disposition'] = 'attachment; filename="' . $filename . '"';
			}
			return $headers;
		}
	}
	return NULL;
}

function onlinetests_myonlinetests_perm($eid=NULL) {
	$query=db_select('vl_exam','e')->condition('e.etype',3);
	$query->innerJoin('students_going','sg','sg.eid=e.eid');
	$query->innerJoin('vl_going','g','g.gid=sg.gid');
	$query->condition('g.status',array(ONLINETEST_STATUS_ONGOING, ONLINETEST_STATUS_ENDED),'in');
	$query->fields('sg')->isNotNull('sg.gid')->condition('sg.uid',$GLOBALS['user']->name);
	return user_access('participate online exams') && $query->countQuery()->execute()->fetchField();
}

function onlinetests_myonlinetests_for_students($form, $form_state) {
	$uid=$GLOBALS['user']->name;
	$query=db_select('vl_going','g')->condition('g.status',array(ONLINETEST_STATUS_ONGOING, ONLINETEST_STATUS_ENDED),'in');
	$query->innerJoin('students_going','sg','g.gid=sg.gid');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	$query->condition('sg.uid',$uid);
	$query->fields('e',array('ename','eid'))->fields('g',array('gid','gname'))->fields('sg',array('status'));
	$r=$query->execute()->fetchObject();
	drupal_set_title(sprintf("%s - %s", t('My Online tests'), $r->gname));
	
	$form=array();
	
	// If the student has not start his exam, show the access code to enter
	if($r->status==ONLINETEST_STATUS_ABOUT_TO_BEGIN) {
		$form['eid']=array(
			'#type'=>'hidden',
			'#value'=>$r->eid,
		);
		$form['gid']=array(
			'#type'=>'hidden',
			'#value'=>$r->gid,
		);
		$form['gname']=array(
			'#type'=>'hidden',
			'#value'=>$r->gname,
		);
		$form['accesscode']=array(
			'#type'=>'textfield',
			'#title'=>t('Access Code'),
			'#required'=>TRUE,
			'#size'=>ONLINETEST_ACCESSCODE_LENGTH+5,
			'#maxlength'=>ONLINETEST_ACCESSCODE_LENGTH,
			'#attributes'=>array('style'=>'font-size: 40px'),
		);
		return confirm_form($form, sprintf("%s - %s", t('My Online tests'), $r->gname),
			'<front>',
			t('Please input the access code given by the administrator.').t('Case Insensitive.'),
			t('Start the test'), t('Back to Home')
		);
	}
	
	$query=db_select('watchdog','w')->fields('w',array('hostname'))->condition('uid',$GLOBALS['user']->uid)->condition('type','onlinetests')
		->condition('severity',WATCHDOG_INFO)->orderBy('timestamp', 'DESC');
	$valid_remote_address=$query->execute()->fetchField();
	if($valid_remote_address!=$_SERVER['REMOTE_ADDR']) {
		$form['notice']=array(
			'#markup'=>'<div class="messages error">'.t('You are not logged in from registered machine. Please check with administrator.').'</div>'
		);
		return $form;
	}
	
	$query=db_select('students_going','sg')->fields('sg',array('eid','answers'))
		->condition('sg.uid',$GLOBALS['user']->name)->condition('sg.gid',$r->gid)->condition('sg.status',ONLINETEST_STATUS_ONGOING);
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	$query->fields('e',array('ename'));
	$query->innerJoin('vl_quest','q','q.gid=sg.gid AND q.eid=sg.eid');
	$query->fields('q',array('stem','materials','descriptivetext'));
	$exams=$query->execute();
	
	$form['exams']=array(
		'#type' => 'vertical_tabs',
	);
	foreach($exams as $e) {
		$form['e'.$e->eid]=array(
			'#type' => 'fieldset',
			'#title' => $e->ename,
			'#group' => 'exams',
		);
		$form['e'.$e->eid]['stem']=array(
			'#type' => 'item',
			'#title' => t('Stem'),
			'#markup' => $e->stem
		);
		$materials=explode(', ', $e->materials);
		$i=1;
		foreach($materials as $materail) {
			$q=db_select('file_managed','f')->fields('f',array('uri','filename'))->condition('fid',$materail)->execute()->fetchObject();
			$form['e'.$e->eid]['material'.$i]=array(
				'#type' => 'item',
				'#title' => t('Material @i', array('@i'=>$i++)),
				'#markup' => l($q->filename,file_create_url($q->uri)),
			);
		}
		$descriptivetext=explode(', ', $e->descriptivetext);
		$i=1;
		$answers=explode(', ', $e->answers);
		foreach($descriptivetext as $text) {
			$form['e'.$e->eid]['answer_'.$e->eid.'_'.$i]=array(
				'#type' => 'managed_file',
				'#required' => TRUE,
				'#title' => $text,
				'#default_value' => $answers[$i-1],
				'#upload_validators' => array('file_validate_extensions'=>array()),
				'#upload_location' => 'private://onlinetests/answers/',
				'#progress_indicator' => 'bar',
			);
			$i++;
		}
	}
	
	if($exams->rowCount()==1) {
		foreach($form['e'.$e->eid] as $k=>$c) {
			if(substr($k,0,1)!='#')
				$form[$k]=$form['e'.$e->eid][$k];
		}
		drupal_set_title(sprintf("%s - %s", t('My Online tests'), $e->ename));
		unset($form['e'.$e->eid]);
		unset($form['exams']);
	}
	$form['save']=array(
		'#type' => submit,
		'#value' => t('Save my work for later use, but do not submit it'),
	);
	$form['submit']=array(
		'#type' => submit,
		'#value' => t('Submit my work and end the test'),
	);
	return $form;
}

function onlinetests_myonlinetests_for_students_validate($form, $form_state) {
	if(isset($form['accesscode']) && $form_state['values']['accesscode']) {
		$accesscode=db_select('students_going','sg')->condition('uid',$GLOBALS['user']->name)
			->condition('eid',$form_state['values']['eid'])->fields('sg',array('accesscode'))
			->execute()->fetchField();
		if(strtoupper($accesscode)!==trim(strtoupper($form_state['values']['accesscode'])))
			form_set_error('accesscode', t('The Access Code you have entered does not match with our record.'));
	}
}

function onlinetests_myonlinetests_for_students_submit($form, $form_state) {
	if(isset($form['accesscode']) && $form_state['values']['accesscode']) {
		db_update('students_going')->condition('uid',$GLOBALS['user']->name)->condition('gid',$form_state['values']['gid'])->fields(array(
			'status' => ONLINETEST_STATUS_ONGOING
		))->execute();
		
		watchdog('onlinetests','!user started online tests !gname.',
			array(
				'!user'=>$GLOBALS['user']->name,
				'!gname'=>$form_state['values']['gname'],
			),
			WATCHDOG_INFO
		);
		drupal_set_message(t('Online tests started.'));
	} else {
		switch($form_state['clicked_button']['#id']) {
			case 'edit-save':
				drupal_set_message(t('File saved.'));
				break;
			case 'edit-submit' :
				drupal_set_message(t('File saved.'));
				drupal_set_message(t('Online tests ended.'));
				break;
		}
	}
	
}

function onlinetests_onlinetests_quest_perm($gid=NULL) {
	$query=db_select('vl_going','g')->condition('g.gid',$gid)->condition('g.status',ONLINETEST_STATUS_ONGOING)->fields('g')->countQuery();
	return onlinetests_admin_perm() && $query->execute()->fetchField();
}

function onlinetests_quest_report($gid=NULL) {
	$query=db_select('vl_going','g')->condition('g.gid',$gid)->condition('g.status',ONLINETEST_STATUS_ONGOING)->fields('g');
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$query->addField('r','rname');
	$query->innerJoin('students_going','sg','sg.gid=g.gid');
	$query->addField('sg','accesscode');
	$query->innerJoin('students','s','sg.uid=s.uid');
	$query->fields('s',array('uid','name'));
	$query->distinct();
	$r=$query->execute();
	
	if(!$r) { drupal_access_denied(); return; }
	
	require_once(drupal_get_path('module','onlinetests').'/../tcpdf/config/lang/eng.php');
	require_once(drupal_get_path('module','onlinetests').'/../tcpdf/tcpdf.php');
	require_once(drupal_get_path('module','onlinetests').'/../tcpdf/barcodes.php');
	
	ini_set('max_execution_time','500');

	// create new PDF document
	$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

	// set document information
	$pdf->SetCreator(PDF_CREATOR);
	$pdf->SetTitle('中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生专业考试在线考试试题及考试说明');
	$pdf->SetAuthor('中央音乐学院');
	
	$pdf->SetFont('droidsansfallback', 'B', 14, '', true);
	// set default font subsetting mode
	$pdf->setFontSubsetting(false);
	
	$pdf->setPrintHeader(false);
	$pdf->setPrintFooter(false);

	$pdf->SetMargins(6, 6, 6);
	$pdf->SetAutoPageBreak(false);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);
	$pdf->SetFillColor(216,216,216);
	$pdf->SetDrawColor(255,255,255);
	$pdf->SetLineWidth(0.5);

	foreach($r as $s) {
		$pdf->AddPage();
		$pdf->SetDrawColor(255,255,255);

		// Header
		$pdf->SetFontSize(25);
		$pdf->setX(6);$pdf->setY(6);
		$pdf->Cell(198,20,'中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生在线考试试题',1,1,'C',true);
		
		$pdf->SetFontSize(16);
		$pdf->Cell(198,12,_going_datetime_to_string($s->time).' / '.$s->gname.' / '.$s->rname,1,1,'C',false);
		
		$pdf->SetFontSize(10);
		$description ='&nbsp;<br/>答题要求：<br/><br/>';
		$description.='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;① 使用自己的准考证号和密码登录 '.$GLOBALS['base_url'].' 网站。如遗忘密码可在网站自行重设密码。<br/>';
		$description.='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;② 登录后选择【我的在线考试】功能。<br/>';
		$description.='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;③ 根据网站提示输入本试题中提供的试题访问代码，可查看试题及下载有关材料。<br/>';
		$description.='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;④ 答题结束，将有关答案文件上传至该网站，确定无误后点击网站上的【交卷结束考试】按钮，并在监考员处签名。<br/>';
		$description.='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;考试时间终了时仍未点击【交卷结束考试】的考生，将被视为白卷。<br/>';
		$pdf->SetCellPaddings(3,3,3,3);
		$pdf->WriteHTMLCell(198,40,6,38,$description,1,1,'L',true,'',0,false,'T','T');

		$pdf->Cell(20,6,'准考证号',1,0,'C',true);
		$pdf->Cell(40,6,$s->uid,0,0,'L',false);
		$pdf->Cell(20,6,'姓名',1,0,'C',true);
		$pdf->Cell(60,6,$s->name,0,0,'L',false);
		$pdf->Cell(30,6,'试题访问代码',1,0,'C',true);
		$pdf->Cell(80,6,$s->accesscode,0,0,'L',false);
		
		$query=db_select('vl_quest','q')->condition('q.gid',$gid);
		$query->innerJoin('vl_exam','e','q.eid=e.eid');
		$query->addField('e','ename');
		$query->fields('q',array('gid','eid','stem'));
		$query->innerJoin('students_going','sg','sg.gid=q.gid AND sg.eid=e.eid');
		$query->condition('sg.uid',$s->uid);
		$query->orderBy('e.eid');
		$exams=$query->execute();
		foreach($exams as $e) {
			$pdf->SetDrawColor(0,0,0);
			$pdf->Line(6,$pdf->GetY()+12,204,$pdf->GetY()+12);
			$pdf->SetFontSize(20);
			$pdf->setY($pdf->GetY()+10);
			$pdf->Cell(200,4,$e->ename.' 试题',0,0,'L',false);
			$pdf->SetFontSize(12);
			$pdf->Ln();
			$pdf->MultiCell(200,6,$e->stem,0,'L',false);
		}
	}
	$pdf->Output(variable_get('zhaoban_current_year',date('Y')).'_'.$gid.'.pdf', 'I');
}
