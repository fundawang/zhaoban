<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * @file
 * Provides the operations of online tests.
 */


/**
 * Implementation of hook_help().
 */
function onlinetests_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'definations/itemspec':
      $output = t('Define specification of online examinations.');
      break;
  }
    return '<p>'.$output.'</p>';
}

/**
 * Implements hook_permission
 */
function onlinetests_permission() {
  return array(
    'administer online exams' => array(
      'title' => t('Administrater online tests'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function onlinetests_menu() {
  $items['definations/itemspec'] = array(
    'title' => 'Item specification',
    'description' => "Define specification of online examinations.",
    'weight' => 10,
    'page callback' => 'onlinetests_itemspec_list',
    'access callback' => 'onlinetests_admin_perm',
  );
  $items['definations/itemspec/%'] = array(
    'title' => 'Item specification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_itemspec_edit',2),
    'access callback' => 'onlinetests_admin_perm',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['definations/arrange/quest/%'] = array(
    'title' => 'Modify paper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onlinetests_modify_quest',3),
    'access callback' => 'onlinetests_admin_perm',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function onlinetests_admin_perm($eid=NULL) {
	$query=db_select('vl_exam','e')->condition('e.uid',$GLOBALS['user']->name)->fields('e')->condition('e.etype',3);
	if(!empty($eid)) $query=$query->condition('eid',$eid);
	$is_dep_only=$query->countQuery()->execute()->fetchField();
	return user_access('administer online exams') && ($GLOBALS['user']->uid==1? 1: $is_dep_only);
}

function onlinetests_itemspec_list() {
	$is_dep_only=db_select('vl_exam','e')->condition('e.uid',$GLOBALS['user']->name)->fields('e')->countQuery()->execute()->fetchField();
	$query=db_select('vl_exam','e')->condition('etype',3)->fields('e');
	$query->innerJoin('vl_research_sec','r','e.uid=r.uid');
	$query=$query->fields('r',array('rname'))->orderBy('e.eid');
	if($is_dep_only) {
		$query=$query->condition('e.uid',$GLOBALS['user']->name);
	}
	$is_itemspec_exist=db_table_exists('vl_itemspec');
	if($is_itemspec_exist) {
		$query->leftJoin('vl_itemspec','i','e.eid=i.eid');
		$query=$query->fields('i',array('itematts','answeratts'));
	}
	$result=$query->execute();
	
	$rows=array();

	$header = array(t('Exam ID'), t('Exam Name'));
	if(!$is_dep_only)
		$header[]=t('Teachers');
	if($is_itemspec_exist) {
		$header[]=t('Num of item attachments');
		$header[]=t('Num of answer attachments');
	}
	$header[]=t('Operations');
	
	foreach($result as $r) {
		$row=array(
			$r->eid,
			$r->ename.$r->elevel,
		);
		if(!$is_dep_only)
			$row[]=$r->rname;
		if($is_itemspec_exist) {
			$row[]=empty($r->itematts)?t('N/A'):$r->itematts;
			$row[]=empty($r->answeratts)?t('N/A'):$r->answeratts;
		}
		$row[]=l(t('Edit'),'definations/itemspec/'.$r->eid);
		$rows[]=$row;
	}
	$output = theme('table', array('header'=>$header, 'rows'=>$rows, 'empty' => t('No suitable exams.')));

	return $output;
}

function onlinetests_itemspec_edit($form, $form_state, $eid) {
	$e=db_select('vl_exam','e')->condition('e.eid',$eid)->condition('e.etype',3)->fields('e')->execute()->fetchObject();
	drupal_set_title(t('Item specification').' - '.$e->ename.$e->elevel);
	
	$e=db_select('vl_itemspec','i')->condition('i.eid',$eid)->fields('i')->execute()->fetchObject();
	
	$form=array();
	$form['itematts']=array(
		'#title' => t('Num of item attachments'),
		'#type' => 'textfield',
		'#size' => 3,
		'#required' => TRUE,
		'#default_value' => isset($e->itematts)?$e->itematts:'0',
	);
	$form['answeratts']=array(
		'#title' => t('Num of answer attachments'),
		'#type' => 'textfield',
		'#size' => 3,
		'#required' => TRUE,
		'#default_value' => isset($e->answeratts)?$e->answeratts:'0',
	);
	$form['submit'] = array('#type' => 'submit', '#value' =>t('Save'));
	return $form;
}

function onlinetests_itemspec_edit_validate($form, $form_state) {
	if(!is_numeric($form_state['values']['itematts']))
		form_set_error('itematts', t('Only numerics are allowed.'));
	if(!is_numeric($form_state['values']['answeratts']))
		form_set_error('answeratts', t('Only numerics are allowed.'));
}

function onlinetests_itemspec_edit_submit($form, &$form_state) {
	db_delete('vl_itemspec')
		->condition('eid',arg(2))
		->execute();
	db_insert('vl_itemspec')
		->fields(array(
			'eid' => arg(2),
			'itematts' => $form_state['values']['itematts'],
			'answeratts' => $form_state['values']['answeratts'],
	))->execute();
	$form_state['redirect']='definations/itemspec';
	drupal_set_message(t('Modification saved.'));
}

function onlinetests_modify_quest($form, $form_state, $gid) {
	$going=db_select('vl_going','g')->condition('gid',$gid)->fields('g')->execute()->fetchObject();
	drupal_set_title(t('Modify paper').' - '.$going->gname);
	
	$exam_ids=explode(', ', $going->valid_exams);
	$exam_names=array();
	foreach($exam_ids as $exam_id) {
		$rd=db_select('vl_exam', 'e')
			->fields('e')
			->condition('eid',$exam_id)
			->execute()->fetchObject();
		if($rd)
			$exam_names[$exam_id]=$rd->ename.$rd->elevel;
	}
	
	$form=array();
	foreach($exam_ids as $exam_id) {
		$form[$exam_id]=array(
			'#type' => 'fieldset',
			'#title' => $exam_names[$exam_id],
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
		);
		$form[$exam_id]['stem']=array(
			'#type' => 'textarea',
			'#title' => t('Stem'),
			'#rows' => 10,
			'#required' => TRUE,
		);
		$r=db_select('vl_itemspec','i')->condition('eid',$exam_id)->fields('i')->execute()->fetchObject();
		for($i=1;$i<=$r->itematts;$i++) {
			$form[$exam_id]['quest'.$exam_id.'_'.$i]=array(
				'#type' => 'managed_file',
				'#title' => t('Material @i', array('@i'=>$i)),
				'#upload_validators' => array('file_validate_extensions'=>array()),
				'#required' => TRUE,
			);
		}
		for($i=1;$i<=$r->answeratts;$i++) {
			$form[$exam_id]['ans'.$exam_id.'_'.$i]=array(
				'#type' => 'textfield',
				'#title' => t('Title of answer @i', array('@i'=>$i)),
				'#required' => TRUE,
				'#size' => 50,
			);
		}
	}
	if(count($exam_id)==1) {
		foreach($form[$exam_ids[0]] as $k=>$c) {
			if(substr($k,0,1)!='#')
				$form[$k]=$form[$exam_ids[0]][$k];
		}
		unset($form[$exam_ids[0]]);
	}
	
	$form['submit'] = array('#type' => 'submit', '#value' =>t('Save'));
	$form['cancel'] = array('#markup' => l(t('Cancel'), 'definations/arrange'));
	
	return $form;
}

function onlinetests_modify_quest_submit($form, $form_state) {
	$gid=arg(3); 
	db_delete('vl_quest')->condition('gid',$gid)->execute();
	$exams=db_select('vl_going','g')->condition('gid',$gid)->fields('g',array('valid_exams'))->execute()->fetchField();
	$exam_ids=explode(', ', $exams);
	foreach($exam_ids as $eid) {
		$materials=array();
		$answertext=array();
		foreach($form_state['values'] as $fid => $fvalue) {
			if(strpos($fid, 'quest'.$eid) !== FALSE)
				$materials[]=$fvalue;
			else if(strpos($fid, 'ans'.$eid) !== FALSE)
				$answertext[]=$fvalue;
		}
		db_insert('vl_quest')->fields(array(
			'gid' => $gid,
			'eid' => $eid,
			'stem' => $form_state['values']['stem'],
			'materials' => implode(', ', $materials),
			'descriptivetext' => implode(', ', $answertext),
		))->execute();
	}
}
