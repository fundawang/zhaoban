<?php

/**
 * Implements hook_help().
 */
function onlinecharge_help($path, $arg) {
	switch ($path) {
		case 'charge/fee':
			$output = t('Define charging fees and standard.');
			break;
		case 'charge/log':
			$output = t('Check payment logs.');
			break;
		case 'user/%/payment':
			$output = '<p>'.t('This page will list all your online payment orders. Please note that we only record the online payment status. So if you pay the order offline, the status will not update.').'</p>';
			break;
		default:
			return;
	}
	return '<p>'.$output.'</p>';
}

/**
 * Implements hook_permission
 */
function onlinecharge_permission() {
	return array(
		'administer charging' => array(
			'title' => t('Administrater charging fees and view logs'),
		),
		'use online charging' => array(
			'title' => t('Use online charging feature'),
		),
	);
}

function onlinecharge_theme() {
	return array(
		'onlinecharge_fee' => array(
			'render element' => 'form', 
		),
		'onlinecharge_user_orders' => array(
			'render element' => 'form', 
		),
		'onlinecharge_log_form' => array(
			'render element' => 'form', 
		),
	);
}

/**
 * Implements hook_menu().
 */
function onlinecharge_menu() {
	$items['charge'] = array(
		'title' => 'Online charging',
		'description' => "Features regarding online charging.",
		'page callback' => 'onlinecharge_admin_page',
		'access callback' => 'user_access',
		'access arguments' => array('administer charging'),
		'expanded' => TRUE,
	);
	$items['charge/fee'] = array(
		'title' => 'Fees',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('onlinecharge_fee'),
		'weight' => 1,
		'description' => "Define charging fees and standard.",
		'access callback' => 'user_access',
		'access arguments' => array('administer charging'),
	);
	$items['charge/log'] = array(
		'title' => 'Payment Logs',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('onlinecharge_log_form'),
		'weight' => 2,
		'description' => "Check payment logs.",
		'access callback' => 'user_access',
		'access arguments' => array('administer charging'),
	);
	$items['user/%user/payment'] = array(
		'title' => 'Online Charging',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('onlinecharge_user_orders',1),
		'type' => MENU_LOCAL_TASK,
		'access callback' => 'onlinecharge_user_access',
		'access arguments' => array(1),
	);
	return $items;
}

function onlinecharge_admin_page() {
	$item = menu_get_item();
	$content = system_admin_menu_block($item);
	return theme('admin_block_content', array('content' => $content));
}

function onlinecharge_fee() {
	$form=array();
	$should_disabled=db_select('orders','o')->fields('o')->countQuery()->execute()->fetchField();
	$title=db_select('vl_charging_standard','sc')->fields('sc',array('title'))->condition('period',1)->execute()->fetchField();
	$form['telephone']=array(
		'#type' => $should_disabled?'item':'textfield',
		'#required' => TRUE,
		'#title' => t('Contact phone on charging question'),
		'#maxlength' => 20,
		'#default_value' => variable_get('charging_telephone'),
		'#markup' => variable_get('charging_telephone'),
		'#size' => 50,
	);
	$form['round1feetitle']=array(
		'#type' => $should_disabled?'item':'textfield',
		'#required' => TRUE,
		'#title' => t('Title for 1st round charging standard'),
		'#maxlength' => 100,
		'#default_value' => $title,
		'#markup' => $title,
		'#size' => 80,
	);
	$title=db_select('vl_charging_standard','sc')->fields('sc',array('title'))->condition('period',2)->execute()->fetchField();
	$form['round2feetitle']=array(
		'#type' => $should_disabled?'item':'textfield',
		'#required' => TRUE,
		'#title' => t('Title for 2nd round charging standard'),
		'#maxlength' => 100,
		'#default_value' => $title,
		'#markup' => $title,
		'#size' => 80,
	);
	$title=db_select('vl_charging_standard','sc')->fields('sc',array('title'))->condition('period',3)->execute()->fetchField();
	$form['round3feetitle']=array(
		'#type' => $should_disabled?'item':'textfield',
		'#required' => TRUE,
		'#title' => t('Title for 3rd round charging standard'),
		'#maxlength' => 100,
		'#default_value' => $title,
		'#markup' => $title,
		'#size' => 80,
	);
	$student_types=db_select('vl_student_type','st')->fields('st')->orderby('st.stid')->execute();
	$form['detail']=array(
		'#type' => 'item',
		'#title' => t('Detail charging standard'),
		'#required' => TRUE,
		'#description' => t('Unit: RMB'),
	);
	foreach($student_types as $student_type) {
		$fee=db_select('vl_charging_standard','sc')->condition('ucategory',$student_type->stid)->condition('period',1)->fields('sc',array('fee'))->execute()->fetchField();
		$form['feestandard_1_'.$student_type->stid]=array(
			'#type' => $should_disabled?'item':'textfield',
			'#required' => TRUE,
			'#maxlength' => 10,
			'#default_value'=>$fee,
			'#markup'=>$fee,
			'#size' => 10,
		);
		$fee=db_select('vl_charging_standard','sc')->condition('ucategory',$student_type->stid)->condition('period',2)->fields('sc',array('fee'))->execute()->fetchField();
		$form['feestandard_2_'.$student_type->stid]=array(
			'#type' => $should_disabled?'item':'textfield',
			'#required' => TRUE,
			'#maxlength' => 10,
			'#default_value'=>$fee,
			'#markup'=>$fee,
			'#size' => 10,
		);
		$fee=db_select('vl_charging_standard','sc')->condition('ucategory',$student_type->stid)->condition('period',3)->fields('sc',array('fee'))->execute()->fetchField();
		$form['feestandard_3_'.$student_type->stid]=array(
			'#type' => $should_disabled?'item':'textfield',
			'#required' => TRUE,
			'#maxlength' => 10,
			'#default_value'=>$fee,
			'#markup'=>$fee,
			'#size' => 10,
		);
	}
	if(!$should_disabled)
		$form['submit']=array('#type'=>'submit', '#value'=>t('Save'));
	else
		$form['submit']=array('#type'=>'item', '#title'=>t('Because there are generated orders, so the standard cannot be modified.'));
	return $form;
}

function theme_onlinecharge_fee($variables) {
	$form=$variables['form'];
	$output='';
	$output.=drupal_render($form['telephone']);
	$output.=drupal_render($form['round1feetitle']);
	$output.=drupal_render($form['round2feetitle']);
	$output.=drupal_render($form['round3feetitle']);
	$output.=drupal_render($form['detail']);
	$header=array(
		t('Student Type'),
		t('1st round standard'),
		t('2nd round standard'),
		t('3rd round standard'),
	);
	$student_types=db_select('vl_student_type','st')->fields('st')->orderby('st.stid')->execute();
	$rows=array();
	foreach($student_types as $student_type) {
		$rows[]=array(
			$student_type->name,
			drupal_render($form['feestandard_1_'.$student_type->stid]),
			drupal_render($form['feestandard_2_'.$student_type->stid]),
			drupal_render($form['feestandard_3_'.$student_type->stid]),
		);
	}
	$output.=theme('table', array('header'=>$header, 'rows'=>$rows));
	$output.=drupal_render($form['submit']);
	$output.=drupal_render_children($form);
	return $output;
}

function onlinecharge_fee_validate($form, $form_state) {
	foreach($form_state['values'] as $key => $value) {
		if(preg_match('/^feestandard/', $key)) {
			if(!is_numeric($value) || intval($value) < 0)
				form_set_error($key, t('The value you have entered is not numeric.'));
		}
	}
}

function onlinecharge_fee_submit($form, $form_state) {
	db_truncate('vl_charging_standard')->execute();
	$student_types=db_select('vl_student_type','st')->fields('st')->orderBy('st.stid')->execute();
	$i=1;
	foreach($student_types as $student_type) {
		db_insert('vl_charging_standard')->fields(array(
			'scid' => $i++,
			'title' => $form_state['values']['round1feetitle'],
			'fee' => $form_state['values']['feestandard_1_'.$student_type->stid],
			'ucategory' => $student_type->stid,
			'is_passround1' => 0,
			'period' => 1,
		))->execute();
		db_insert('vl_charging_standard')->fields(array(
			'scid' => $i++,
			'title' => $form_state['values']['round2feetitle'],
			'fee' => $form_state['values']['feestandard_2_'.$student_type->stid],
			'ucategory' => $student_type->stid,
			'is_passround1' => 1,
			'period' => 2,
		))->execute();
		db_insert('vl_charging_standard')->fields(array(
			'scid' => $i++,
			'title' => $form_state['values']['round3feetitle'],
			'fee' => $form_state['values']['feestandard_3_'.$student_type->stid],
			'ucategory' => $student_type->stid,
			'is_passround1' => 1,
			'period' => 3,
		))->execute();
	}
	variable_set('charging_telephone',$form_state['values']['telephone']);
	drupal_set_message(t('Settings have been saved.'));
	watchdog('onlinecharge',
		'!user modified charging standard.', array(
			'!user'=>$GLOBALS['user']->name,
		WATCHDOG_INFO
	));
}

function onlinecharge_user_access($user) {
	if($user->uid==1) return FALSE;
	$t=_signup_determine_period($user);
	if($t==signup_progress_PAYMENT || $t==signup_progress_FINISH) {
		if($user->uid==$GLOBALS['user']->uid) return user_access('use online charging', $user);
		else return user_access('use online charging', $user) && user_access('administer users');
	}
	else return FALSE;
}

function onlinecharge_user_orders($form, $form_state, $user) {
	
	for($i=1;$i<=3;$i++) {
		$fee=db_select('vl_charging_standard','c')->fields('c')->condition('c.ucategory',$user->ucategory)->condition('c.period',$i)->condition('c.fee',0,'>')->execute()->fetchObject();
		if($fee==FALSE) continue;
		$r=db_select('orders','o')->condition('o.standard',$fee->scid)->condition('o.uid',$user->uid)->fields('o')->countQuery()->execute()->fetchField();
		if($r==0) {
			if($fee->period > 1) {
				$p=db_select('students','s')->condition('s.uid',$user->name)->condition('s.pass_round1_major',1)->fields('s')->countQuery()->execute()->fetchField();
				if(!$p) break;
			}
			db_insert('orders')->fields(array(
				'uid' => $user->uid,
				'orderno' => sprintf('%s%06d',date('YmdHms'),mt_rand(0,999999)),
				'ordertime' => time(),
				'standard' => $fee->scid,
				'ordertitle' => $fee->title,
				'amount' => $fee->fee,
				'gateway' => NULL,
				'gatewaytransactionno' => NULL,
				'status' => 0,
			))->execute();
		}
	}
	
	$form=array();
	$form['round1']=array(
		'#type' => 'fieldset',
		'#title' => t('1st round charging'),
		'#collapsible' => TRUE,
	);
	
	$r=db_select('students','s')->condition('s.uid',$user->name)->condition('s.pass_round1_major',1)->fields('s')->countQuery()->execute()->fetchField();
	if($r>0) {
		$form['round2']=array(
			'#type' => 'fieldset',
			'#title' => t('2nd round charging'),
			'#collapsible' => TRUE,
		);
		$form['round3']=array(
			'#type' => 'fieldset',
			'#title' => t('3rd round charging'),
			'#collapsible' => TRUE,
		);
	}
	$query=db_select('orders','o')->condition('o.uid',$user->uid)->orderBy('o.orderno');
	$query->innerJoin('vl_charging_standard','sc','sc.scid=o.standard');
	$query->fields('o')->fields('sc',array('period'));
	$result=$query->execute();
	foreach($result as $r) {
		$form['round'.$r->period]['period'.$r->period]=array(
			'#type' => 'hidden',
			'#value' => $r->period==1?t('1st round'):($r->period==2?t('2nd round'):t('3rd round')),
		);
		$form['round'.$r->period]['orderno'.$r->period]=array(
			'#type' => 'hidden',
			'#value' => $r->orderno,
		);
		$form['round'.$r->period]['amount'.$r->period]=array(
			'#type' => 'hidden',
			'#value' => $r->amount,
		);
		$form['round'.$r->period]['status'.$r->period]=array(
			'#type' => 'hidden',
			'#value' => $r->status,
		);
		switch($r->status) {
			case 0:
				$form['submit'.$r->period]=array(
					'#type' => 'submit',
					'#name' => 'submit'.$r->period,
					'#value' => t('Pay'),
				);
				break;
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
				$form['submit'.$r->period]=array(
					'#markup' => t('System is processing your order. Please check it later.').'<br/>'.t('You orderno is @orderno.',
						array('@orderno'=>$r->orderno, '@trans'=>$r->gatewaytransactionno)),
				);
				break;
			case 100:
				break;
		}
	}
	
	$rows=array();
	$result=db_select('orders','o')->fields('o')->condition('o.uid',$user->uid)->orderBy('o.orderno')->execute();
	foreach($result as $r) {
		$rows[$r->orderno]=array(
			'orderno' => $r->orderno,
			'ordertitle' => $r->ordertitle,
			'amount' => '&yen;'.$r->amount,
			'gateway' => $r->gateway,
			'gatewaytrans' => $r->gatewaytransactionno,
			'status' => $r->status,
		);
	}
	$gateways=module_invoke_all('paymentgatewayinfo');
	$options=array();
	foreach($gateways as $k => $v) {
		$options[$k]='<img src="/'.$v.'"/>';
	}
	if(count($gateways)==1) {
		$keys=array_keys($gateways);
		$form['gateway']=array(
			'#type' => 'hidden',
			'#value' => $keys[0],
		);
		$form['gatewayintro']=array(
			'#type' => 'item',
			'#title' => t('Payment Gateway'),
			'#required' => TRUE,
			'#markup' => $options[$keys[0]],
			'#description' => t('We only support above payment gateway now.'),
		);
	} else {
		$form['gateway']=array(
			'#type' => 'radios',
			'#title' => t('Payment Gateway Selection'),
			'#description' => t('Please select your preferred payment gateway.'),
			'#required' => TRUE,
			'#options' => $options,
		);
		$keys=array_keys($gateways);
		$form['gateway']['#default_value']=$keys[0];
	}
	$markup=array(
		'<b>'.t('Notice').'</b><br/>'.
		t('If your payment is successful, but we do not show the result here, please wait a few minutes to have our record updated.').'<br/>'.
		t('If you still have inconsistent record here, for instance, multiple sucessful payments, please contact us at @tel.', array('@tel'=>variable_get('charging_telephone')))
	);
	foreach($gateways as $key => $value) {
		$markup[]=module_invoke($key, 'help', 'charge/'.$key, '');
	}
	$form['help']=array(
		'#markup' => '<p>'.implode('</p><p>',$markup).'</p>',
	);
	return $form;
}

function onlinecharge_user_orders_submit($form, $form_state) {
	$_form_state=array();
	$i=substr($form_state['clicked_button']['#name'],-1);
	$time=time();
	db_update('orders')->condition('orderno',$form_state['values']['orderno'.$i])->fields(array(
		'ordertime' => $time,
		'gateway' => $form_state['values']['gateway'],
		'status' => 10,
	))->execute();
	$query=db_select('orders','o')->fields('o',array('ordertitle'))->condition('o.orderno',$form_state['values']['orderno'.$i]);
	$query->innerJoin('users','u','u.uid=o.uid');
	$query->innerJoin('students','s','s.uid=u.name');
	$query->fields('s',array('uid','name'));
	$r=$query->execute()->fetchObject();
	$_form_state['values']=array(
		'orderno' => $form_state['values']['orderno'.$i],
		'amount' => $form_state['values']['amount'.$i],
		'ordertime' => $time,
		'ordertitle' => $r->uid.$r->name.' '.$r->ordertitle,
	);
	$output=module_invoke($form_state['values']['gateway'], 'submit_form_submit', $form, $_form_state);
	echo($output);
	exit;
}

function theme_onlinecharge_user_orders($variables) {
	$form=$variables['form'];
	$output='';

	$header=array(
		'period' => t('Exam Period'),
		'amount' => t('Fees'),
		'status' => t('Status'),
		'operation' => t('Operation'),
	);
	$rows=array();
	
	for($i=1;$i<=3;$i++) {
		if(!isset($form['round'.$i])) continue;
		$rows[]=array(
			$form['round'.$i]['period'.$i]['#value'],
			'&yen;'.$form['round'.$i]['amount'.$i]['#value'],
			_onlinecharge_status_text($form['round'.$i]['status'.$i]['#value']),
			isset($form['submit'.$i])?drupal_render($form['submit'.$i]):'',
		);
		unset($form['round'.$i]);
	}
	$output.=theme('table', array('header'=>$header, 'rows'=>$rows));
	$output.=drupal_render($form['gateway']);
	if(isset($form['gatewayintro']))
		$output.=drupal_render($form['gatewayintro']);
	$output.=drupal_render($form['help']);
	$output.=drupal_render_children($form);
	
	return $output;
}

function _onlinecharge_status_text($status) {
	switch($status) {
		case 0:
			return t('Not paid');
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			return t('Processing');
		case 100:
			return t('Paid successful');
	}
}

function onlinecharge_gatewayreponse($orderno, $transno, $gateway, $isbackend=TRUE) {
	$r=db_select('orders','o')->condition('o.orderno',$orderno)->condition('o.status',100,'<>')->fields('o')->countQuery()->execute()->fetchField();
	if($r==1 && $isbackend) {
		db_update('orders')->condition('orderno',$orderno)->fields(array(
			'status' => 100,
			'gatewaytransactionno' => $transno
		))->execute();
		watchdog('onlinecharge',
			'@orderno payment succeeded via @gateway.', array(
				'@orderno' => $orderno,
				'@gateway' => $gateway
			),
			WATCHDOG_INFO,
			l(t('View'), 'charge/log')
		);
	}
	if($isbackend) exit;
	$query=db_select('orders','o')->condition('o.orderno',$orderno)->fields('o');
	$query->innerJoin('users','u','o.uid=u.uid');
	$query->fields('u',array('uid','name'));
	$r=$query->execute()->fetchObject();
	if($r->status==100)
		drupal_set_message(t('@user paid @amount for @title successful.',array(
			'@user' => $r->name,
			'@amount' => '&yen;'.$r->amount,
			'@title' => $r->ordertitle
		)));
	if($GLOBALS['user']->uid==$r->uid)
		drupal_goto($GLOBALS['base_url'].'/user/'.$r->uid.'/payment');
	else
		drupal_goto($GLOBALS['base_url']);
}

function onlinecharge_log_form($form, $form_state) {
	$form=array();
	$form['conditions']=array(
		'#type' => 'vertical_tabs',
	);
	$form['activetab']=array(
		'#type' => 'hidden',
		'#value' => 'user',
	);
	$form['user']=array(
		'#type' => 'fieldset',
		'#title' => t('Search by User'),
		'#group'=>'conditions',
		'#attached' => array(
			'js' => array(drupal_get_path('module', 'onlinecharge') . '/onlinecharge.js'),
		),
		'#attributes' => array('class' => array('chargelogsearchbyuser')),
	);
	$form['user']['uid']=array(
		'#type' => 'textfield',
		'#title' => t('Student ID'),
		'#maxlength' => 10,
		'#size' => 30,
	);
	$form['user']['username']=array(
		'#type' => 'textfield',
		'#title' => t('Real Name'),
		'#maxlength' => 10,
		'#size' => 30,
	);
	$form['orders']=array(
		'#type' => 'fieldset',
		'#title' => t('Search by Order'),
		'#group'=>'conditions',
		'#attached' => array(
			'js' => array(drupal_get_path('module', 'onlinecharge') . '/onlinecharge.js'),
		),
	);
	$form['orders']['orderno']=array(
		'#type' => 'textfield',
		'#title' => t('Order No.'),
		'#maxlength' => 20,
		'#size' => 10,
	);
	$form['orders']['status']=array(
		'#type' => 'select',
		'#title' => t('Status'),
		'#options' => array(
			'-1' => '-- '.t('All').' --',
			'0' => t('Not paid'),
			'10' => t('Processing'),
			'100' => t('Paid successful'),
		)
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Search'),
	);
	return $form;
}

function theme_onlinecharge_log_form($variables) {
	$form=$variables['form'];
	$output='';
	$output.=drupal_render_children($form);
	return $output;
}
function onlinecharge_cron() {
	$result=db_select('orders','o')->condition('o.status','100','<>')->isNotNull('o.gateway')->fields('o',array('orderno','gateway','status','ordertime'))->execute();
	foreach($result as $r) {
		if($r->status==15) {
			db_update('orders')->condition('orderno',$r->orderno)->fields(array(
				'status' => 0,
			))->execute();
			watchdog('onlinecharge',
				'@orderno process failed via @gateway.', array(
					'@orderno' => $r->orderno,
					'@gateway' => $r->gateway
				),
				WATCHDOG_ERROR
			);
			continue;
		}
		// hook_querystatus returns transaction number if succeeded, or FALSE when failed.
		$t=module_invoke($r->gateway, 'querystatus', $r->orderno, $r->ordertime);
		if($t) {
			db_update('orders')->condition('orderno',$r->orderno)->fields(array(
				'status' => 100,
				'gatewaytransactionno' => $t
			))->execute();
			watchdog('onlinecharge',
				'@orderno payment succeeded via @gateway.', array(
					'@orderno' => $r->orderno,
					'@gateway' => $r->gateway
				),
				WATCHDOG_INFO,
				l(t('View'), 'charge/log')
			);
		} else {
			db_update('orders')->condition('orderno',$r->orderno)->fields(array(
				'status' => $r->status+1,
			))->execute();
			watchdog('onlinecharge',
				'@orderno process without success via @gateway.', array(
					'@orderno' => $r->orderno,
					'@gateway' => $r->gateway
				),
				WATCHDOG_WARNING
			);
		}
	}
}
?>
