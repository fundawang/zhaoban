<?php

/*
 * This file is licensed under GPLv2+.
*/

function array_transpose($array, $selectKey = false) {
    if (!is_array($array)) return false;
    $return = array();
    foreach($array as $key => $value) {
        if (!is_array($value)) return $array;
        if ($selectKey) {
            if (isset($value[$selectKey])) $return[] = $value[$selectKey];
        } else {
            foreach ($value as $key2 => $value2) {
                $return[$key2][$key] = $value2;
            }
        }
    }
    return $return;
}

/* Usage:
	$data[] = array('volume' => 67, 'edition' => 2);
	$data[] = array('volume' => 86, 'edition' => 1);
	$data[] = array('volume' => 85, 'edition' => 6);
	$data[] = array('volume' => 98, 'edition' => 2);
	$data[] = array('volume' => 86, 'edition' => 6);
	$data[] = array('volume' => 67, 'edition' => 7);

	// Pass the array, followed by the column names and sort flags
	$sorted = array_orderby($data, 'volume', SORT_DESC, 'edition', SORT_ASC);
*/
function array_orderby()
{
	$args = func_get_args();
	$data = array_shift($args);
	foreach ($args as $n => $field) {
		if (is_string($field)) {
			$tmp = array();
			foreach ($data as $key => $row)
				$tmp[$key] = $row[$field];
			$args[$n] = $tmp;
		}
	}
	$args[] = &$data;
	call_user_func_array('array_multisort', $args);
	return array_pop($args);
}

/**
 * Implementation of hook_help().
 */
function score_help($path, $arg) {
	switch ($path) {
		case 'score/emptyscores':
			$output = '<p>'.t('Only authorized users have permisison on emptying scores.').'</p>';
			break;
		case 'signup/transfer':
			$output = '<p>'.t('Please select the going you would like to operate.').'</p>';
			break;
		case 'signup/transfer/%':
			$output = '<p>'.t('You should first select those students, then select the destination profession below the students list. Click Apply when done. You can do it multiple times for single profession, but only once for single student.').'</p>';
			$output .= '<p>'.t('Tip: You may want to input score at fisrt, the sort by the scores to decide.').'</p>';
			break;
		case 'signup/markroundg/deliver':
			$output = '<p>'.t('You may upload the deliver order number of students who are marked as pass roundg.').'</p>';
			break;
		case 'weixin':
			if(is_null($arg))
				$output = sprintf("%s:\n%s",t('Query score'), t('List the exam scores, if you have bound your weixin account.'));
				$output .= "\n\n";
				$output .= sprintf("%s:\n%s",t('Roundg result'), t('List the result of roundg, if you have bound your weixin account.'));
	}
	if (isset($output))
		return $output;
}

/**
 * Implementation of hook_theme().
 */
function score_theme() {
	return array(
		'score_input_going_form' => array(
			'render element' => 'form', 
		),
		'score_gaokao_province_status_form' => array(
			'render element' => 'form', 
		),
		'score_gaokao_province_detail_form' => array(
			'render element' => 'form', 
		),
	);
}
/**
 * Implementation of hook_menu().
 */
function score_menu() {
	$items['score'] = array(
		'title' => 'Score',
		'description' => "Upload the score of the students",
		'page callback' => 'score_top_page',
		'access callback' => 'score_input_going_list_check',
		'expanded' => TRUE,
	);

	$items['score/input'] = array(
		'title' => 'Input one by one',
		'weight' => 0,
		'page callback' => 'score_input_going_list',
		'access callback' => 'score_input_going_list_check',
		'type' => MENU_LOCAL_TASK,
	);

	$items['score/input/%exam'] = array(
		'title' => 'Input one by one',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_input_going_form', 2),
		'type' => MENU_CALLBACK,
		'access callback' => 'score_input_check_access',
		'access arguments' => array(2),
	);
	
	$items['score/input/%exam/%goingfull'] = array(
		'title' => 'Input one by one',
		'weight' => 0,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_input_going_form', 2, 3),
		'type' => MENU_CALLBACK,
		'access callback' => 'score_input_check_access',
		'access arguments' => array(2,3),
	);

	$items['score/automize'] = array(
		'title' => 'Automizing Input',
		'weight' => 1,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_automize_page'),
		'access callback' => 'score_input_going_list_check',
		'type' => MENU_LOCAL_TASK,
	);

	$items['score/batch'] = array(
		'title' => 'Batch upload',
		'weight' => 2,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_batch'),
		'access callback' => 'score_input_going_list_batch_check',
		'type' => MENU_LOCAL_TASK,
	);
	$items['score/view'] = array(
		'title' => 'View Scores',
		'weight' => 2,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_view_admin'),
		'access callback' => 'score_check_perm_view',
	);
	
	$items['score/view/%exam'] = array(
		'title' => 'View Scores',
		'weight' => 2,
		'page callback' => 'score_view_detail',
		'page arguments' => array(2),
		'access callback' => 'score_check_perm_view',
	);
	
	$items['score/prepare3rd'] = array(
		'title' => 'Prepare for the 3rd round students',
		'weight' => 3,
		'page callback' => 'score_prepare_3rd_overview',
		'access callback' => 'score_check_perm_prepare3rd',
	);

	$items['score/prepare3rd/%profession'] = array(
		'title' => 'Prepare for the 3rd round students',
		'#type' => MENU_CALLBACK,
		'weight' => 3,
		'page callback' => 'score_prepare_3rd_detail',
		'page arguments' => array(2),
		'access callback' => 'score_check_perm_prepare3rd',
	);

	$items['score/preparegk'] = array(
		'title' => 'Prepare for the gk round students',
		'weight' => 5,
		'page callback' => 'score_prepare_gk_overview',
		'access callback' => 'score_check_perm_gk',
	);

	$items['score/preparegk/%profession'] = array(
		'title' => 'Prepare for the gk round students',
		'#type' => MENU_CALLBACK,
		'page callback' => 'score_prepare_gk_detail',
		'page arguments' => array(2),
		'access callback' => 'score_check_perm_gk',
	);

	$items['score/inputgk'] = array(
		'title' => 'Input gaokao scores for the students',
		'weight' => 4,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_gaokao_province_status_form'),
		'access callback' => 'score_check_perm_inputgk',
	);

	$items['score/inputgk/%province'] = array(
		'title' => 'Input gaokao scores for the students',
		'#type' => MENU_CALLBACK,
		'weight' => 4,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_gaokao_province_detail_form',2),
		'access callback' => 'user_access',
		'access arguments' => array('input gaokao score'),
	);

	$items['score/emptyscores'] = array(
		'title' => 'Empty Scores',
		'description' => 'Empty specific scores of department',
		'weight' => 10,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_admin_empty_form'),
		'access callback' => 'user_access',
		'access arguments' => array('empty scores'),
	);
	
	$items['signup/transfer'] = array(
			'title'=>'Transfer students',
			'description' => 'Modify the profession of students',
			'weight'=>3,
			'page callback' => 'score_transfer_list',
			'access callback' => 'score_transfer_list_check',
	);
	$items['signup/transfer/%going'] = array(
			'title'=>'Transfer students',
			'type'=>MENU_VISIBLE_IN_BREADCRUMB,
			'description' => 'Modify the profession of students',
			'weight'=>3,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('score_transfer', 2),
			'access callback' => 'score_transfer_check',
			'access arguments'=>array(2),
	);

	$items['signup/markround2'] = array(
			'title'=>'Mark round 2 students',
			'description' => 'Mark the students who will be enrolled in to second round examinations',
			'weight'=>4,
			'page callback' => 'score_mark_2nd_round_list',
			'access callback' => 'score_mark_2nd_round_list_check',
	);
	$items['signup/markround2/%profession'] = array(
			'title'=>'Mark round 2 students',
			'type'=>MENU_VISIBLE_IN_BREADCRUMB,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('score_mark_2nd_round', 2),
			'access callback' => 'score_mark_2nd_round_check',
			'access arguments'=>array(2),
	);

	$items['signup/markround3'] = array(
			'title'=>'Mark round 3 students',
			'description' => 'Mark the students who will be enrolled in to third round examinations',
			'weight'=>4,
			'page callback' => 'score_mark_3rd_round_list',
			'access callback' => 'score_mark_3rd_round_list_check',
	);
	$items['signup/markround3/%profession'] = array(
			'title'=>'Mark round 3 students',
			'type'=>MENU_VISIBLE_IN_BREADCRUMB,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('score_mark_3rd_round', 2),
			'access callback' => 'score_mark_3rd_round_check',
			'access arguments'=>array(2),
	);

	$items['signup/markroundg'] = array(
			'title'=>'Mark round g students',
			'description' => 'Mark the students who will be enrolled in to gaokao',
			'weight'=>4,
			'page callback' => 'score_mark_gaokao_round_list',
			'access callback' => 'score_mark_3rd_round_list_check',
	);
	$items['signup/markroundg/mark'] = array(
			'title'=>'Mark round g students',
			'type' => MENU_DEFAULT_LOCAL_TASK,
			'description' => 'Mark the students who will be enrolled in to gaokao',
			'weight'=>0,
			'page callback' => 'score_mark_gaokao_round_list',
			'access callback' => 'score_mark_3rd_round_list_check',
	);
	$items['signup/markroundg/deliver'] = array(
			'title'=>'Update deliver log',
			'type' => MENU_LOCAL_TASK,
			'description' => 'Update deliver log of round g mail',
			'weight'=>1,
			'page callback'=>'drupal_get_form',
			'page arguments' => array('score_mark_gaokao_update_deliver_orderno'),
			'access callback' => 'score_mark_3rd_round_list_check',
	);
	$items['signup/markroundg/%profession'] = array(
			'title'=>'Mark round g students',
			'type'=>MENU_VISIBLE_IN_BREADCRUMB,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('score_mark_gaokao_round', 2),
			'access callback' => 'score_mark_3rd_round_check',
			'access arguments'=>array(2),
	);

	$items['myscore'] = array(
		'title' => 'My Score',
		'weight' => 21,
		'description' => "Allow students to check the his own result",
		'page callback' => 'score_myscore',
		'access callback' => 'score_myscore_check',
	);

	$items['user/%user/scores'] = array(
		'title callback' => 'score_myscore_title_callback',
		'title arguments' => array(1),
		'page callback' => 'score_myscore',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 12,
		'access callback' => 'score_myscore_check',
		'access arguments'=> array(1),
	);
	
	$items['myscore/round3'] = array(
		'title' => 'The 3rd round exam result',
		'weight' => 0,
		'page callback' => 'score_myscore',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access callback' => 'score_myscore_check',
	);

	$items['myscore/roundg'] = array(
		'title' => 'The admission exam result',
		'weight' => 11,
		'page callback' => 'score_myscore_roundg',
		'type' => MENU_LOCAL_TASK,
		'access callback' => 'score_myscore_check_roundg',
	);
	
	return $items;
}

/**
 * Implementation of hook_permission
 */
function score_permission() {
	return array(
		'input score' => array(
			'title' => t('Input or batch import the scores'),
		),
		'empty scores' => array(
			'title' => t('Empty specific scores'),
		),
		'mark 2nd round students' => array(
			'title' => t('Mark the students who will be enrolled in to second round examinations'),
		),
		'review my score' => array(
			'title' => t('Review my scores'),
		),
		'review all score' => array(
			'title' => t('Review all scores'),
		),
		'check students own scores' => array(
			'title' => t('Review students own scores'),
		),
		'input gaokao score' => array(
			'title' => t('Input students gaokao scores'),
		),
		'check students roundg scores' => array(
			'title' => t('Review my roundg status'),
		),
		'mark 3rd round students' => array(
			'title' => t('Mark enrolled students')
		),
	);
}

function score_input_going_list_check() {
	$query=db_select('students_going','sg')->isNotNull('sg.gid')->fields('sg');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	if(!user_access('review all score') && $GLOBALS['user']->uid)
		$query->condition('e.uid',$GLOBALS['user']->name);
	$r=$query->countQuery()->execute()->fetchField();
	if(user_access('input score') || user_access('review my score'))
		return $r>0;
	else if(user_access('review all score'))
		return $r>0;
	else
		return FALSE;
}

function score_input_going_list_batch_check() {
	$query=db_select('students_going','sg')->isNotNull('sg.gid')->fields('sg');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	$query->condition('e.uid',$GLOBALS['user']->name);
	$r=$query->countQuery()->execute()->fetchField();
	if(user_access('input score') || user_access('review my score'))
		return $r>0;
	else return FALSE;
}

function score_check_perm_view() {
	$query=db_select('students_going');
	$query->addExpression('MAX(gid)', 'g');
	$r=$query->execute()->fetchField();
	return user_access('review all score') && $r;
}

function score_check_perm_prepare3rd() {
	$r=db_select('students','s')->condition('s.pass_round1_major',1)->fields('s')->countQuery()->execute()->fetchField();
	return user_access('review all score') && $r;
}

function score_check_perm_inputgk() {
	$r=db_select('students','s')->condition('s.pass_round3_major',1)->fields('s')->countQuery()->execute()->fetchField();
	return user_access('input gaokao score')&& $r;
}

function score_check_perm_gk() {
	$r=db_select('students','s')->condition('s.pass_round3_major',1)->fields('s')->countQuery()->execute()->fetchField();;
	return (user_access('input gaokao score') || user_access('view gaokao score'))&& $r;
}

function score_input_check_access($exam, $going=NULL) {
	if(!user_access('review my score') && !user_access('input score')) return FALSE;
	if(!empty($exam)) {
		$query=db_select('students_going','sg')->isNotNull('sg.gid')->condition('sg.eid',$exam->eid)->fields('sg');
		if(!empty($going))
			$query->condition('sg.gid',$going->gid);
		$r=$query->countQuery()->execute()->fetchField();
		return $r > 0;
	} else return TRUE;
}

function score_input_going_list() {

	if (!user_access('input score')) return '';
	
	global $user;
	$output ='<div><p>'.
		t('Following exams are owned by your deparment. You can input the scores of the students one by one.').
		'</p><p>'.
		t('Please note that the scores should be uploaded only once, so be careful they are correct 100%.').'</div>';
	
	$form['own']=array(
		'#type'=>'fieldset',
		'#title'=>t('Score of my department'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);

	$query=db_select('vl_exam','e')->fields('e',array('eid'))->fields('s',array('gid'));
	$query->innerJoin('students_going','s','s.eid=e.eid');
	$query->addExpression("CONCAT_WS('',e.ename,e.elevel)", 'enamefull');
	$query=$query->condition('e.uid',$GLOBALS['user']->name)->isNotNull('s.gid')->groupBy('e.eid')->groupBy('s.gid');
	if($query->countQuery()->execute()->fetchField()==0) {
		$item = menu_get_item();
		$content = system_admin_menu_block($item);
		return theme('admin_block_content', array('content' => $content));
	}
	$exams=$query->execute();
	$output1 = '';
	foreach($exams as $exam) {
		$output1 .= '<dt>';
		$output1 .= l($exam->enamefull, 'score/input/'.$exam->eid.'/'.$exam->gid);
		$output1 .= '</dt><dd>';
		$query=db_select('vl_going','g')->fields('g',array('time'))->fields('r',array('rname'));
		$query->innerJoin('vl_room','r','g.place=r.rid');
		$query=$query->condition('g.gid',$exam->gid);
		$r=$query->execute()->fetchObject();
		$output1 .=_going_datetime_to_string($r->time).' / '.$r->rname;
		$output1 .='</dd>';
	}
	$form['own']['output1']=array('#markup'=>$output1);
	
	$form['stu']=array(
		'#type'=>'fieldset',
		'#title'=>t('Score of my students'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	
	$query=db_select('students','s');
	$query->innerJoin('students_score','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('vl_exam','e','c.eid=e.eid');
	$query->addExpression("CONCAT_WS('', ename, elevel)",'ename');
	$query->addExpression("COUNT(c.uid)",'num');
	$query=$query->fields('e',array('eid'))->condition('p.uid',$user->name)->condition('e.uid',$user->name,'<>')->isNotNull('e.eid')
		->where("NOT e.eid LIKE '3%'")->groupBy('e.eid');
	
	$output2='';
	$rdbo=$query->execute();
	foreach($rdbo as $r) {
		if(is_null($r->eid)) continue;
		$output2 .= '<dt>'.l($r->ename, 'score/input/'.$r->eid).'</dt>';
		$output2 .= '<dd>'.t('There are !num of your students have this score.', array('!num'=>$r->num)).'</dd>';
	}
	if($output2=='') {
		unset($form['stu']);
		$output.=drupal_render($form['own']['output1']);
	}
	else {
		$form['stu']['output2']=array('#markup'=>$output2);
		$output.=drupal_render($form['own']);
		$output.=drupal_render($form['stu']);
	}
	return $output;
}

function score_input_going_form($form, $form_state, $exam, $going=NULL) {
	global $user;
	
	$query=db_select('students','s');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->addExpression('u.uid','uuid');
	$query->innerJoin('students_going','g','s.uid=g.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query=$query->fields('s',array('uid','name'))->fields('p',array('pname'))->fields('g',array('gorder','eid','opus'));
	$query=$query->condition('g.eid',$exam->eid)->orderBy('g.gorder');
	if(!empty($going))
		$query->condition('g.gid',$going->gid);
	else $query->isNotNull('g.gid');
	$students=$query->execute();

	drupal_set_title(sprintf('%s - %s',t('Score'), $exam->enamefull));
	
	if(!empty($going) && $students->rowCount())
		$form['info']=array(
			'#markup'=>'<div class="messages">'.$going->formatTime.' / '.$exam->enamefull.' / '.$going->rname.'</div>',
		);
	$text='';
	$j=1;
	
	foreach($students as $student) {
		$form['uid'][$student->uid]=array('#markup'=>l($student->uid, 'user/'.$student->uuid));
		$text.=$student->gorder."\t";
		$text.=$student->uid;
		$form['eid'][$student->uid]=array('#type'=>'hidden', '#markup'=>$student->eid);
		$form['name'][$student->uid]=array('#markup'=>$student->name);
		$form['gorder'][$student->uid]=array('#markup'=>$student->gorder);
		$text.="\t".$student->name;
		$form['profession'][$student->uid]=array('#markup'=>$student->pname);
		$text.="\t".$student->pname."\\n";
		$op=unserialize($student->opus);
		$should_opus=$exam->opus;
		unset($ops);
		for($i=1;$i<=$exam->opus;$i++) {
			$ops[]=$op['opus'.$i];
		}
		if($should_opus >0 )
			$form['opus'][$student->uid]=array('#markup'=>'<ul><li>'.implode('</li><li>', $ops).'</li></ul>');
		$should_disabled=db_select('students_score','sc')->fields('sc')->condition('uid',$student->uid)->condition('eid',$student->eid)->countQuery()->execute()->fetchField();
		if($should_disabled || empty($going))
			$form['score-'.$student->uid]=array('#markup'=>db_select('students_score','sc')->fields('sc',array('score'))->condition('uid',$student->uid)->condition('eid',$student->eid)->execute()->fetchField());
		else
			$form['score-'.$student->uid]=array('#type'=>'textfield', '#title'=> t('!name\'s score', array('!name'=>$student->uid)),'#size'=>20, '#required'=>TRUE, '#prefix'=>'<div class="container-inline">', '#suffix'=>'</div>');
	}
	drupal_add_js(drupal_get_path('module','score').'/ZeroClipboard.js');
	drupal_add_css(drupal_get_path('module', 'score') .'/jquery.toastmessage.css');
	drupal_add_js(drupal_get_path('module','score').'/jquery.toastmessage.js');
	$form['submit']=array(
		'#type'=>'submit',
		'#value'=>t('Save'),
		'#suffix'=>'<input type="button" id="copytoclip" value="'.t('Copy to clipboard').'" class="form-submit"/><script>ZeroClipboard.setMoviePath(\'/'.drupal_get_path('module','score').'/ZeroClipboard.swf\'); var clip = new ZeroClipboard.Client(); clip.setText(\''.$text.'\'); clip.glue(\'copytoclip\'); clip.addEventListener(\'onComplete\', my_complete ); function my_complete( client, text ) { jQuery().toastmessage({position: \'middle-center\', stayTime: 2000}); jQuery().toastmessage(\'showSuccessToast\', \''.t('Copy Succeeded.').'\');}</script>'
	);
	if(empty($going)) unset($form['submit']);
	return $form;
}

function theme_score_input_going_form($variables) {
	$form=$variables['form'];
	if(!isset($form['opus'])) $form['opus']=array();
	if(!is_null(arg(3)) && isset($form['info'])) {
		$warn = '<div class="messages error" id="notification">';
		$warn.= t('WARNING: The score may be input only once, please keep it correct 100%!');
		$warn.= '</div>';
	} else $warn = '';
	$output = '';
	$header=array(
		array('data'=>t('No.')),
		array('data'=>t('Student ID')),
		array('data'=>t('Real Name')),
		array('data'=>t('Score')),
		array('data'=>count($form['opus'])==0?t('Profession'):t('Opuses')),
	);
	
	if(count($form['opus'])>0)
		unset($form['profession']);
	$i=1;
	foreach(element_children($form['uid']) as $u) {
		unset($form['score-'.$u]['#title']);
		if(is_null(arg(3))) unset($form['gorder'][$u]);
		$rows[]=array(
			is_null(arg(3))?$i:drupal_render($form['gorder'][$u]),
			drupal_render($form['uid'][$u]),
			drupal_render($form['name'][$u]),
			drupal_render($form['score-'.$u]),
			count($form['opus'])==0?drupal_render($form['profession'][$u]):drupal_render($form['opus'][$u]),
		);
		$i++;
	}

	$output.=$warn;
	$output.=drupal_render($form['info']);
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	$output.=drupal_render($form['submit']);
	$output.=drupal_render_children($form);
	return $output;;
}

function score_input_going_form_validate($form, &$form_state) {
	foreach($form_state['values'] as $field=>$value) {
		if(!is_null($form_state['values']['score-'.$field])) {
			$score=$form_state['values']['score-'.$field];
			if(!is_numeric($score) || (float)$score < 0 || (float)$score > 100)
				form_set_error('score-'.$field, t('The score you\'ve inputted for !sid is invalid.',array('!sid'=>$field)));
		}
	}
}

function score_input_going_form_submit($form, &$form_state) {
	$i=0;
	foreach($form_state['values'] as $field=>$value) {
		if(isset($form_state['values']['score-'.$field])) {
			$i++;
			$score=$form_state['values']['score-'.$field];
			db_insert('students_score')->fields(array(
				'uid' => $field,
				'eid' => arg(2),
				'score' => $score,
			))->execute();
		}
	}
	if($i) {
	watchdog('score','!user uploaded !num students score.',
		array(
			'!user'=>$GLOBALS['user']->name,
			'!num'=>$i
		)
	);
	drupal_set_message(t('!user uploaded !num students score.',array('!user'=>$GLOBALS['user']->name,'!num'=>$i)));
	}
	$form_state['redirect']='score';
}

function score_admin_empty_form($form, $form_state) {
	$query=db_select('students_score','sc')->fields('sc',array('eid'));
	$query->addExpression('COUNT(sc.uid)','num');
	$query->innerJoin('students','s','sc.uid=s.uid');
	$query->innerJoin('vl_exam','e','sc.eid=e.eid');
	$query->innerJoin('vl_research_sec','r','r.uid=e.uid');
	$query->addExpression(" CONCAT_WS('',e.ename,e.elevel)",'ename');
	$query=$query->fields('r',array('rname'))->groupBy('e.eid')->orderBy('e.eid');
	
	
	$result=$query->execute();
	$form=array();

	$options=array();
	foreach($result as $r) {
		$options[$r->eid]=array(
			'ename' => $r->ename,
			'depname' => $r->rname,
			'num' => $r->num,
		);
	}
	
	$header=array(
		'ename'=>array('data'=>t('Exam Name')),
		'depname'=>array('data'=>t('Responsible department')),
		'num'=>array('data'=>t('Current number of scores')),
	);
	
	$form['info'] = array(
		'#type' => 'item',
		'#title' => t('Please select the exam you want to empty'),
		'#required' => true,
	);
	$form['exams']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $options,
			'#attributes' => array('class'=>array('assign_students')),
			'#empty' => t('No scores to empty.'),
	);
	
	if(count($options)>0) {
		$form['pass']=array(
			'#type' => 'password',
			'#title' => t('Your password'),
			'#required' => true,
			'#size' => 20,
			'#description' => t('To empty scores, we must double check your password.')
		);
	
		$form['save']=array(
			'#type' => 'submit',
			'#value' => t('Empty selected exams\' scores'),
		);
	}
	return $form;
}

function score_admin_empty_form_validate($form, $form_state) {
	// Check if at least one of the exam has been selected.
	$form_values = array_filter($form_state['values']['exams']);
	if(count($form_values)<=0) {
		form_set_error('exams', t('You must select the exams you want to empty.'));
	}
	
	// now check the password
		global $user;
		require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
		if(!user_check_password($form_state['values']['pass'], $user))
			form_set_error('pass', t('The password you have entered is wrong.'));
}

function score_admin_empty_form_submit($form, $form_state) {
	global $user;
	$exams=array_keys(array_filter($form_state['values']['exams']));
	foreach($exams as $exam) {
		$num=db_select('students_score','sc')->condition('sc.eid',$exam)->fields('sc')->countQuery()->execute()->fetchField();
		$query=db_select('vl_exam','e')->condition('eid',$exam);
		$query->addExpression(" CONCAT_WS('',e.ename,e.elevel)",'ename');
		$ename=$query->execute()->fetchField();
		db_delete('students_score')
			->condition('eid',$exam)
			->execute();
		watchdog('score','!user emptied !ename scores for !num students.',
			array(
				'!user' => $user->name,
				'!ename' => $ename,
				'!num' => $num,
			)
		);
		drupal_set_message(t('You emptied !ename scores for !num students.', array('!ename'=>$ename, '!num'=>$num)));
	}
}

function score_batch($form, $form_state) {
	global $user;
	if(!isset($form_state['rebuild_info']['need_preview']))
		$form_state['rebuild_info']['need_preview']=false;
	if($form_state['rebuild_info']['need_preview']) {
		$form['desciption']=array('#markup'=>_score_generate_batch_preview($form_state['values']['eid'], $form_state['values']['score']));
	}
	else
	{
		$form['desciption'] = array(
			'#markup'=>'<p>'.t('The function is to enable the department inputing the scores  by pasting the scores directly from Microsoft Excel or other spreadsheet program. The format of the spreadsheet must be in the following format:').
			sprintf('</p><p><img src="/%s/demo-spreadsheet.png"/></p><p>', drupal_get_path('module','score')).
			t('The program only need the 1st column (the student ID) and the last the column (the final score) of the spreadsheet. There is no limitation on how many the teachers (the columns) in the table. If the first row contains header, it will be skipped automatically.').'</p><p>'.
			t('Please note that the scores which will be saved are exactly the same with what you\'ve seen on the screen. So if you want the number be more accurate, expand the widths of demicals.').'</p>',
		);
	}
	$exams=array();
	$query=db_select('vl_exam','e')->fields('e',array('eid','ename','elevel'));
	$query->innerJoin('students_going','sg','e.eid=sg.eid');
	$query=$query->isNotNull('sg.gid');
	if($user->uid!=1) $query=$query->condition('e.uid',$user->name);
	$results=$query->execute();
	foreach($results as $r) {
		$exams[$r->eid]=$r->ename.$r->elevel;
	}
	
	$scoretypes=array(
		'score' => t('Score'),
		'rank' => t('Rank'),
	);
	
	$form['frame']=array(
		'#type'=>'fieldset',
		'#title'=>t('Batch import scores'),
		'#collapsible'=> $form_state['rebuild_info']['need_preview'],
		'#collapsed' => $form_state['rebuild_info']['need_preview'],
	);
	$form['frame']['eid']=array(
		'#type'=>'select',
		'#title'=>t('Select the exam you want to import'),
		'#options'=>$exams,
		'#default_value'=>isset($form_state['values'])?$form_state['values']['eid']:'',
		'#required'=>TRUE,
	);
	$form['frame']['scoretype']=array(
		'#type'=>'select',
		'#title'=>t('Select the score type'),
		'#options'=>$scoretypes,
		'#default_value'=>isset($form_state['values'])?$form_state['values']['scoretype']:'',
		'#required'=>TRUE,
	);
	$form['frame']['score']=array(
		'#type'=>'textarea',
		'#rows'=>'20',
		'#title'=>t('The mass scores'),
		'#description'=>t('The scores should be pasted directly from spreadsheet program.'),
		'#default_value'=>isset($form_state['values'])?$form_state['values']['score']:'',
		'#required'=>TRUE,
	);
	
	$form['frame']['preview']=array(
		'#type'=>'submit',
		'#value'=>t('Preview result'),
		'#validate'=>array('score_batch_validate'),
		'#submit'=>array('score_batch_preview'),
	);
	if($form_state['rebuild_info']['need_preview'])
		$form['submit']=array(
			'#type'=>'submit',
			'#value'=>t('Save'),
			'#validate'=>array('score_batch_validate'),
			'#submit'=>array('score_batch_submit'),
		);
	unset($form_state['rebuild_info']['need_preview']);

	if(user_access('input score')) return $form;
	else return array();
}

function score_batch_preview($form, &$form_state) {
	$form_state['rebuild_info']['need_preview']=1;
	$form_state['rebuild']=TRUE;
}

function _score_generate_batch_preview($eid,$mass_score) {
	$massscore=explode("\r\n", $mass_score);
	foreach($massscore as $scores) {
		$score[]=explode("\t", $scores);
	}
	if(count($score)==0) return '';
	
	// Determine whether the first row is header;
	if(preg_match('/'.variable_get('zhaoban_current_year',date('Y')).'B/', $score[0][0])==0)
		array_shift($score);
	while(count($score[count($score)-1])==1)
		array_pop($score);
	if(count($score)==0) return '';
	
	$header=array(
		t('Status'),
		t('Student ID'),
		t('Score'),
		t('Real Name'),
		t('Gender'),
		t('Province'),
	);
	
	foreach($score as $row) {
		$query=db_select('students','s')->fields('s',array('uid','name','gender'));
		$query->leftJoin('students_gk','sk','s.uid=sk.uid');
		$query->innerJoin('students_going','sg','s.uid=sg.uid');
		$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
		$query=$query->fields('p',array('pname'))->fields('sk',array('province'))->condition('s.uid',$row[0])->isNotNull('sg.gid');
		$r=$query->execute()->fetchObject();
		
		$rows[]=array(
			'<img src="/misc/watchdog-ok.png"/> '.t('Ready to import'),
			$r->uid,
			trim($row[count($row)-1]),
			$r->name,
			$r->gender=='2'?t('Female'):t('Male'),
			$r->province=='000000'?t('Our own student'):db_select('vl_province','p')->condition('p.pid',$r->province)->fields('p',array('name'))->execute()->fetchField(),
		);
	}
	$output = theme('table', array('header'=>$header, 'rows'=>$rows));
	return $output;
}

function score_batch_submit($form, &$form_state) {
	$form_values=$form_state['values'];
	global $user;
	
	$eid=$form_values['eid'];
	$mass_score=explode("\r\n", $form_values['score']);
	foreach($mass_score as $scores) {
		$score[]=explode("\t", $scores);
	}
	
	// Determine whether the first row is header;
	if(preg_match('/'.variable_get('zhaoban_current_year',date('Y')).'B/', $score[0][0])==0)
		array_shift($score);
	while(count($score[count($score)-1])==1) {
		array_pop($score);
	}
	
	foreach($score as $row) {
		if($form_values['scoretype']=='rank') {
			db_merge('students_score')
				->key(array('uid' => $row[0], 'eid' => $eid))
				->fields(array(
					'rank'=>trim(round($row[count($row)-1],3))
				))->execute();
		} else {
			db_merge('students_score')
				->key(array('uid' => $row[0], 'eid' => $eid))
				->fields(array(
					'score'=>trim(round($row[count($row)-1],3))
				))->execute();
		}
	}
	
	drupal_set_message(t('!user imported !num students\' score.', array('!user'=>$user->name, '!num'=>count($score))));
	watchdog('score','!user uploaded !num students score.',
		array(
			'!user'=>$user->name,
			'!num'=>count($score)
		)
	);
}

function score_batch_validate($form, $form_state) {
	$form_values=$form_state['values'];
	$eid=$form_values['eid'];
	$etype=db_select('vl_exam','e')->condition('e.eid',$eid)->fields('e',array('etype'))->execute()->fetchField();
	if($etype!=2 && $form_values['scoretype']=='rank')
		form_set_error('scoretype', t('You cannot upload rank for this exam.'));
	$mass_score=explode("\r\n", $form_values['score']);
	$score=array();
	foreach($mass_score as $scores) {
		$score[]=explode("\t", $scores);
	}
	if(count($score)==0) {
		form_set_error('score', t('You haven\'t entered any students\' score.'));
	}
	
	// Determine whether the first row is header;
	if(preg_match('/'.variable_get('zhaoban_current_year',date('Y')).'B/', $score[0][0])==0)
		array_shift($score);
	while(count($score[count($score)-1])==1) {
		array_pop($score);
	}
	if(count($score)==0) {
		form_set_error('score', t('You haven\'t entered any students\' score.'));
	}
	$uids=array();
	
	
	foreach($score as $row) {
		if(in_array($row[0], $uids))
			fomr_set_error('score', t('The score of student !uid appears more than one time.', array('!uid'=>$row[0])));
		$uids[]=$row[0];
		
		$query=db_select('students','s')->fields('s');
		$query->innerJoin('students_going','sg','s.uid=sg.uid');
		$query->condition('s.uid',$row[0])->condition('sg.eid',$eid)->isNotNull('sg.gid');
		$r=$query->countQuery()->execute()->fetchField();
		if($r==0) { // No such student
			form_set_error('score', t('There is no such student !uid.', array('!uid'=>$row[0])));
		} else {
			$scoretype=$form_values['scoretype'];
			$caninsert=db_select('students_score','sc')->fields('sc')
				->condition('sc.uid',$row[0])->condition('sc.eid',$eid)->isNotNull('sc.'.$scoretype)->countQuery()->execute()->fetchField();
			if($caninsert==0) { // Ready to insert
				if(!is_numeric(trim($row[count($row)-1]))) { // The last entry is not numeric
					form_set_error('score', t('The score of student !uid: !score is not valid.', array('!uid'=>$row[0], '!score'=>$row[count($row)-1])));
				}
				if($form_values['scoretype']=='rank') {
					if(floatval(trim($row[count($row)-1])) < 1)
						form_set_error('score', t('The score of student !uid: !score is not valid.', array('!uid'=>$row[0], '!score'=>$row[count($row)-1])));
				}
				else if(floatval(trim($row[count($row)-1])) < 0 || floatval(trim($row[count($row)-1])) > 100)
					form_set_error('score', t('The score of student !uid: !score is not valid.', array('!uid'=>$row[0], '!score'=>$row[count($row)-1])));
			} else { // The score of the student have been imported already.
				form_set_error('score', t('The score of student !uid has been already imported.', array('!uid'=>$row[0])));
			}
		}
	}
}

function score_mark_2nd_round_list() {
	global $user;
	$output='<p>'.t('The following professions are decided by your deparment. You can now select who will be enrolled into second round one by one.').'</p>';
	$output.='<dl>';
	$result=db_query('SELECT * FROM {vl_professions} WHERE uid=:uid AND allow_round1=1', array(':uid'=>$user->name));
	foreach($result as $r) {
		$students=db_query('SELECT COUNT(*) FROM {students} WHERE validated=1 AND profession_major=:pid', array(':pid'=>$r->pid))->fetchField();
		if(!$students) continue;
		if(!score_mark_2nd_round_check(profession_load($r->pid))) continue;
		$output .= '<dt>';
		$output .= l($r->pname,'signup/markround2/'.$r->pid);
		$output .= '</dt><dd>';
		$output .= t('There are !num students in total.', array('!num'=>$students));
		$output .='</dd>';
	}
	$output.='</dl>';
	return $output;
}

function score_mark_2nd_round_list_check() {
	global $user;
	$can_students=db_query('SELECT MAX(p.allow_round1) FROM {students} s INNER JOIN {vl_professions} p ON s.profession_major=p.pid '.
		'WHERE s.validated=1 AND p.uid=:uid GROUP BY p.uid', array(':uid'=>$user->name)
	)->fetchField();

	return (user_access('mark 2nd round students') && $can_students);
}

function score_mark_2nd_round_check($profession) {
	global $user;
	$can_students=db_query('SELECT EXISTS(SELECT * FROM {students} WHERE validated=1 AND profession_major=:pid)',
		array(':pid'=>$profession->pid))->fetchField();
	
	$can_prof=db_query('SELECT EXISTS(SELECT * FROM {vl_professions} WHERE pid=:pid AND uid=:uid AND allow_round1=1)',
		array(':pid'=>$profession->pid, ':uid'=>$user->name))->fetchField();
	
	return ($can_students && $can_prof);
}

function score_mark_2nd_round($form, $form_state, $profession) {
	global $user;
	drupal_set_title(t('Mark round 2 students').' - '.$profession->pname);
	drupal_add_css(drupal_get_path('module', 'going') .'/going.css');

	$form=array();
	
	$header=array(
		'order'=>array('data'=>t('No.')),
		'uid'=>array('data'=>t('Student ID')),
		'name'=>array('data'=>t('Real Name')),
		'gender'=>array('data'=>t('Gender')),
		'keyword'=>array('data'=>t('Sorting keyword')),
	);
	
	$sortorders=_score_mark_2nd_round_determine_best_sortorder($profession);
	$a=array_keys($sortorders);
	$saint_default_sort=isset($form_state['values']['sortorder'])?$form_state['values']['sortorder']:$a[0];
	unset($a);
	$form['sortorder']=array(
		'#id' => 'sortorder',
		'#type' => 'select',
		'#title' => t('Sort Order'),
		'#prefix' => '<p/><div class="container-inline">',
		'#options' => $sortorders,
		'#default_value' => $saint_default_sort,
	);
	$options=array();
	$examplaces=_score_mark_2nd_round_enabled_examplace($profession->pid);
	foreach($examplaces as $examplace) {
		$options[$examplace]=db_select('vl_city_district','cd')
			->condition('cd.cid',$examplace)->fields('cd',array('name_simp'))->execute()->fetchField();
	}
	
	// Test if we have marked enough examplace
	$saint_default_place=isset($form_state['values']['examplace'])?$form_state['values']['examplace']:((count($options)==1&&$examplace!=='110000')?$examplace:'110000');
	if(count($options)==0) $saint_default_place='000000';
	if(count($options)>1 || (count($options)==1&&$examplace!='110000')) {
		$form['examplace'] = array(
			'#type' => 'select',
			'#title' => t('Exam Place'),
			'#options' => $options,
			'#prefix' => '&nbsp;&nbsp;&nbsp;',
			'#default_value' => $saint_default_place,
		);
	}

	$form['redraw']=array(
		'#type' => 'button',
		'#value' => t('Update'),
		'#prefix' => '&nbsp;&nbsp;&nbsp;',
		'#suffix'=> '</div><p/>',
		'#validate' => array(),
		'#submit' => array('score_mark_2nd_round_redraw'),
	);
	
	$num=db_query('SELECT COUNT(*) FROM {students_passthrough} sp INNER JOIN {students} s ON sp.idcard_number=s.idcard_number '.
		'WHERE sp.pid=:pid', array(':pid'=>$profession->pid))->fetchField();
	if($num > 0)
		$form['pass_through']=array(
			'#markup' => '<div class="messages warning">'.t('There are !num extra passed through students also.',array('!num'=>$num)).'</div>',
		);
	
	$query=db_select('students','s')->fields('s',array('uid','name','gender'))->condition('s.profession_major',$profession->pid)->groupBy('s.uid');
	$query->innerJoin('students_going','sg','s.uid=sg.uid');
	$query=$query->isNotNull('sg.gid');

	// Step 1, filter examplace
	if($saint_default_place!='000000')
		$query=$query->condition('s.examplace',$saint_default_place);
	
	// Step 2, filter sortorder
	$exams = $profession->exams;
	switch($saint_default_sort) {
		case 's': // sort by score
			if(in_array($profession->did,array('D5','D6','D7','D8'))) {
				$header['keyword']['data']=t('Rank/Score in 1st round');
				$eids=array_keys($exams);
				sort($eids);
				while(substr($eids[count($eids)-1],0,1)!='1')
					array_pop($eids);
				$eid=db_query('SELECT sg.eid, MAX(g.time) as time FROM {students_going} sg INNER JOIN {vl_going} g ON sg.gid=g.gid '.
					'GROUP BY sg.eid HAVING eid IN (:eids) ORDER BY time DESC', array(':eids'=>$eids))->fetchField();
				$query->innerJoin('students_score','sc','sc.uid=s.uid');
				$query->fields('sc', array('score','rank'))->condition('sc.eid', $eid);
				$query->addExpression('sc.rank*1', 'rank');
				$query->addExpression('sc.score*1', 'score');
				$query->orderBy('rank', 'ASC')->orderBy('score', 'DESC');
			} else {
				$header['keyword']['data']=t('Total score');
				ksort($exams);
				$total_score=array();
				foreach($exams as $eid=>$weight){
					if(substr($eid,0,1)!='1') break; 
					if(floatval($weight) == 0 ) continue;
					$query->innerJoin('students_score','e'.$eid,'e'.$eid.'.uid=s.uid');
					$query=$query->condition('e'.$eid.'.eid', $eid);
					$total_score[]='e'.$eid.'.score*'.$weight;
				}
				$query->addExpression(implode('+',$total_score), 'total_score');
				$query=$query->orderBy('total_score', 'DESC')->orderBy('s.uid');
			}
			break;
		
		case 'o': // sort by gorder
			$header['keyword']['data']=t('Going order');
			krsort($exams);
			foreach($exams as $eid=>$weight){
				if(substr($eid,0,1)!=1) continue;
				$exam=exam_load($eid);
				if($exam->etype==2) break;
			}
			$query=$query->fields('sg',array('gid','gorder'))->condition('sg.eid',$eid)->orderBy('sg.gid')->orderBy('sg.gorder')->orderBy('s.uid');
			break;
		case 'u': // sort by student id
			unset($header['keyword']);
			$query->orderBy('s.uid');
	}
	$results=$query->execute();
	$options=array();
	$i=1;
	foreach($results as $r) {
		$options[$r->uid]=array(
			'order'=>$i++,
			'uid'=>$r->uid,
			'name'=>$r->name,
			'gender'=>$r->gender==1?t('Male'):t('Female'),
		);
		switch($saint_default_sort) {
			case 's':
				if(in_array($profession->did,array('D5','D6','D7','D8')))
					$options[$r->uid]['keyword']=sprintf('%.2f / %.2f', $r->rank, $r->score);
				else
					$options[$r->uid]['keyword']=$r->total_score;
				break;
			case 'o':
				$options[$r->uid]['keyword']=$r->gorder;
				break;
		}
	}
	$form['students']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $options,
			'#attributes' => array('class'=>array('assign_students')),
			'#empty' => t('No suitable students in current condition.'),
			'#after_build' => array('_score_mark_2nd_round_students_force'),
	);
	if(count($options)>0)
		$form['submit']=array(
			'#type' => 'submit',
			'#value' => t('Save'),
			'#prefix' => '<p>',
			'#suffix' => '</p>',
		);
	return $form;
}

function score_mark_2nd_round_redraw($form, &$form_state) {
	$form_state['rebuild']=TRUE;
}

function _score_mark_2nd_round_determine_best_sortorder($profession) {
	$exams = $profession->exams;
	ksort($exams);
	$result=array();
	
	// Step 1, if we can sort by total scores, i.e., at least one exam takes weight in total_score
	foreach($exams as $eid=>$weight){
		if(floatval($weight)>0) break;
	}

	if(in_array($profession->did,array('D5','D6','D7','D8'))) {
		$result['s']=t('By rank in 1st round exam, from best to worst');
	} else
		if(substr($eid,0,1)==1) $result['s'] = t('By total score, from top to bottom');
	
	// Step 2, if we can sort by going order, i.e, at least one exam typed interview
	foreach($exams as $eid=>$weight){
		if(db_select('vl_exam','e')->condition('e.eid',$eid)->fields('e',array('etype'))->execute()->fetchField()==2) break;
	}
	if(substr($eid,0,1)==1) $result['o'] = t('By going order, from first to last');
	
	// Step 3, we always could sort it via student ID
	$result['u'] = t('By Student ID, from small to big');
	
	return $result;
	
}

function _score_mark_2nd_round_students_force($form_element, &$form_values) {
	$query=db_select('students','s')->fields('s',array('uid'))->condition('s.profession_major',arg(2));
	$query->innerJoin('students_passthrough','sp','s.idcard_number=sp.idcard_number');
	$result=$query->execute();
	foreach($result as $r) {
		if(!isset($form_element[$r->uid])) continue;
		$form_element[$r->uid]['#value']=TRUE;
		$form_element[$r->uid]['#checked']=TRUE;
		$form_element[$r->uid]['#attributes']['disabled']=TRUE;
		$form_values['values']['students'][$r->uid]=TRUE;
	}
		return $form_element;
}

/*
 	If examplace set, return TRUE of FALSE if the place should be avaliable.
 	If not set, return array of avaliable examplace.
*/
function _score_mark_2nd_round_enabled_examplace($pid, $examplace=NULL) {
	$query=db_select('students','s')->fields('s',array('examplace'))->condition('s.profession_major',$pid)->groupBy('s.examplace');
	$subquery=db_select('students_passthrough','sp')->where('s.idcard_number=sp.idcard_number')->fields('sp');
	$query->notExists($subquery);
	$query->addExpression('MAX(s.pass_round1_major)','num');
	$output=array();
	$result=$query->execute();
	foreach($result as $r) {
		if($r->num==0)
			$output[]=$r->examplace;
	}
	if(isset($examplace) && !is_null($examplace)) {
		return in_array($examplace, $output);
	} else
		return $output;
}

function score_mark_2nd_round_validate($form, &$form_state) {
	$form_values = array_filter($form_state['values']['students']);
	if (count($form_values) == 0) {
		form_set_error('students', t('No students selected.'));
	}
}

function score_mark_2nd_round_submit($form, &$form_state) {
	global $user;
	$form_values = array_keys(array_filter($form_state['values']['students']));
	$prof=db_select('vl_professions','p')->condition('p.pid',arg(2))->fields('p',array('pname'))->execute()->fetchField();
	foreach($form_values as $student) {
		db_update('students')->fields(array(
				'pass_round1_major'=>1
		))->condition('uid',$student)
		->execute();
		if(module_exists('onlinecharge')) {
			for($i=2;$i<=3;$i++) {
				$query=db_select('orders','o')->fields('o');
				$query->innerJoin('users','u','o.uid=u.uid');
				$query->condition('u.name',$student);
				$query->innerJoin('vl_charging_standard','sc','sc.scid=o.standard');
				$query->condition('sc.period',$i);
				$subquery=db_select('students_going','sg')->where('sg.uid=u.name')->condition('sg.eid','200','>')->fields('sg');
				$query->exists($subquery);
				if($query->countQuery()->execute()->fetchField()==0) {
					$uid=db_select('users','u')->condition('u.name',$student)->fields('u',array('uid'))->execute()->fetchField();
					$localuser=user_load($uid);
					$fee=db_select('vl_charging_standard','sc')->condition('sc.period',$i)->condition('sc.ucategory',$localuser->ucategory)->fields('sc')->execute()->fetchObject();
					if($fee->fee<=0) continue;
					db_insert('orders')->fields(array(
						'uid' => $localuser->uid,
						'orderno' => onlinecharge_generate_random_orderno(),
						'ordertime' => time(),
						'standard' => $fee->scid,
						'ordertitle' => $fee->title,
						'amount' => $fee->fee,
						'gateway' => NULL,
						'gatewaytransactionno' => NULL,
						'status' => 0,
					))->execute();
				}
			}
		}
	}
	
	drupal_set_message(
		t('!num !prof students have been enrolled into the 2nd round examiniation.', array(
			'!num'=>count($form_values), '!prof'=>$prof)));
	watchdog('score',
		'!num !prof students have been enrolled into the 2nd round examiniation.', array(
			'!num'=>count($form_values),
			'!prof'=>$prof),
		WATCHDOG_INFO);

	if(count(_score_mark_2nd_round_enabled_examplace(arg(2)))==0) {
		db_update('vl_professions')->fields(array(
				'allow_round1'=>0
		))->condition('pid',arg(2))
		->execute();
		$form_state['redirect']='signup/2ndround/profession/'.arg(2);
	} else 
		$form_state['redirect']='signup/markround2';
}

function score_transfer_list_check() {
	if(!empty($GLOBALS['menu_admin'])) return TRUE;
	$r=db_query('SELECT EXISTS(SELECT * FROM {students_going} sg INNER JOIN {vl_exam} e ON sg.eid=e.eid WHERE sg.gid IS NOT NULL AND e.uid=:uid)', array(':uid'=>$GLOBALS['user']->name))->fetchField();
	if($r==0) return FALSE;
	$r=db_query('SELECT MAX(pid_count) AS num FROM (SELECT count(pid) AS pid_count FROM {vl_professions} p WHERE p.uid=:uid GROUP BY p.exams) t', array(':uid'=>$GLOBALS['user']->name))->fetchField();
	return ($r>1) && user_access('mark 2nd round students') || ($GLOBALS['user']->uid==1);
}

function score_transfer_list() {
	global $user;
	$output='<dl>';
	$query=db_select('vl_going','g')->fields('g')->orderBy('g.time')->groupBy('g.gid');
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$query->fields('r',array('rname'));
	$query->innerJoin('students_going','sg','sg.gid=g.gid');
	$query->innerJoin('vl_exam','e','e.eid=sg.eid');
	$query->condition('e.uid',$user->name);
	
	$result=$query->execute();
	foreach($result as $r) {
		$output.='<dt>';
		$output.=l($r->gname, "signup/transfer/$r->gid");
		$output.='</dt>';
		$output.=sprintf('<dd>%s / %s </dd>', $r->rname, _going_datetime_to_string($r->time));
	}
	$output.='</dl>';
	return $output;
}

function score_transfer_check($going) {
	global $user;
	if(!empty($GLOBALS['menu_admin'])) return TRUE;
	if(user_is_anonymous()) return FALSE;
	$query=db_select('vl_going','g')->condition('g.gid',$going->gid);
	$query->innerJoin('students_going','sg','sg.gid=g.gid');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	$query->groupBy('e.uid');
	$query->fields('e',array('uid'));
	if($query->countQuery()->execute()->fetchField()!=1 || $query->execute()->fetchField()!=$user->name)
		return FALSE;
	else
		return TRUE;
}

function score_transfer($form, $form_state, $going) {
	$gid=$going->gid;
	global $user;
	drupal_set_title(t('Transfer students').' - '.$going->gname);
	$form=array();

	$header=array(
		'gorder'=>array('data'=>t('No.'),'field'=>'sg.gorder'),
		'uid'=>array('data'=>t('Student ID'), 'field'=>'s.uid'),
		'name'=>array('data'=>t('Real Name')),
		'gender'=>array('data'=>t('Gender'), 'field'=>'s.gender'),
		'pname'=>array('data'=>t('Current Profession'), 'field'=>'p.pid'),
	);

	$query=db_select('vl_going','g')->condition('g.gid',$going->gid)->fields('g');
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$query->fields('r',array('rname'));
	$g_info=$query->execute()->fetchObject();

	$query->innerJoin('students_going','sg','sg.gid=g.gid');
	$query->innerJoin('vl_exam','e','e.eid=sg.eid');
	$query->fields('e',array('eid'))->groupBy('e.eid');
	$query->addExpression("CONCAT_WS('',e.ename,e.elevel)",'ename');
	$exams=$query->execute()->fetchAll();
	foreach($exams as $r) {
		$header['e'.$r->eid]=array('data'=>$r->ename, 'field'=>'e'.$r->eid, 'sort'=>'desc');
	}

	$squery=db_select('students_going','sg')->condition('sg.gid',$gid);
	$squery->innerJoin('students','s','s.uid=sg.uid');
	$squery->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$squery->fields('s',array('uid','name','gender'))->fields('sg',array('gorder'))->fields('p',array('pname'));
	$t=$squery->execute()->rowCount();
	foreach($exams as $r) {
		$query=db_select('students_going','sg')->condition('sg.gid',$gid);
		$query->innerJoin('students','s','s.uid=sg.uid');
		$query->fields('s',array('uid','name','gender'));
		$query->innerJoin('students_score','e'.$r->eid,'e'.$r->eid.'.uid=s.uid');
		$query->condition('e'.$r->eid.'.eid',$r->eid);
		$query->addExpression('e'.$r->eid.'.score','e'.$r->eid);
		if($t!=$query->execute()->rowCount())
			unset($header['e'.$r->eid]);
		else {
			$squery->innerJoin('students_score','e'.$r->eid,'e'.$r->eid.'.uid=s.uid');
			$squery->condition('e'.$r->eid.'.eid',$r->eid);
			$squery->addExpression('CAST(e'.$r->eid.'.score as DECIMAL)','e'.$r->eid);
		}
	}

	$squery->extend('TableSort')->orderByHeader($header);
	$students=$squery->execute()->fetchAll();
	$options=array();
	foreach($students as $r) {
		foreach(array_keys($header) as $item) {
			if(isset($r->$item))
				$options[$r->uid][$item]=$r->$item;
			if($item=='gender')
				$options[$r->uid][$item]=($r->gender==2?t('Female'):t('Male'));
		}

	}

	if(count($header)==5) {
		$header['gorder']['sort']='asc';
	}

	$form['desc']=array(
		'#markup' => '<div class="messages">'.sprintf('%s / %s / %s', $g_info->gname, $g_info->rname, _going_datetime_to_string($g_info->time)).'</div>',
	);

	$form['students']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $options,
			'#attributes' => array('class'=>array('assign_students')),
			'#empty' => t('No students to operate.'),
	);

	$profs=db_select('vl_professions','p')->condition('p.uid',$user->name)->condition('p.enabled',0,'<>')
		->orderBy('p.pid')->fields('p',array('pid','pname'))->execute()->fetchAllKeyed();
	$form['targetprof']=array(
		'#type' => 'select',
		'#title'=>t('The target profession of selected students is'),
		'#options'=>$profs,
		'#attributes' => array('class'=>'inline-element'),
		'#prefix'=>'<p/><div class="container-inline">',
	);

	$form['submit']=array(
		'#type'=>'submit',
		'#value'=>t('Save'),
		'#prefix'=>'&nbsp;&nbsp;&nbsp;',
		'#suffix'=>'</div>',
	);

	return $form;
}

function score_transfer_validate($form, &$form_state) {
	// Check if at least one of the exam has been selected.
	$form_values = array_filter($form_state['values']['students']);
	if(count($form_values)<=0) {
		form_set_error('students', t('No students selected.'));
	}
	foreach($form_values as $uid=>$u) {
		$r=db_select('vl_professions','p')->fields('p',array('pname','extracondition'))->condition('p.pid',$form_state['values']['targetprof'])->execute()->fetchObject();
		if($r->extracondition) {
			$count=db_select('students','s')->fields('s')->where($r->extracondition)->condition('uid',$uid)->countQuery()->execute()->fetchField();
			if($count==0) {
				form_set_error('students', t('!uid student does not comply the citera of !prof profession.', array(
					'!uid'=>$uid,
					'!prof'=>$r->pname,
				)));
				return;
			}
		}
	}
}

function score_transfer_submit($form, &$form_state) {
	$form_values=$form_state['values'];
	$students=$form_values['students'];
	$students=array_filter($students);
	$prof=profession_load($form_values['targetprof']);
	foreach($students as $uid=>$u) {
			$prof_orig=db_query('SELECT profession_major FROM {students} WHERE uid=:uid',array(':uid'=>$uid))->fetchField();
			if($prof_orig!=$form_values['targetprof']) {
				db_update('students')->fields(array(
						'profession_major'=>$form_values['targetprof']
				))->condition('uid',$uid)
				->execute();
			}
			$q=db_query('SELECT EXISTS(SELECT * FROM {students_total_score} WHERE uid=:uid AND pid=:pid)', array(':uid'=>$uid, ':pid'=>$form_values['targetprof']))->fetchField();
			if(!$q)
				db_update('students_total_score')->fields(array('pid'=>$form_values['targetprof']))->condition('pid',$prof_orig)->condition('uid',$uid)->execute();
	}
	drupal_set_message(t('!num students have been transfered into !prof_new profession.', array('!num'=>count($students), '!prof_new'=>$prof->pname)));
	watchdog('score',
		'!num students have been transfered into !prof_new profession.', array(
			'!num'=>count($students),
			'!prof_new'=>$prof->pname
	));
	$form_state['redirect']='signup/transfer';
}

function score_view_admin() {
	$form=array();
	
	// Fetch all exams at first
	$query=db_select('vl_exam','e')->fields('e',array('eid'));
	$query->addExpression("CONCAT_WS('', e.ename, e.elevel)", 'exam');
	$query->innerJoin('vl_research_sec','r','e.uid=r.uid');
	$query->fields('r',array('uid','rname'));
	$rdbo=$query->execute();
	$exams=array();
	$weight=array();
	$st=array();
	$rows=array();
	foreach($rdbo as $r) {
		$exams[]=$r;
	}
	
	$rdbo=db_select('vl_professions','p')->fields('p',array('exams'))->execute();
	foreach($rdbo as $r) {
		$t=unserialize($r->exams);
		foreach($t as $eid=>$w)
			$weight[$eid]=array_key_exists($eid, $weight)?$weight[$eid]+$w:$w;
	}
	
	$header=array(
		array('data'=>t('Examination')),
		array('data'=>t('Status')),
	);
	
	$form['score_admin']=array(
		'#type' => 'vertical_tabs',
	);
	foreach($exams as $exam) {
		//if(empty($weight[$exam->eid])) continue;
		
		if(db_query('SELECT EXISTS(SELECT * FROM {students_going} WHERE eid=:eid AND gid IS NOT NULL)', array(':eid'=>$exam->eid))->fetchField()==0)
			continue;
		
		$query=db_select('students_score','c')->condition('c.eid', $exam->eid);
		$num=$query->fields('c')->countQuery()->execute()->fetchField();
		$query=db_select('students_score','c')->condition('c.eid', $exam->eid)->where('CAST(c.score AS DECIMAL)>0');
		$query->addExpression('AVG(c.score)');
		$st[$exam->eid]=$query->execute()->fetchField();
		if(!isset($st[$exam->uid])) $st[$exam->uid]=1;
		$st[$exam->uid]*=$st[$exam->eid];
		$rows[$exam->uid][]=array(
			$num?l($exam->exam, 'score/view/'.$exam->eid):$exam->exam,
			$st[$exam->eid]?t('The average score of this exam is !num',array('!num'=>sprintf('%.2f',$st[$exam->eid]))):t('Not Uploaded yet'),
		);
		unset($form[$exam->uid][$exam->eid]);
		$output[$exam->uid]=theme('table', array('header'=>$header, 'rows'=>$rows[$exam->uid]));
		if(!isset($form[$exam->uid]) && count($rows[$exam->uid])) {
			$form[$exam->uid]=array(
				'#type'=>'fieldset',
				'#title'=>$exam->rname,
				'#collapsible'=>TRUE,
				'#group'=>'score_admin',
			);
		}
		$form[$exam->uid][$exam->uid]=array('#markup'=>$output[$exam->uid]);
	}
	
	foreach(array_keys($rows) as $key) {
		$output[$key]=theme('table', array('header'=>$header, 'rows'=>$rows[$key]));
		$form[$key][$key]=array('#markup'=>$output[$key]);
		if(count($rows[$key])==0) unset($form[$key]);
	}
	

	$rdbo=db_select('vl_research_sec','r')->fields('r')->execute();
	foreach($rdbo as $r) {
		if(array_key_exists($r->uid, $st)|| empty($st[$r->uid]))
			$form[$r->uid]['#collapsed'] = TRUE;
		else $form[$r->uid]['#collapsed'] = FALSE;
	}
	
	return $form;
}

function score_view_detail($exam) {
	drupal_set_title(t('View Scores').' - '.$exam->enamefull);
	$has_details=db_query('SELECT EXISTS(SELECT * FROM {students_score_temp} st INNER JOIN {students_going} sg ON st.uid=sg.uid AND st.eid=sg.eid '.
		'WHERE st.eid=:eid)', array(':eid'=>$exam->eid))->fetchField();
	if($has_details) {
		$output = drupal_render(drupal_get_form('score_automize_page_step_calculate', $exam->eid));
		return $output;
	}
	$header = array(
		array('data'=>t('No.')),
		array('data' =>t('Student ID'), 'field'=>'s.uid'),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Profession'), 'field'=>'s.profession_major'),
		array('data' =>t('Score'), 'field'=>'score_real', 'sort'=>'desc'),
	array('data' =>t('Rank'), 'field'=>'rank', 'sort'=>'asc'),
	);

	$should_show_rank=db_query('SELECT EXISTS(SELECT * FROM {students_score} WHERE eid=:eid AND rank<>1 AND rank IS NOT NULL ORDER BY rank DESC)',
		array(':eid'=>$exam->eid))->fetchField();

	if(!$should_show_rank) {
		 unset($header[count($header)-1]);
	} else {
		 unset($header[count($header)-2]['sort']);
	}

	$query=db_select('students','s');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('students_score','c','s.uid=c.uid');
	$query->condition('c.eid',$exam->eid)->fields('s',array('uid','name','gender'))->fields('p',array('pname'));
	$query->addExpression('c.score*1.0','score_real');
	$query->addExpression('u.uid','uuid');
	$query->addExpression('ifnull(c.rank,9999)*1','rank');
	$query->extend('TableSort')->orderByHeader($header)->orderBy('score_real','desc');
	
	$rdbo=$query->execute();
	$i=1;
	foreach($rdbo as $r) {
		$rows[] = array(
			$i++,
			'<nobr>'.l($r->uid, 'user/'.$r->uuid).'</nobr>',
			'<nobr>'.$r->name.'</nobr>',
			$r->gender == 1 ? t('Male'): t('Female'),
			$r->pname,
			($r->score_real===NULL)?'':sprintf("%.2f", $r->score_real),
		);
		if($should_show_rank) $r->rank==9999?'':$rows[count($rows)-1][]=$r->rank;
	}

	return theme('table', array('header'=>$header, 'rows'=>$rows));
}

function score_prepare_3rd_overview() {
	$header=array(
		array('data'=>t('Profession'), 'field'=>'p.pid', 'sort'=>'asc'),
		array('data'=>t('People (%)'), 'field'=>'num'),
	);
	
	$total_students=db_select('students','s')->fields('s')->condition('s.pass_round1_major',1)->countQuery()->execute()->fetchField();
	$query=db_select('students','s')->condition('s.pass_round1_major',1);
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->fields('p',array('pid','pname'))->groupBy('p.pid')->extend('TableSort')->orderByHeader($header);
	$query->addExpression('count(*)','num');
	$rdbo=$query->execute();
	$rows=array();
	foreach($rdbo as $r)
		$rows[]=array(
			l($r->pname, 'score/prepare3rd/'.$r->pid),
			sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
		);
	
	$output = t('There are currently !num students marked as being enrolled into the 2nd round examination.', array('!num'=>$total_students));
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	return $output;
}

function score_prepare_3rd_detail($profession) {
	watchdog('score',
		'Viewed the 3rd round result of !prof.', array(
			'!user'=>format_username($GLOBALS['user']),
			'!prof'=>$profession->pname),
		WATCHDOG_DEBUG);
	drupal_add_css(
		'div#sidebar-left { display: none; } '.
		'.one-sidebar div#content { width: 95%; } ',
		array('type' => 'inline')
	);
	$profession_exams = $profession->exams;
	drupal_set_title(t('Prepare for the 3rd round students').' - '.$profession->pname);
	$output = '<div class=\'messages\'>';
	$output .= '<p>'.t('The enrollment plan of the profession is !num.',array('!num'=>$profession->plan));
	$tmp = $profession->memo;
	if (!is_null($tmp) && strlen($tmp) != 0)
		$output .= $tmp;
	$output .= '</p>';
	$output .= '<p>'.t('The formula used to generate the result is:').'</p><blockquote>';
	ksort($profession_exams);
	$edata='';
	foreach($profession_exams as $eid => $eweight){
		$exam = exam_load($eid);
		if ($eweight)
			$edata .= $exam->enamefull.'&times;'.round($eweight*100,1).'%+';
	}
	$output .= substr($edata, 0, strlen($edata)-1);
	$output .= '</blockquote></div>';

	
	$header=array(
		array('data'=>t('No.')),
		array('data'=>t('Student ID'), 'field'=>'s.uid'),
		array('data'=>t('Real Name')),
		array('data'=>' '),
		array('data'=>t('Gender')),
	);
	
	foreach($profession_exams as $eid => $eweight) {
		if($eweight!=0||substr($eid,0,1)=='3') {
			$exam=exam_load($eid);
			$header[]=array('data'=>$exam->enamefull);
			if(in_array($eid, array(321,322,323,324))) {
				$header[count($header)-1]['data'].='<br/>(';
				$exam=exam_load(str_replace('32','30',$eid));
				$header[count($header)-1]['data'].=$exam->enamefull;
				$header[count($header)-1]['data'].='/';
				$exam=exam_load(str_replace('32','31',$eid));
				$header[count($header)-1]['data'].=$exam->enamefull;
				$header[count($header)-1]['data'].=')';
			}
		}
	}
		
	if(in_array($profession->did,array('D5','D6','D7','D8'))) {
		if(in_array($profession->did,array('D5','D6','D7','D8')))
			$header[]=array('data'=>t('Total score'));
		$header[]=array('data'=>t('Total average rank'), 'field'=>'totsort', 'sort'=>'desc');
	} else {
		$header[]=array('data'=>t('Total score'), 'field'=>'total_score', 'sort'=>'desc');
	}
	$header[]=array('data' =>t('Personnel record'), 'field'=>'sc.personnel_record_at');

	$rows=array();
	
	$query=db_select('students','s')->fields('s',array('uid','idcard_number','ucategory','name','gender','profession_major'));
	// FIXME: HACK FOR CELLA
	if(in_array($profession->pid, array('D603', 'D604', 'D716','D717'))) {
		$query->condition('s.pass_round1_major',1);
		$squery=db_select('students_total_score','sts')->fields('sts',array('total_score'))->condition('sts.pid',$profession->pid)->where('sts.uid=s.uid');
		$query->exists($squery);
	} else {
		$query->condition('s.profession_major',$profession->pid)->condition('s.pass_round1_major',1);
	}
	// FIXME: HACK FOR CELLA
	$query->innerJoin('students_contact','sc','s.uid=sc.uid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->fields('sc',array('personnel_record_at'));
	$query->addExpression('u.uid','uuid');
	
	$totals=array();
	$totals_r=array();
	foreach($profession_exams as $eid=>$weight) {
		if(substr($eid,0,1)=='3') {
			$neid='e'.$eid;
			$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
			$query->addExpression("$neid.score",$neid);

			if($eid<>'350') {
				$neid='e'.str_replace('32','30',$eid);
				$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=".str_replace('32','30',$eid));
				$query->addExpression("$neid.score",$neid);

				$neid='e'.str_replace('32','31',$eid);
				$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=".str_replace('32','31',$eid));
				$query->addExpression("$neid.score",$neid);
			}
		}
		if($weight!=0 && substr($eid,0,1)!='3') {
			$neid='e'.$eid;
			$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
			$query->addExpression("$neid.score",$neid);

			if(!in_array($profession->did,array('D5','D6','D7','D8'))) continue;
			$neid='r'.$eid;
			$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
			$query->addExpression("$neid.rank",$neid);
		}
	}
	$query->leftJoin('students_total_score','ts','s.uid=ts.uid');
	$query->condition('ts.pid',$profession->pid);
	$query->addExpression('ts.total_score','total_score');
	if(in_array($profession->did,array('D5','D6','D7','D8')))
	{
		$query->addExpression('ts.total_rank','total_rank');
		$query->addExpression('ts.rank','tsrank');
		$query->addExpression('(100000-ts.total_rank)*100000+ts.total_score','totsort');
	}
	
	$query->extend('TableSort')->orderByHeader($header)->orderBy('s.uid');
	$rdbo=$query->execute();
	$i=1;
	while($r=$rdbo->fetchAssoc()) {
		// FIXME: HACKAGE FOR CELLA
		if(in_array($profession->pid, array('D603', 'D604', 'D716','D717'))) {
			if($r['total_score']==0) continue;
		}
		// FIXME: HACKAGE FOR CELLA
		$rows[]=array(
			(isset($r['tsrank'])&&$r['tsrank']!=999)?$r['tsrank']:$i,
			l($r['uid'], 'user/'.$r['uuid']),
			$r['name'],
			'',
			$r['gender'] == 1 ? t('Male'): t('Female')
		);
		$i++;
		foreach($profession_exams as $eid=>$weight) {
			if($weight!=0||substr($eid,0,1)=='3') {
				if(in_array($profession->did,array('D5','D6','D7','D8')) && substr($eid,0,1)!='3')
					$rows[count($rows)-1][]=($r['r'.$eid]==999||is_null($r['r'.$eid]))?'0':number_format($r['r'.$eid], 2, '.' ,'');
				else
					$rows[count($rows)-1][]=($eid=='350')?$r['e'.$eid]:(($r['e'.$eid]==NULL)?('0.00'):(number_format($r['e'.$eid], 2, '.', '')));
				if(in_array($eid, array(321,322,323,324)) && $r['e'.$eid]) {
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].='(';
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].=number_format($r['e'.str_replace('32','30',$eid)],1);
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].='/';
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].=number_format($r['e'.str_replace('32','31',$eid)],2);
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].=')';
				}
			}
		}
		if(in_array($profession->did,array('D5','D6','D7','D8'))) {
			$rows[count($rows)-1][]=number_format($r['total_score'], 2, '.' ,'');
			$rows[count($rows)-1][]=round($r['total_rank'], 2);
		} else
			$rows[count($rows)-1][]=number_format($r['total_score'], 2, '.' ,'');
		if($r['profession_major']!==$profession->pid)
			$rows[count($rows)-1][]='* '.t('This is a secondary profession student');
		else
			$rows[count($rows)-1][]=$r['ucategory']!='1'?db_select('vl_student_type','st')->condition('st.stid',$r['ucategory'])->fields('st',array('name'))->execute()->fetchField():$r['personnel_record_at'];
		
		$a=db_query('SELECT EXISTS(SELECT * FROM {students_passthrough} WHERE idcard_number=:idcard)', array(':idcard'=>$r['idcard_number']))->fetchField();
		if($a) {
			$rows[count($rows)-1][count($rows[count($rows)-1])-2]=t('PASSTHROUGHED');
		}
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No students to display.')));
	return $output;
}

function score_mark_3rd_round_list_check() {
	$r=db_select('students','s')->condition('pass_round1_major',0,'>')->fields('s')->countQuery()->execute()->fetchField();
	return user_access('mark 3rd round students') && $r;
}

function score_mark_3rd_round_list() {
	$header=array(
		array('data'=>t('Department')),
		array('data'=>t('Profession')),
		array('data'=>t('Mainland students (In/Out)')),
		array('data'=>t('Students out of mainland (In/Out)')),
	);

	$rows=array();
	$query=db_select('vl_professions','p')->fields('p',array('pid','pname','did'))->orderBy('p.pid');
	$query->innerJoin('vl_department','d','p.did=d.did');
	$query->fields('d',array('dname'));
	$subquery=db_select('students','s')->fields('s')->condition('s.pass_round1_major',1)->where('s.profession_major=p.pid');
	$query->exists($subquery);
	$rdbo=$query->execute();
	
	$tot_mainland_in=0;
	$tot_mainland_out=0;
	$tot_outmainland_in=0;
	$tot_outmainland_out=0;
	while($r=$rdbo->fetchObject())
	{
		$did=$r->did;
		$mainland_in=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1)->condition('s.pass_round3_major',10)->fields('s')->countQuery()->execute()->fetchField();
		$mainland_out=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1)->condition('s.pass_round3_major',1)->fields('s')->countQuery()->execute()->fetchField();
		$outmainland_in=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1,'<>')->condition('s.pass_round3_major',10)->fields('s')->countQuery()->execute()->fetchField();
		$outmainland_out=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1,'<>')->condition('s.pass_round3_major',1)->fields('s')->countQuery()->execute()->fetchField();
		$rows[]=array(
			$r->dname,
			l($r->pname, 'signup/markround3/'.$r->pid),
			$mainland_in.' / '.$mainland_out,
			$outmainland_in.' / '.$outmainland_out,
		);
		$tot_mainland_in+=$mainland_in;
		$tot_mainland_out+=$mainland_out;
		$tot_outmainland_in+=$outmainland_in;
		$tot_outmainland_out+=$outmainland_out;
	}
	$output = t('There are !num mainland students marked as being determined enrolled into round3, while !num_2 marked as to be determined.',array(
		'!num'=>db_select('students','s')->fields('s')->condition('s.ucategory',1)->condition('s.pass_round3_major',10)->countQuery()->execute()->fetchField(),
		'!num_2'=>db_select('students','s')->fields('s')->condition('s.ucategory',1)->condition('s.pass_round3_major',1)->countQuery()->execute()->fetchField(),
	));
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));

	return $output;
}

function score_mark_3rd_round_check($profession) {
	global $user;
	$query=db_select('students','s')->condition('pass_round1_major',0,'>')->fields('s');
	if(!empty($profession))
		$query->condition('s.profession_major',$profession->pid);
	$r=$query->countQuery()->execute()->fetchField();
	return user_access('mark 3rd round students') && $r && $user->uid==3 || $user->uid==1;
}

function score_mark_3rd_round($form, $form_state, $profession) {
	drupal_set_title(t('Mark the 3rd round student').' -  '.$profession->pname);
	drupal_add_css(drupal_get_path('module', 'going') .'/going.css');

	$header=array(
		array('data'=>t('No.')),
		array('data'=>t('Student ID'), 'field'=>'s.uid'),
		array('data'=>t('Real Name')),
		array('data'=>t('Gender'), 'field'=>'s.gender'),
		array('data'=>t('Current status'),'field'=>'s.pass_round3_major'),
	);
	
	foreach($profession->exams as $eid => $eweight) {
		if($eweight!=0||substr($eid,0,1)=='3') {
			$query=db_select('vl_exam','e')->condition('e.eid',$eid);
			$query->addExpression('CONCAT(ename, IFNULL(elevel, \'\'))','ename');
		}
	}
		
	if(in_array($profession->did,array('D5','D6','D7','D8'))) {
		$header[]=array('data'=>t('Total score'), 'field'=>'rank', 'sort'=>'asc');
	} else {
		$header[]=array('data'=>t('Total score'), 'field'=>'total_score', 'sort'=>'desc');
	}

	$rows=array();
	
	$query=db_select('students','s')->fields('s',array('uid','ucategory','name','gender','pass_round3_major'));
	// FIXME: HACK FOR CELLA
	if(in_array($profession->pid, array('D603','D604','D716','D717'))) {
		$query->condition('s.validated',1)->condition('ts.pid',$profession->pid);
		if(in_array($profession->pid, array('D603','D716'))) {
			$query->where("s.profession_major='D603' OR s.profession_major='D716'");
		} else if(in_array($profession->pid, array('D604','D717'))) {
			$query->where("s.profession_major='D604' OR s.profession_major='D717'");
		}
	} else {
		$query->condition('s.profession_major',$profession->pid)->condition('s.pass_round1_major',1);
	}
	// FIXME: HACK FOR CELLA
	$query->innerJoin('students_contact','sc','s.uid=sc.uid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->fields('sc',array('personnel_record_at'));
	$query->addExpression('u.uid','uuid');
	$query->innerJoin('students_total_score','ts','ts.uid=s.uid');
	$query->fields('ts',array('total_score','rank','outrank'));
	
	$totals=array();
	$query->extend('TableSort')->orderByHeader($header);
	$rdbo=$query->execute();
	$i=1;
	while($r=$rdbo->fetchAssoc()) {
		// FIXME: HACKAGE FOR CELLA
		if(in_array($profession->pid, array('D603','D604','D716','D717'))) {
			if($r['total_score']==0) continue;
		}
		// FIXME: HACKAGE FOR CELLA
		$rows[$r['uid']]=array(
			$i++,
			l($r['uid'], 'user/'.$r['uuid']),
			$r['name'],
			$r['gender'] == 1 ? t('Male'): t('Female'),
			$r['pass_round3_major']?($r['pass_round3_major']==1?t('To be determined').'/'.$r['outrank']:t('Determined')):t('None'),
			in_array($profession->did,array('D5','D6','D7','D8'))?abs($r['rank']):number_format($r['total_score']>100?100:$r['total_score'], 2, '.' ,''),
		);
		
	}
	$form['students']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $rows,
			'#attributes' => array('class'=>array('assign_students')),
			'#empty' => t('No students to operate.'),
	);
	$form['status']=array(
		'#type'=>'select',
		'#title'=>t('Set current status'),
		'#required'=>true,
		'#options'=>array(
			0=>t('None'),
			1=>t('To be determined'),
			10=>t('Determined'),
		),
		'#prefix'=>'<div class="container-inline">',
		'#suffix'=>'</div>',
	);
	$form['submit'] = array('#type'=>'submit', '#value'=>t('Submit'));
	return $form;
}

function score_mark_3rd_round_submit($form, $form_state) {
	$students=array_filter($form_state['values']['students']);
	foreach($students as $uid=>$u) {
		db_update('students')->condition('uid',$uid)->fields(array(
			'pass_round3_major'=>$form_state['values']['status']
		))->execute();
	}
	if($form_state['values']['status']==1) {
		$query=db_select('students','s')->condition('s.pass_round3_major',1);
		$query->innerJoin('students_total_score','ts','s.uid=ts.uid');
		$query->condition('ts.pid',arg(2))->fields('s',array('uid'))->orderBy('ts.rank');
		$students=$query->execute();
		$i=1;
		foreach($students as $student) {
			db_update('students_total_score')->condition('uid',$student->uid)->fields(array(
				'outrank'=>$i++
			))->execute();
		}
	}
}

function score_myscore_check($user=NULL) {
	if(!empty($GLOBALS['menu_admin'])) return TRUE;
	if(!is_null($user)) {
		$r=db_query('SELECT EXISTS(SELECT * FROM {students} WHERE pass_round1_major>0 AND uid=:uid)', array(':uid'=>$user->name))->fetchField();
		return user_access('review all score') && $r;
	}
	if(empty($GLOBALS['user']->uid)) return FALSE;
	$r=db_query('SELECT EXISTS(SELECT * FROM {students} WHERE pass_round1_major>0 AND uid=:uid)', array(':uid'=>$GLOBALS['user']->name))->fetchField();
	return user_access('check students own scores') && $r;
}

function score_myscore_check_roundg($user=NULL) {
	if(is_null($user)) $user=$GLOBALS['user'];
	if(!$user->uid) return false;
	$r=db_query('SELECT EXISTS(SELECT * FROM {students} WHERE uid=:uid AND pass_roundg_major>0)', array(':uid'=>$user->name))->fetchField();
	return user_access('check students roundg scores', $user) && $r;
}

function score_myscore_title_callback($user) {
	$g=db_query('SELECT gender FROM {students} WHERE uid=:uid',array(':uid'=>$user->name))->fetchField();
	if($user->uid==$GLOBALS['user']->uid) return t('My Score');
	if(empty($g)) return t('His/Her Scores');
	if($g==1) return t('His Scores');
	else return t('Her Scores');
}

function score_myscore($user=NULL) {
	if(is_null($user)) $user=$GLOBALS['user'];
	$uid=$user->name;

	$student=db_query('SELECT * FROM {students} WHERE uid=:uid',array(':uid'=>$uid))->fetchObject();
	if(empty($student)) return MENU_NOT_FOUND;
	if(!isset($student->pass_round3_major)) return MENU_NOT_FOUND;

	if($student->ucategory==1 && $student->pass_round3_major>=1) {
		$sid=db_select('students_gk','sg')->fields('sg',array('sid'))->condition('sg.uid',$student->uid)->execute()->fetchField();
		if(empty($sid)) {
			$output = '<p>'.t('You did not fill up your gaokao sid, please <a href="@url">click here</a> to fill it at first.',
				array('@url'=>sprintf('/user/%s/edit/%s?destination=/myscore', $user->uid, signup_user_GAOKAO))).'</p>';
			return $output;
		}
	}

	if(module_exists('onlinecharge') && $user->uid==$GLOBALS['user']->uid) {
		$r=1;
		$q=onlinecharge_payment_status($user);
		if(isset($q[1])) $r=$r&&$q[1];
		if(isset($q[2])) $r=$r&&$q[2];
		if(isset($q[3])) $r=$r&&$q[3];
		if(!$r) {
			$output = '<p>'.t('Please finish your orders to view the score. <a href="@url">Click here</a> to view your unfinished orders.', array('@url'=>url('user/'.$user->uid.'/payment')));
			return $output;
		}
	}


	if(module_exists('simpleoauth')) {
		$result=db_select('simpleoauth','s')->fields('s',array('appid','appname'))->execute();
		foreach($result as $r) {
			if((variable_get('simpleoauth.connect.'.$r->appid.'.'.$uid,0)!==0)) {
				drupal_set_message(t('You have connected with @app, which means the app will access your scores.',array('@app'=>$r->appname)), 'warning');
			}
		}
	}

	$output  = '<p>';
	$output .= t('Dear student @uid @name, ',
		array(
			'@uid' =>$student->uid,
			'@name'=>$student->name,
		)
	);
	$output .= '</p>';
	
	$profession=db_query('SELECT p.plan, p.pname, p.exams, d.dname FROM {vl_professions} p '.
		'INNER JOIN {vl_department} d ON p.did=d.did '.
		'INNER JOIN {students} s ON s.profession_major=p.pid WHERE s.uid=:uid', array(':uid'=>$uid))->fetchObject();
	$output .= '<p>';
	$output .= t('You\'ve selected @dep @prof profession this year. The plan of this profession is @plan.',
		array(
			'@dep' =>$profession->dname,
			'@prof'=>$profession->pname,
			'@plan'=>$profession->plan,
		)
	);
	
	$output .= t('And your scores goes for:').'</p>';
	
	$query=db_select('students','s')->condition('s.uid',$uid);
	$query->innerJoin('students_score','sc','s.uid=sc.uid');
	$query->innerJoin('vl_exam','e','sc.eid=e.eid');
	$query->fields('e')->fields('sc')->orderBy('sc.eid');
	$rdbo=$query->execute();
	
	$is_passedthrough=db_select('students_passthrough','sp')->fields('sp')->condition('sp.idcard_number',$student->idcard_number)->countQuery()->execute()->fetchField();
	
	$exams = unserialize($profession->exams);
	$rows=array();
	foreach($rdbo as $r) {
		if(isset($exams[$r->eid]) && $exams[$r->eid]==0 && substr($r->eid,0,1)!='3') continue;
		if(!$r->rank) {
			$rows[]=array(
				$r->ename.$r->elevel,
				$is_passedthrough?t('Passed through'):t('Numeric Value'),
				$is_passedthrough?t('Passed through'):t('The large the better'),
				$is_passedthrough?t('Passed through'):round($r->score, 2)
			);
		} else {
			$rows[]=array(
				$r->ename.$r->elevel,
				$is_passedthrough?t('Passed through'):t('Mean rank'),
				$is_passedthrough?t('Passed through'):t('The small the better'),
				$is_passedthrough?t('Passed through'):$r->rank
			);
		}
	}
	
	$header=array(
		t('Exam Name'),
		t('Score type'),
		t('Comparing method'),
		t('Result')
	);
	
	$ts=db_query('SELECT * FROM {students_total_score} WHERE uid=:uid AND pid=:pid',
		array(':uid'=>$student->uid, ':pid'=>$student->profession_major))->fetchObject();
	if(empty($ts)) return MENU_NOT_FOUND;

	if($student->profession_major=='D301') {
		$formula='';
		ksort($exams);
		foreach($exams as $eid => $eweight){
			$exam = db_query('SELECT * from {vl_exam} e WHERE e.eid=\''.$eid.'\'')->fetchObject();
			if ($eweight)
				$formula .= $exam->ename.$exam->elevel.'*'.sprintf('%g%%',$eweight*100).'+';
		}
		$formula = substr($formula, 0, strlen($formula)-1);

		$rows[]=array(
			array('data'=>t('Total score'), 'header'=>TRUE, 'colspan'=>3),
			round($ts->total_score,2)
		);
		$rows[]=array(
			array('data'=>t('Total score').'='.$formula, 'colspan'=>4)
		);
	}
	$output .= theme('table',array('rows'=>$rows, 'header'=>$header, 'colspan'=>2));

	$output .= '<p>';
	
	switch($student->pass_round3_major) {
		case 10:
			$output .= '<b>';
			if(($student->profession_major=='D301' || $student->profession_major=='D303') && $student->ucategory==1) {
				if($student->profession_major=='D301') {
					$output .= t('You are marked as qualified student.');
					$max_min_score=db_query('SELECT MAX(total_score) AS max, MIN(total_score) AS min '.
						'FROM {students_total_score} ts INNER JOIN {students} s '.
						'ON ts.uid=s.uid AND ts.pid=s.profession_major '.
						'WHERE s.pass_round3_major>0 AND s.profession_major=:pid AND s.ucategory=1',
						array(':pid'=>$student->profession_major)
					)->fetchObject();
					$output .= t('The maximum score of @num passed students in this profession is @max, and the minimum is @min.',
						array('@max'=>round($max_min_score->max,2), '@min'=>round($max_min_score->min,2),
							'@num'=>db_query('SELECT COUNT(*) FROM {students} WHERE pass_round3_major>0 AND profession_major=:pid',
								array(':pid'=>$student->profession_major))->fetchField()));
					$output .= t('Based on your total score, you are ranking at @rank.', array('@rank'=>$ts->rank));
					$output .= t('Your gaokao score will be standardized to 100, then calculate average value with scores of profession to get an overall score, when considering marking in within this year.',array('@rank'=>$ts->rank));
				}
				else
					$output .= t('You are marked as quanlified students ranking @rank, but your gaokao score will affect your order when considering marking in.',array('@rank'=>$ts->rank));
			}
			else {
				$output .= t('You are marked as planed students.');
			}
			if($student->ucategory==1 ||$student->ucategory==2 )
				$output .= t('Please consider about your willings of gaokao.');
			$output .= '</b>';
			if($student->ucategory==1)
				$output .= '<br/>'.t('Please ask your school to write a recomendation letter, and mail it to students affairs\' office.');
			break;
		case 1:
			$output .= '<b>';
			if($student->profession_major=='D301' || $student->profession_major=='D303')
				$output .= t('You are marked as quanlified students ranking @rank, but your gaokao score will affect your order when considering marking in.',array('@rank'=>$ts->rank));
			else {
				$output .= t('You are marked as qualified student.');
				if($student->profession_major=='D401') {
					$rank=$ts->rank-db_query('SELECT COUNT(*) FROM {students} WHERE pass_round3_major>1 '.
						'AND ucategory<>1 AND profession_major=:prof', array(':prof'=>'D401'))->fetchField();
					$output .= t('Your total score is ranked as @rank.',array('@rank'=>$rank));
				}
				else
					$output .= t('Based on your total scores, ');
				$output .= t('Your order of substitution is @outrank.',array('@outrank'=>$ts->outrank));
			}
			if($student->ucategory==1 ||$student->ucategory==2 )
				$output .= t('Please consider about your willings of gaokao.');
			$output .= '</b>';
			if($student->ucategory==1)
				$output .= '<br/>'.t('Please ask your school to write a recomendation letter, and mail it to students affairs\' office.');
			break;
		case 0:
			$output .= t('You are marked as unqualified students.');
			break;
	}
	
	$output .= '</p>';
	
	return $output;
}

function score_input_gaokao_overview() {
	return drupal_get_form('score_gaokao_province_status_form');
}

function score_gaokao_province_status_form($form, &$form_state) {
	$form=array();
	$query=db_select('vl_province','p');
	$query->innerJoin('students_gk','sg','p.pid=sg.province');
	$query->innerJoin('students','s','sg.uid=s.uid');
	$query->condition('s.pass_round3_major',0,'>')->condition('p.ucategory',array('1','2'),'IN');
	$query->fields('p',array('pid','name','isgkenabled'));
	$query->addExpression('count(*)','num');
	$query->groupBy('p.pid')->orderBy('p.pid');
	$rdbo=$query->execute();
	# if field selection page should be displayed.
	if(isset($form_state['storage']['batchfileobj'])) {
		drupal_set_title(t('Input gaokao scores for the students').' - '.t('Batch upload'));
		$file=$form_state['storage']['batchfileobj'];
		$fname=tempnam(sys_get_temp_dir(),'').'.dbf';
		file_unmanaged_copy($file->uri, $fname);
		$dbfile=dbase_open($fname,0);
		$tmp_fields=dbase_get_header_info($dbfile);
		$fields=array();
		foreach($tmp_fields as $field) {
			$fields[]=strtoupper(mb_convert_encoding($field['name'], 'UTF-8', 'GBK'));
		}
		unset($tmp_fields);
		// Fetch first two record
		$record=array(
			dbase_get_record($dbfile,1),
			dbase_get_record($dbfile,2)
		);
		dbase_close($dbfile);
		file_unmanaged_delete($fname);

		// Forms sample grid.
		$header=array(
			t('Field name'),
			t('Sample value 1'),
			t('Sample value 2')
		);
		$rows=array();
		$i=0;
		foreach($fields as $field) {
			$rows[]=array(
				$field,
				mb_convert_encoding($record[0][$i], 'UTF-8', 'GBK'),
				mb_convert_encoding($record[1][$i++], 'UTF-8', 'GBK')
			);
		}
		$form['instruction']=array(
			'#type' => 'item',
			'#title' => t('Please select relationship between scores and database'),
			'#required' => TRUE,
			'#suffix' => '<div class="inline-element-div">',
		);

		$fieldoptions=array();
		foreach($fields as $field) {
			$fieldoptions[$field]=$field;
		}
		$form['scores_yw']=array(
			'#type' => 'select',
			'#title' => t('Chinese'),
			'#options' => $fieldoptions,
			'#default_value' => in_array('YW', $fields)?'YW':'00',
			'#required' => TRUE,
		);
		$form['scores_sx']=array(
			'#type' => 'select',
			'#title' => t('Math'),
			'#options' => $fieldoptions,
			'#default_value' => in_array('SX', $fields)?'SX':'00',
			'#required' => TRUE,
		);
		$form['scores_wy']=array(
			'#type' => 'select',
			'#title' => t('Foreign language'),
			'#options' => $fieldoptions,
			'#default_value' => in_array('WY', $fields)?'WY':'00',
			'#required' => TRUE,
		);
		$fieldoptions+=array('00'=>t('N/A'));
		$form['idcard_number']=array(
			'#type' => 'select',
			'#title' => t('IDCard number'),
			'#options' => $fieldoptions,
			'#default_value' => in_array('SFZH', $fields)?'SFZH':'00',
			'#required' => TRUE,
		);
		$form['scores_ksh']=array(
			'#type' => 'select',
			'#title' => t('Gaokao SID'),
			'#options' => $fieldoptions,
			'#default_value' => in_array('KSH', $fields)?'KSH':'00',
			'#required' => TRUE,
			'#suffix' => '<br/><br/>',
		);
		$form['scores_zh']=array(
			'#type' => 'select',
			'#title' => t('Synthesis subject'),
			'#options' => $fieldoptions,
			'#default_value' => in_array('ZH', $fields)?'ZH':'00',
			'#required' => TRUE,
			'#prefix' => '<br/><br/>',
		);
		$form['total_score']=array(
			'#type' => 'item',
			'#markup' => t('Total score will be multiplicated with 1.67 (750/450).'),
			'#states' => array(
				'visible' => array(
					':input[name="scores_zh"]' => array('value' =>'00'),
				),
			),
		);
		$form['description']=array(
			'#type' => 'fieldset',
			'#title' => t('Database summary'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
			'#prefix' => '</div>',
		);
		$form['description']['samplegrid']=array(
			'#type' => 'markup',
			'#markup' => theme('table', array('header'=>$header, 'rows'=>$rows)),
		);
		$form['submit']=array(
			'#id' => 'batchuploadproceed',
			'#type' => 'submit',
			'#value' => t('Proceed'),
		);
	} else {
		$form['batchupload']=array(
			'#type'=>'fieldset',
			'#title'=>t('Batch upload scores'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);
		$form['batchupload']['batchfile']=array(
			'#type'=>'file',
			'#title'=>t('Source file'),
			'#size' => 10,
			'#prefix' => '<div class="inline-element-div">',
		);
		$form['batchupload']['upload']=array(
			'#id'=>'batchupload',
			'#name'=>'batchupload',
			'#type'=>'button',
			'#value'=>t('Continue to proceed'),
			'#suffix' => '</div>',
		);
		foreach($rdbo as $r) {
			$form['pid'][$r->pid]=array('#type'=>'hidden','#value'=>$r->pid);
			$form['name'][$r->pid]=array('#markup'=>$r->name);
			$form['num'][$r->pid]=array('#markup'=>$r->num);
			
			$q=db_select('students_gk','sg');
			$q->innerJoin('students','s','sg.uid=s.uid');
			$q->condition('s.pass_round3_major',0,'>')->condition('sg.province',$r->pid);
			$q->addExpression('MIN(sg.validated)');
			
			$form['status-'.$r->pid]=array('#type'=>'checkbox',
				'#default_value'=>$r->isgkenabled,
				'#disabled'=>$q->execute()->fetchField(),
				'#title'=>t('Students can input scores themselves'),
			);
			$form['op'][$r->pid]=$r->isgkenabled?'':array('#markup'=>l(t('Input myself'),'score/inputgk/'.$r->pid));
		}
		
		$form['submit']=array('#type'=>'submit','#value'=>t('Update'));
	}
	return $form;

}

function score_gaokao_province_status_form_validate($form, &$form_state) {
	if($_FILES && isset($_FILES['files']) && isset($_FILES['files']['size']['batchfile'])) {
		$file = file_save_upload('batchfile', array(
			'file_validate_extensions' => array('dbf'))
		);
		if($file) {
			$fname=tempnam(sys_get_temp_dir(),'').'.dbf';
			file_unmanaged_copy($file->uri, $fname);
			$dbfile=dbase_open($fname,0);
			if($dbfile) {
				$form_state['storage']['batchfileobj']=$file;
				dbase_close($dbfile);
			}
			else
				form_set_error('batchfile', t('The file you have uploaded is not a valid dbase file.'));
			file_unmanaged_delete($fname);
		}
		return;
	}
	if($form_state['triggering_element']['#id']=='batchuploadproceed') {
		if($form_state['values']['idcard_number'] =='00' && $form_state['values']['scores_ksh']=='00')
			form_set_error('scores_ksh',t('IDCard number and Student Gaokao SID cannot be both N/A.'));
	}
}

function score_gaokao_province_status_form_submit($form, &$form_state) {
	if($form_state['triggering_element']['#id']=='batchuploadproceed') {
		$file=$form_state['storage']['batchfileobj'];
		$fname=tempnam(sys_get_temp_dir(),'').'.dbf';
		file_unmanaged_copy($file->uri, $fname);
		$dbfile=dbase_open($fname,0);
		$num_updated=0;
		$scores_idcard_number=mb_convert_encoding($form_state['values']['idcard_number'], 'GBK', 'UTF-8');
		$scores_ksh=mb_convert_encoding($form_state['values']['scores_ksh'], 'GBK', 'UTF-8');
		$scores_yw=mb_convert_encoding($form_state['values']['scores_yw'], 'GBK', 'UTF-8');
		$scores_sx=mb_convert_encoding($form_state['values']['scores_sx'], 'GBK', 'UTF-8');
		$scores_wy=mb_convert_encoding($form_state['values']['scores_wy'], 'GBK', 'UTF-8');
		$scores_zh=mb_convert_encoding($form_state['values']['scores_zh'], 'GBK', 'UTF-8');
		for($i=1;$i<=dbase_numrecords($dbfile);$i++) {
			$record=dbase_get_record_with_names($dbfile, $i);
			$record=array_change_key_case($record, CASE_UPPER);
			$query=db_select('students','s')->fields('s',array('uid'));
			if($scores_idcard_number!='00')
				$query->condition('s.idcard_number',$record[$scores_idcard_number]);
			else {
				$query->innerJoin('students_gk','sg','s.uid=sg.uid');
				$query->condition('sg.sid',$record[$scores_ksh]);
			}
			$student=$query->execute()->fetchField();
			if($student) {
				$update_fields=array('validated'=>1);
				$query=db_update('students_gk')->condition('uid',$student);
				if($scores_ksh!='00')
					$update_fields+=array('sid'=>$record[$scores_ksh]);
				$update_fields+=array('score_chinese'=>floatval($record[$scores_yw]));
				$update_fields+=array('score_math'=>floatval($record[$scores_sx]));
				$update_fields+=array('score_languages'=>floatval($record[$scores_wy]));
				if($form_state['values']['scores_zh']!=='00') {
					$update_fields+=array('score_synthesis'=>floatval($record[$scores_zh]));
					$update_fields+=array('score_total'=>floatval($record[$scores_yw])+floatval($record[$scores_sx])+floatval($record[$scores_wy])+floatval($record[$scores_zh]));
				} else {
						$update_fields+=array(
							'score_total'=>
							(floatval($record[$scores_yw])+floatval($record[$scores_sx])+floatval($record[$scores_wy])+floatval($record[$scores_zh]))*1.67
						);
				}
				$num_updated+=$query->fields($update_fields)->execute();
			}
		}
		dbase_close($dbfile);
		file_unmanaged_delete($fname);
		if($num_updated)
			drupal_set_message(t('Proceeded @count records, @num of them have been updated.', array('@count'=>$i,'@num'=>$num_updated)));
		else
			drupal_set_message(t("Proceeded @count records, none of them has been updated.", array('@count'=>$i)));
	} else {
		$form_values=$form_state['values'];
		$keys=array_keys($form_values);
		$values=array_values($form_values);
		foreach($keys as $key) {
			if(strpos($key, 'status')!==FALSE) {
				$p=substr($key, 7);
				db_update('vl_province')->fields(array(
					'isgkenabled' => $form_values[$key]
				))->condition('pid',$p)->execute();
			}
		}
		drupal_set_message(t('Settings have been saved.'));
	}
}


function theme_score_gaokao_province_status_form($variables) {
	$form=$variables['form'];
	$output = '';
	$rows=array();
	$header=array(
		array('data'=>t('Province')),
		array('data'=>t('Number of students')),
		array('data'=>t('Status')),
		array('data'=>t('Operations')),
	);
	
	if(isset($form['pid']))
		foreach(element_children($form['pid']) as $p) {
			$rows[]=array(
				drupal_render($form['name'][$p]),
				drupal_render($form['num'][$p]),
				drupal_render($form['status-'.$p]),
				drupal_render($form['op'][$p]),
			);
		}

	if(count($rows)) {
		$output.=drupal_render($form['batchupload']);
		$output.=theme('table', array('header'=>$header, 'rows'=>$rows));
	} else {
		$output.=drupal_render($form['instruction']);
		$output.=drupal_render($form['idcard_number']);
		$output.=drupal_render($form['scores_ksh']);
		$output.=drupal_render($form['scores_yw']);
		$output.=drupal_render($form['scores_sx']);
		$output.=drupal_render($form['scores_wy']);
		$output.=drupal_render($form['scores_zh']);
		$output.=drupal_render($form['total_score']);
		$output.=drupal_render($form['description']);
	}
	$output.=drupal_render($form['submit']);
	$output.=drupal_render_children($form);

	return $output;
}

function score_gaokao_province_detail_form($form, $form_state, $province) {
	drupal_set_title(t('Input gaokao scores for the students').' - '.$province->name);
	
	$form=array();
	$query=db_select('vl_province','p')->condition('p.pid',$province->pid);
	$query->innerJoin('students_gk','sg','p.pid=sg.province');
	$query->innerJoin('students','s','sg.uid=s.uid');
	$query->innerJoin('vl_professions','pp','s.profession_major=pp.pid');
	$query->innerJoin('users','u','u.name=s.uid');
	$query->condition('s.pass_round3_major',0,'>')->orderBy('sg.sid')->orderBy('s.name');
	$query->fields('sg')->fields('s',array('name','idcard_number','gender','profession_major'));
	$query->addExpression('u.uid','uuid');
	$query->addExpression('pp.pname','pname');
	$query=$query->extend('PagerDefault')->limit(20);

	$rdbo=$query->execute();
	
	foreach($rdbo as $r) {
		settype($r->score_chinese,'float');
		settype($r->score_languages,'float');
		settype($r->score_math,'float');
		settype($r->score_synthesis,'float');
		settype($r->score_total,'float');
		$form['uid'][$r->uid]=array('#type'=>'hidden','#value'=>$r->uid);
		$form['_sid-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->sid,'#size'=>19,'#maxlength'=>14,'#attributes'=>array('style'=>'padding-left: 2px; padding-right: 2px;'),'#states'=>array('enabled'=>array('input[name="validated-'.$r->uid.'"]' => array('checked' => FALSE))));
		$form['prof'][$r->uid]=array('#markup'=>l($r->pname,'signup/3rdround/profession/'.$r->profession_major,array('attributes'=>array('title'=>t('View 3rd round students of @prof',array('@prof'=>$r->pname))))));
		$form['name'][$r->uid]=array('#markup'=>'<nobr>'.l($r->name,'user/'.$r->uuid,array('attributes'=>array('title'=>$r->idcard_number))).'</nobr>',);
		$form['_sis-'.$r->uid]=array('#type'=>'checkbox','#default_value'=>$r->is_math_subjects,'#states'=>array('enabled'=>array('input[name="validated-'.$r->uid.'"]' => array('checked' => FALSE))));
		$form['_sch-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->score_chinese,'#size'=>7,'#maxlength'=>6,'#states'=>array('enabled'=>array('input[name="validated-'.$r->uid.'"]' => array('checked' => FALSE))));
		$form['_slg-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->score_languages,'#size'=>7,'#maxlength'=>6,'#states'=>array('enabled'=>array('input[name="validated-'.$r->uid.'"]' => array('checked' => FALSE))));
		$form['_smt-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->score_math,'#size'=>7,'#maxlength'=>6,'#states'=>array('enabled'=>array('input[name="validated-'.$r->uid.'"]' => array('checked' => FALSE))));
		$form['_sst-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->score_synthesis,'#size'=>7,'#maxlength'=>6,'#states'=>array('enabled'=>array('input[name="validated-'.$r->uid.'"]' => array('checked' => FALSE))));
		$form['_sto-'.$r->uid]=array('#type'=>'markup', '#markup' => $r->score_total);
		$form['validated-'.$r->uid]=array('#type'=>'checkbox', '#default_value'=>$r->validated);
		$form['memory-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->memory,'#size'=>10,'#maxlength'=>6,'#states'=>array('enabled'=>array('input[name="validated-'.$r->uid.'"]' => array('checked' => FALSE))));
	}

	$form['submit']=array('#type'=>'submit', '#value'=>t('Save, and caculate total score with full marks at:'), '#prefix' => '<div class="inline-element-div">');
	$form['coefficient']=array('#type'=>'textfield','#default_value'=>variable_get('gkfullmark'.$province->pid,750), '#size'=>8, '#suffix' => '</div>');
	$form['pager']=array('#markup'=>theme('pager'));
	
	return $form;
}

function theme_score_gaokao_province_detail_form($variables) {
	drupal_add_css(
		'div#sidebar-left { display: none; } '.
		'.one-sidebar div#content { width: 95%; } '.
		'input:disabled { border: 2px solid transparent; background-color: transparent; color: black; text-shadow: none; } '.
		'input[disabled] { border: 2px solid transparent; background-color: transparent; color: black; text-shadow: none; } '.
		'',
		array('type' => 'inline')
	);
	$form=$variables['form'];
	$output = '';
	$header=array(
		array('data'=>t('Validated')),
		array('data'=>t('Gaokao SID'), 'field'=>'','sort'=>'asc'),
		array('data'=>t('Real Name')),
		array('data'=>t('Profession')),
		array('data'=>t('Is Science subject').'?'),
		array('data'=>t('Chinese')),
		array('data'=>t('Math')),
		array('data'=>t('Foreign language')),
		array('data'=>t('Synthesis subject')),
		array('data'=>t('Overall')),
		array('data'=>t('Memory')),
	);
	
	$query=db_select('students_gk','sg');
	$query->innerJoin('students','s','sg.uid=s.uid');
	$query->addExpression('MIN(sg.validated)');
	$query->condition('s.pass_round3_major',0,'>')->condition('sg.province',arg(2));
	$should_disable_all=$query->execute()->fetchField();
	if(!$should_disable_all) unset($header[9]);

	foreach(element_children($form['uid']) as $u) {
		$rows[]=array(
			drupal_render($form['validated-'.$u]),
			$should_disable_all?$form['_sid-'.$u]['#default_value']:drupal_render($form['_sid-'.$u]),
			drupal_render($form['name'][$u]),
			drupal_render($form['prof'][$u]),
			$should_disable_all?($form['_sis-'.$u]['#default_value']?t('Yes'):t('No')):drupal_render($form['_sis-'.$u]),
			$should_disable_all?$form['_sch-'.$u]['#default_value']:drupal_render($form['_sch-'.$u]),
			$should_disable_all?$form['_smt-'.$u]['#default_value']:drupal_render($form['_smt-'.$u]),
			$should_disable_all?$form['_slg-'.$u]['#default_value']:drupal_render($form['_slg-'.$u]),
			$should_disable_all?$form['_sst-'.$u]['#default_value']:drupal_render($form['_sst-'.$u]),
			drupal_render($form['_sto-'.$u]),
			$should_disable_all?$form['memory-'.$u]['#default_value']:drupal_render($form['memory-'.$u]),
		);
		if($should_disable_all) {
			unset($form['_sid-'.$u]);
			unset($form['_sis-'.$u]);
			unset($form['_sch-'.$u]);
			unset($form['_smt-'.$u]);
			unset($form['_slg-'.$u]);
			unset($form['_sst-'.$u]);
			unset($form['memory-'.$u]);
		} else {
			unset($form['_sto-'.$u]);
			unset($rows[count($rows)-1][9]);
		}
	}

	drupal_add_css(drupal_get_path('module', 'score') .'/score.css');
	$output.=theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No suitable students.')));
	if(!$should_disable_all) {
		$output.=drupal_render($form['submit']).drupal_render($form['coefficient']);
	}
	else {
		unset($form['submit']);
		unset($form['coefficient']);
	}
	
	$output.=drupal_render($form['pager']);
	$output.=drupal_render_children($form);
	drupal_add_js(
		"jQuery(document).ready(function(){".
		"jQuery('form').submit(function() ".
		"{ jQuery('[disabled]').each(function(i) ".
		"{ d_name = jQuery(this).attr('name'); ".
		"d_val = (jQuery(this).attr('type')=='checkbox' && !jQuery(this).is(':checked'))?'0':jQuery(this).val(); jQuery(this).after(".
		"'<input type=\"hidden\" name=\"' + d_name + '\" value=\"' + d_val + '\" />');".
    	"});".
		"return true;});});",
		'inline'
	);
	return $output;

}

function score_gaokao_province_detail_form_validate($form, &$form_state) {
	$form_values=$form_state['values'];
	$keys=array_keys($form_values);
	foreach($keys as $key) {
		switch(substr($key,0,4)) {
			case '_sid': 
				if($form_values[$key] && (db_select('vl_province','p')->fields('p',array('ucategory'))->condition('pid',arg(2))->execute()->fetchField() == 1) &&!preg_match('/'.substr(variable_get('zhaoban_current_year',date('Y')),-2).'\d{12}/', $form_values[$key]))
				{
					form_set_error($key, t('The student gaokao ID you\'ve entered is not valid.'));
				}
				break;
			case '_sch':
			case '_slg':
			case '_smt':
			case '_sst':
				if(!is_numeric($form_values[$key]))
					form_set_error($key, t('The score you\'ve entered is not valid.'));
		}
	}
}

function score_gaokao_province_detail_form_submit($form, &$form_state) {
	$form_values=$_POST;
	$keys=array_keys($form_values);
	foreach($keys as $key) {
		if(!db_query('SELECT EXISTS(SELECT * FROM {students} WHERE uid=:uid)', array(':uid'=>$key))->fetchField()) continue;
		db_update('students_gk')->condition('uid',$key)->fields(array(
			'sid' => $form_values['_sid-'.$key],
			'is_math_subjects' => (isset($form_values['_sis-'.$key]) && $form_values['_sis-'.$key]==='1')?1:0,
			'score_chinese' => $form_values['_sch-'.$key],
			'score_languages' => $form_values['_slg-'.$key],
			'score_math' => $form_values['_smt-'.$key],
			'score_synthesis' => $form_values['_sst-'.$key],
			'score_total' => ($form_values['_sch-'.$key]+$form_values['_slg-'.$key]+$form_values['_smt-'.$key]+$form_values['_sst-'.$key])*750/$form_values['coefficient'],
			'validated' => (isset($form_values['validated-'.$key]) && $form_values['validated-'.$key]==='1')?1:0,
			'memory' => $form_values['memory-'.$key]
		))->execute();
	}
	if($form_values['coefficient']!='750')
		variable_set('gkfullmark'.arg(2), $form_values['coefficient']);
	drupal_set_message(t('Scores have been saved.'));
	$query=db_select('students_gk','sg');
	$query->innerJoin('students','s','sg.uid=s.uid');
	$query->addExpression('MIN(sg.validated)');
	$query->condition('s.pass_round3_major',0,'>')->condition('sg.province',arg(2));
	$count=$query->execute()->fetchField();
	if($count==1)
		$form_state['redirect']='score/inputgk';
}

function score_prepare_gk_overview() {
	$header=array(
		array('data'=>t('Profession'), 'field'=>'p.pid', 'sort'=>'asc'),
		array('data'=>t('People (%)'), 'field'=>'num'),
	);
	
	$total_students=db_select('students','s')->fields('s')->condition('s.pass_round3_major',1,'>=')->countQuery()->execute()->fetchField();
	$query=db_select('students','s')->condition('s.pass_round3_major',1,'>=');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->fields('p',array('pid','pname'))->groupBy('p.pid')->extend('TableSort')->orderByHeader($header);
	$query->addExpression('count(*)','num');
	$rdbo=$query->execute();
	$rows=array();
	foreach($rdbo as $r)
	{
		$rows[]=array(
			l($r->pname, 'score/preparegk/'.$r->pid),
			sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
		);
	}
	
	$output = t('There are currently !num students marked as being enrolled into the 3rd round examination.', array('!num'=>$total_students));
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	return $output;
}

function score_prepare_gk_detail($profession) {
	$profession_exams = $profession->exams;
	drupal_set_title(t('Prepare for the gk round students').' - '.$profession->pname);
	$output .= '<div class=\'messages\'>';
	$output .= t('The enrollment plan of the profession is !num.',array('!num'=>$profession->plan));
	$output .= '</blockquote></div>';

	drupal_add_css(
		'div#sidebar-left { display: none; } '.
		'.one-sidebar div#content { width: 95%; } ',
		array('type' => 'inline')
	);
	
	$header=array(
		array('data'=>t('No.')),
		//array('data'=>t('Student ID')),
		array('data'=>t('Real Name')),
		array('data'=>' '),
		array('data'=>t('Round3 situation')),
		array('data'=>t('Gender')),
	);
	
	if(in_array($profession->did,array('D5','D6','D7','D8'))) {
		$header[]=array('data'=>t('Total average rank'), 'field'=>'tsrank', 'sort'=>'asc');
	} else {
		$header[]=array('data'=>t('Total score'), 'field'=>'total_score', 'sort'=>'desc');
	}
	$header[]=array('data'=>t('Chinese'));
	$header[]=array('data'=>t('Foreign language'));
	$header[]=array('data'=>t('Overall'));
	$header[]=array('data' =>t('Personnel record'));
	$header[]=array('data' =>t('Memory'));

	$rows=array();
	
	$query=db_select('students','s')->fields('s',array('uid','ucategory','name','gender','pass_round3_major'));
	$query->condition('s.profession_major',$profession->pid)->condition('s.pass_round3_major',1,'>=');
	$query->innerJoin('students_contact','sc','s.uid=sc.uid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->fields('sc',array('personnel_record_at'));
	$query->fields('sg',array('score_chinese', 'score_languages', 'score_math', 'score_synthesis', 'score_total','is_math_subjects','memory'));
	$query->addExpression('u.uid','uuid');
	
	$totals=array();
	$query->innerJoin('students_total_score','ts','s.uid=ts.uid AND s.profession_major=ts.pid');
	$query->fields('ts',array('total_score','total_rank','outrank'));
	$query->orderBy('sg.memory','ASC')->orderBy('s.pass_round3_major','DESC')->orderBy('ts.outrank');
	if(in_array($profession->did,array('D5','D6','D7','D8'))) {
		$query->orderBy('total_rank','ASC');
	} else {
		$query->orderBy('total_score','DESC');
	}
	$query->orderBy('ts.outrank');

	$rdbo=$query->execute();
	$i=1;
	if($rdbo->rowCount()==0) return MENU_NOT_FOUND;
	while($r=$rdbo->fetchAssoc()) {
		settype($r['score_chinese'],'float');
		settype($r['score_languages'],'float');
		settype($r['score_total'],'float');
		$rows[]=array(
			$i++,
			//l($r['uid'],'user/'.$r['uuid']),
			$r['name'],
			'',
			$r['pass_round3_major'] == '10' ? t('Determined'):(t('To be determined').'/'.$r['outrank']),
			$r['gender'] == 1 ? t('Male'): t('Female'),
			in_array($profession->did,array('D5','D6','D7','D8'))?round($r['total_rank'],2):number_format($r['total_score']>100?100:$r['total_score'], 2, '.' ,''),
			($r['ucategory']!='1'&&$r['ucategory']!='2')?t('N/A'):$r['score_chinese'],
			($r['ucategory']!='1'&&$r['ucategory']!='2')?t('N/A'):$r['score_languages'],
			($r['ucategory']!='1'&&$r['ucategory']!='2')?t('N/A'):$r['score_total'],
			$r['ucategory']!='1'?db_select('vl_student_type','st')->condition('st.stid',$r['ucategory'])->fields('st',array('name'))->execute()->fetchField():$r['personnel_record_at'],
			$r['is_math_subjects']?(t('Science').($r['memory']?', '.$r['memory']:'')):$r['memory'],
		);
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	return $output;
}

function score_mark_gaokao_round_list() {
	$header=array(
		array('data'=>t('Department')),
		array('data'=>t('Profession')),
		array('data'=>t('Mainland students')),
		array('data'=>t('Students out of mainland')),
	);

	$rows=array();
	$query=db_select('vl_professions','p')->fields('p',array('pid','pname','did', 'pnamememo'))->orderBy('p.pid');
	$query->innerJoin('vl_department','d','p.did=d.did');
	$query->fields('d',array('dname'));
	$subquery=db_select('students','s')->fields('s')->condition('s.pass_round3_major',0,'<>')->where('s.profession_major=p.pid');
	$query->exists($subquery);
	$rdbo=$query->execute();
	
	$tot_mainland_in=0;
	$tot_outmainland_in=0;
	foreach($rdbo as $r) {
		$did=$r->did;
		$mainland_in=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1)->condition('s.pass_roundg_major',1)->fields('s')->countQuery()->execute()->fetchField();
		$outmainland_in=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1,'<>')->condition('s.pass_roundg_major',1)->fields('s')->countQuery()->execute()->fetchField();
		$rows[]=array(
			$r->dname,
			l($r->pname.($r->pnamememo?'('.$r->pnamememo.')':''), 'signup/markroundg/'.$r->pid),
			$mainland_in?$mainland_in:'',
			$outmainland_in?$outmainland_in:'',
		);
		$tot_mainland_in+=$mainland_in;
		$tot_outmainland_in+=$outmainland_in;
	}
	$output = t('There are !num mainland students marked as being determined enrolled into roundg.',array(
		'!num'=>db_select('students','s')->fields('s')->condition('s.ucategory',1)->condition('s.pass_roundg_major',1)->countQuery()->execute()->fetchField(),
	));
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));

	return $output;
}

function score_mark_gaokao_update_deliver_orderno($form, $form_state) {
	drupal_set_title(t('Update deliver log'));
	$form=array();
	if(module_exists('kuaidi100')) {
		$total_num=(int)db_query('SELECT count(*) FROM {deliverlog} WHERE module=:module AND type LIKE :type',
			array(':module'=>'score', ':type'=>db_like('gaokao,').'%'))->fetchField();
		$succeeded_num=(int)db_select('deliverlog','dl')->fields('dl')->condition('dl.status',3)->condition('dl.module','score')->condition('dl.type','gaokao,%','LIKE')->countQuery()->execute()->fetchField();
		$onroad_num=(int)db_query('SELECT count(*) FROM {deliverlog} WHERE status=0 OR status=5 AND module=:module AND type LIKE :type',
			array(':module'=>'score', ':type'=>db_like('gaokao,').'%'))->fetchField();
		$form['status']=array(
			'#type' => 'markup',
			'#markup' =>
				t('Currently tracking @total orders, while @succeeded of them have been delivered, @onroad on road.',
					array('@total'=>$total_num, '@succeeded'=>$succeeded_num, '@onroad'=>$onroad_num)
				),
		);
		$db_or=db_or()->condition('dl.status',2)->condition('dl.status',0,'<');
		$query=db_select('deliverlog','dl')->fields('dl')
			->condition('dl.module','score')->condition('dl.type','gaokao,%','LIKE')
			->condition($db_or);
		$query->innerJoin('students_contact','sc','dl.orderno=sc.emscode_roundg');
		$query->innerJoin('students','s','sc.uid=s.uid');
		$query->innerJoin('users','u','u.name=s.uid');
		$query->addExpression('u.uid','uuid');
		$query->fields('s',array('uid','name'));
		$difficults=$query->orderBy('dl.type')->execute();
		if($onroad_num >0 && $onroad_num <= 20) {
			$cond=db_or()->condition('dl.status',0)->condition('dl.status',5);
			$query=db_select('deliverlog','dl')->fields('dl')
				->condition('dl.module','score')->condition('dl.type','gaokao,%','LIKE')
				->condition($cond);
			$query->innerJoin('students_contact','sc','dl.orderno=sc.emscode_roundg');
			$query->innerJoin('students','s','sc.uid=s.uid');
			$query->innerJoin('users','u','u.name=s.uid');
			$query->addExpression('u.uid','uuid');
			$query->fields('s',array('uid','name'));
			$onroads=$query->execute();
			$form['onroad']=array(
				'#type' => 'fieldset',
				'#title' => t('Orders onroad (@num)', array('@num'=>$onroad_num)),
				'#collapsible' => TRUE,
				'#collapsed' => TRUE,
			);
			$rows=array();
			foreach($onroads as $order) {
				$rows[]=array(
					l($order->uid, 'user/'.$order->uuid),
					$order->name,
					sprintf("%s / %s", t($order->com), $order->orderno),
					format_date($order->timestamp),
					$order->statustext,
				);
			}
			$header=array(
				t('Student ID'),
				t('Real Name'),
				t('Deliver order no'),
				t('Date'),
				t('Status Detail')
			);
			$form['onroad']['detail']=array(
				'#type' => 'markup',
				'#markup' => theme('table', array('header'=>$header, 'rows'=>$rows)),
			);
		}
		$db_or=db_or()->condition('dl.status',2)->condition('dl.status',0,'<');
		$query=db_select('deliverlog','dl')->fields('dl')
			->condition('dl.module','score')->condition('dl.type','gaokao,%','LIKE')
			->condition($db_or);
		$query->innerJoin('students_contact','sc','dl.orderno=sc.emscode_roundg');
		$query->innerJoin('students','s','sc.uid=s.uid');
		$query->innerJoin('users','u','u.name=s.uid');
		$query->addExpression('u.uid','uuid');
		$query->fields('s',array('uid','name'));
		$difficults=$query->orderBy('dl.type')->execute();
		if($difficults->rowCount()>0) {
			$form['difficults']=array(
				'#type' => 'fieldset',
				'#title' => t('Orders in problem (@num)', array('@num'=>$difficults->rowCount())),
				'#collapsible' => TRUE,
				'#collapsed' => TRUE,
			);
			$rows=array();
			foreach($difficults as $order) {
				$rows[]=array(
					l($order->uid, 'user/'.$order->uuid),
					$order->name,
					sprintf("%s / %s", t($order->com), $order->orderno),
					kuaidi100_resolve_state_code($order->status),
					$order->statustext,
				);
			}
			$header=array(
				t('Student ID'),
				t('Real Name'),
				t('Deliver order no'),
				t('Status'),
				t('Status Detail')
			);
			$form['difficults']['detail']=array(
				'#type' => 'markup',
				'#markup' => theme('table', array('header'=>$header, 'rows'=>$rows)),
			);
		}
	} else {
		$total_num=db_select('students_contact','sc')->fields('sc')->isNotNull('emscode_roundg')->countQuery()->execute()->fetchField();
		if($total_num==0)
			$form['status']=array(
				'#type' => 'markup',
				'#markup' =>t('Currently not tracking any orders.'),
			);
		else
			$form['status']=array(
				'#type' => 'markup',
				'#markup' =>
					t('Currently tracking @total orders.',
						array('@total'=>$total_num)
					),
			);
	}
	if(isset($form['status'])) {
		$form['status']['#prefix']='<div>';
		$form['status']['#suffix']='</div>';
	}
	$form['massorders']=array(
		'#type' => 'fieldset',
		'#title' => t('Update deliver orders'),
		'#description' => t('If you want to update the deliver orders, please paste them here.'),
	);
	$form['massorders']['com']=array(
		'#type' => 'select',
		'#title' => t('Deliver by'),
		'#required' => TRUE,
		'#options' => array(
			'shunfeng' => t('SF-Express'),
			'ems' => t('EMS'),
		),
		'#default_value' => 'ems',
	);
	$form['massorders']['ordersdetail']=array(
		'#type' => 'textarea',
		'#title' => t('Order details'),
		'#rows' => 20,
		'#required' => TRUE,
		'#description' =>
			t('The details should be in the format of: Student ID &lt;TAB&gt; Order number.').'<br/>'.
			'<span class="messages error"><strong>'.
			t('Please note that existing orders will be overwritten by new value.').
			'</strong></span>',
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Save')
	);
	return $form;
}

function score_mark_gaokao_update_deliver_orderno_validate($form, $form_state) {
	$values=explode("\r\n",$form_state['values']['ordersdetail']);
	$i=0;
	foreach($values as $line) {
		$i++;
		if(empty($line)) continue;
		$orders=explode("\t",$line);
		if(count($orders)<>2)
			form_set_error('ordersdetail',t('The columns of Line @i is @columns, should be 2:<br/>@content', array('@i'=>$i,'@content'=>$line,'@columns'=>count($orders))));
		else {
			$student=db_select('students','s')->condition('s.uid',$orders[0])->condition('s.pass_roundg_major',1)
				->fields('s')->countQuery()->execute()->fetchField();
			if($student<>1)
				form_set_error('ordersdetail',
					t('Could not find suitable student @uid at Line @i.', array('@uid'=>$orders[0], '@i'=>$i))
				);
		}
	}
}

function score_mark_gaokao_update_deliver_orderno_submit($form, $form_state) {
	$com=$form_state['values']['com'];
	$i=0;
	$values=explode("\n",$form_state['values']['ordersdetail']);
	foreach($values as $line) {
		if(empty($line)) continue;
		$orders=explode("\t",$line);
		$t=db_update('students_contact')->condition('uid',$orders[0])->fields(array(
			'emscode_roundg' => trim($orders[1])
		))->execute();
		if($t) $i+=$t;
		if(module_exists('kuaidi100')) {
			if($t)
				kuaidi100_save('score','gaokao,'.$orders[0], $com, trim($orders[1]));
			else
				kuaidi100_update_status($com, trim($orders[1]));
		}
	}
}

function score_mark_gaokao_round($form, $form_state, $profession) {
	drupal_set_title(t('Mark round g students').' -  '.$profession->pname);
	drupal_add_css(drupal_get_path('module', 'going') .'/going.css');

	$header=array(
		array('data'=>t('No.')),
		array('data'=>t('Student ID'), 'field'=>'s.uid'),
		array('data'=>t('Real Name')),
		array('data'=>t('Gender'), 'field'=>'s.gender'),
		array('data'=>t('Current status'),'field'=>'s.pass_round3_major'),
	);
	
	foreach($profession->exams as $eid => $eweight) {
		if($eweight!=0||substr($eid,0,1)=='3') {
			$query=db_select('vl_exam','e')->condition('e.eid',$eid);
			$query->addExpression('CONCAT(ename, IFNULL(elevel, \'\'))','ename');
		}
	}
		
	if(in_array($profession->did,array('D5','D6','D7','D8'))) {
		$header[]=array('data'=>t('Total average rank'), 'field'=>'total_rank', 'sort'=>'asc');
	} else {
		$header[]=array('data'=>t('Total score'), 'field'=>'total_score', 'sort'=>'desc');
	}
	$header[]=array('data'=>t('Overall'), 'field'=>'score_total');

	$rows=array();
	
	$query=db_select('students','s')->fields('s',array('uid','ucategory','name','gender','pass_round3_major','pass_roundg_major'));
	$query->condition('s.profession_major',$profession->pid)->condition('s.pass_round3_major',0,'<>');
	$query->innerJoin('students_contact','sc','s.uid=sc.uid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->fields('sc',array('personnel_record_at'))->fields('sg',array('score_total'));
	$query->addExpression('u.uid','uuid');
	$query->innerJoin('students_total_score','ts','ts.uid=s.uid AND ts.pid=s.profession_major');
	$query->fields('ts',array('total_score','total_rank','rank','outrank'));
	
	$totals=array();
	$query->extend('TableSort')->orderByHeader($header);
	$rdbo=$query->execute();
	$i=1;
	$default_values=array();
	while($r=$rdbo->fetchAssoc()) {
		settype($r['score_total'],'float');
		if($r['pass_roundg_major']) $default_values[$r['uid']]=$r['uid'];
		$rows[$r['uid']]=array(
			$i++,
			l($r['uid'], 'user/'.$r['uuid']),
			$r['name'],
			$r['gender'] == 1 ? t('Male'): t('Female'),
			$r['pass_round3_major']?($r['pass_round3_major']==1?t('To be determined').'/'.$r['outrank']:t('Determined')):t('None'),
			in_array($profession->did,array('D5','D6','D7','D8'))?round($r['total_rank'],2):number_format($r['total_score']>100?100:$r['total_score'], 2, '.' ,''),
			$r['score_total'],
		);
		
	}
	$form['students']=array(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $rows,
		'#attributes' => array('class'=>array('assign_students')),
		'#default_value' => $default_values,
		'#empty' => t('No suitable students.'),
	);
	$form['submit'] = array('#type'=>'submit', '#value'=>t('Submit'));
	return $form;
}

function score_mark_gaokao_round_submit($form, &$form_state) {
	global $user;
	$form_values = array_keys(array_filter($form_state['values']['students']));
	$prof=db_select('vl_professions','p')->condition('p.pid',arg(2))->fields('p',array('pname'))->execute()->fetchField();
	db_update('students')->fields(array(
			'pass_roundg_major'=>0
	))->condition('profession_major',arg(2))->execute();
	foreach($form_values as $student) {
		db_update('students')->fields(array(
				'pass_roundg_major'=>1
		))->condition('uid',$student)
		->execute();
	}
	
	drupal_set_message(
		t('!num !prof students have been enrolled into the gaokao round examiniation.', array(
			'!num'=>count($form_values), '!prof'=>$prof)));
	watchdog('score',
		'!num !prof students have been enrolled into the gaokao round examiniation.', array(
			'!num'=>count($form_values),
			'!prof'=>$prof),
		WATCHDOG_INFO);

	$form_state['redirect']='signup/markroundg';
}

function score_myscore_roundg() {
	global $user;
	$uid=$user->name;
	
	$query=db_select('students','s')->condition('s.uid',$uid)->fields('s', array('uid','name'));
	$query->innerJoin('vl_professions', 'p', 'p.pid=s.profession_major');
	$query->innerJoin('vl_department', 'd', 'p.did = d.did');
	$query->fields('p',array('pname','plan'))->fields('d',array('dname'));
	$query->innerJoin('students_contact','sc','sc.uid=s.uid');
	$query->fields('sc',array('emscode_roundg'));
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->fields('sg',array('sid'));
	
	
	$r=$query->execute()->fetchObject();
	
	$output = '<p>';
	$output .= t('Dear student !uid !name, ',
		array(
			'!uid' =>$r->uid,
			'!name'=>$r->name,
		)
	);
	$output .= '</p>';
	
	$output .= '<p>';
	$output .= t('Welcome to CCOM. You\'ve been qualified !dep !prof profession.',
		array(
			'!dep' =>$r->dname,
			'!prof'=>$r->pname,
		)
	);
	$output .= '</p>';

	$output .='<p>'.t('We\'ve sent out the papaer via EMS, whith its access code as !emscode. You could query the status via Tel 11183 or via <a href="http://www.ems.com.cn">www.ems.com.cn</a>.',
		array(
			'!emscode'=>'<span class="messages error">'.$r->emscode_roundg.'</span>',
		)
	).t('If students gk number is required, then you might want to provide your gk number !scode',
		array('!scode'=>$r->sid)
	).'</p>';
	
	$d=kuaidi100_get_status('score','gaokao,'.$r->uid);
	$output .= '<p><dl><dt>'.t('The latest deliver log of your paper goes:').'</dt><dd>'.
		format_date($d->timestamp).' '.$d->statustext.'</dd></dl>';
	
	return $output;
}

function score_weixin_menu() {
	$menu=array();
	$menu[]=array('title'=>t('My Score'), 'weight'=>2);
	$menu[]=array('title'=>t('My Score'), 'weight'=>21);
	$menu[]=array('title'=>t('My enrollment result'), 'weight'=>22);
	return $menu;
}

function score_weixin($request, $user) {
	$event=key($request->content);
	$eventkey=$request->content[$event];
	$event=strtolower($event);
	if(($request->msgtype=='text' && ($request->content == '查询成绩' || $request->content == '考试结果' || $request->content == '考试成绩')) ||
		($request->msgtype=='click' && $request->eventkey=='weixin_menu_21')) {
		$r=db_select('students','s')->fields('s',array('pass_round1_major'))->condition('uid',$user->name)->execute()->fetchField();
		if(user_access('check students own scores', $user) || !$r) return t('You are not allowed to access the score query feature.');
		$query=db_select('students','s')->condition('s.uid',$user->name);
		$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
		$query->innerJoin('vl_department', 'd', 'p.did = d.did');
		$query->innerJoin('students_total_score','ts','ts.uid=s.uid AND ts.pid=s.profession_major');
		$query->fields('s',array('uid','name','profession_major','pass_round3_major'))->fields('p',array('pname'))->fields('d',array('did','dname'))->fields('ts',array('rank','outrank'));
		$student=$query->execute()->fetchObject();
		$t=t('@uid @name, you have signed up @dep@prof this year.', array(
			'@uid'=>$student->uid, '@name'=>$student->name,
			'@dep'=>$student->dname, '@prof'=>$student->pname)
		);
		switch($student->pass_round3_major) {
			case 10:
				if($student->profession_major=='D301' || $student->profession_major=='DA02')
					$t .= t('You are marked as quanlified students ranking @rank, but your gaokao score will affect your order when considering marking in.',array('@rank'=>$ts->rank));
				else 
					$t .= t('You are marked as planed students.');
				break;
			case 1:
				if($student->profession_major=='D301' || $student->profession_major=='DA02')
					$t .= t('You are marked as quanlified students ranking @rank, but your gaokao score will affect your order when considering marking in.',array('@rank'=>$ts->rank));
				else
					$t .= t('You are marked as unplaned students, and the order of substitution is @outrank.',array('@outrank'=>$ts->outrank));
				break;
			case 0:
				$t .= t('You are marked as unqualified students.');
				break;
		}

		$t.=t('And your score goes:');
		$t.="\n____________________\n";
		$query=db_select('students_score','sc')->condition('sc.uid',$student->uid)->fields('sc',array('score','rank'));
		$query->innerJoin('vl_exam','e','sc.eid=e.eid');
		$query->addExpression("CONCAT_WS('',e.ename,e.elevel)", 'enamefull');
		$query->orderBy('sc.eid');
		$result=$query->execute();
		$e=array();
		foreach($result as $r) {
			$e[]=sprintf("%s: %s%s",$r->enamefull,round(($r->rank)?$r->rank:$r->score,2), ($r->rank)?' *':'');
		}
		$t.=implode("\n",$e);
		if(in_array($student->did,array('D5','D6','D8'))) {
			$t.="\n____________________\n* ";
			$t.=t('It is a mean rank, rather than numeric value.');
		}
	}
	if(($request->msgtype=='text' && $request->content == '录取结果') ||
		($request->msgtype=='click' && $request->eventkey=='weixin_menu_22')) {
		if(!score_myscore_check_roundg($user)) return t('You are not allowed to access the roundg query feature.');
	}
	if(isset($t)) return $t;
}

function score_cron() {
	$query=db_select('watchdog','w')->condition('w.uid',0,'<>')->condition('w.type','score')->orderBy('w.timestamp','DESC')->fields('w',array('timestamp'))->range(0,1);
	$timestamp=$query->execute()->fetchField();
	if($timestamp < time()-3600*24) return;
	// Force recalculate the total_score of all students
	$q=db_select('vl_professions','p')->fields('p',array('pid','exams'));
	$subquery=db_select('students','s')->fields('s')->condition('s.pass_round1_major',1);
	$subquery->where('s.profession_major=p.pid');
	$q->exists($subquery);
	$subquery=db_select('students','s1')->fields('s1')->condition('s1.pass_round3_major',0,'<>');
	$p=db_select('students_passthrough','sp')->where('s1.idcard_number=sp.idcard_number')->fields('sp',array('idcard_number'));
	$subquery->notExists($p);
	$q->notExists($subquery);
	$rdbo=$q->execute();
	// Compose query string
	foreach($rdbo as $r) {
		// Now calculate total_score
		$query=db_select('students','s')->fields('s',array('uid'))->condition('s.pass_round1_major',1);
		if(in_array($r->pid,array('D603','D604','D716','D717'))) {
			$subquery=db_select('students_going','sg')->fields('sg');
			$subquery->where('s.uid=sg.uid');
			$subquery->isNotNull('sg.gid');
			switch($r->pid) {
				case 'D603':
					$subquery->condition('sg.eid','208');
					break;
				case 'D604':
					$subquery->condition('sg.eid','210');
					break;
				case 'D716':
					$subquery->condition('sg.eid','285');
					break;
				case 'D717':
					$subquery->condition('sg.eid','286');
					break;
			}
			$query->exists($subquery);
		} else
			$query->condition('s.profession_major',$r->pid);
		$profession_exams = unserialize($r->exams);
		$totals=array();
		foreach($profession_exams as $eid=>$weight) {
			$neid='e'.$eid;
			if($weight!=0||substr($eid,0,1)=='3') {
				$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
				if($weight||substr($eid,0,1)=='3') $totals[]="$neid.score*$weight";
			}
		}
		$query->addExpression(implode('+', $totals), 'total_score');
		$sdbo=$query->execute();
		foreach($sdbo as $s) {
			db_merge('students_total_score')
				->key(array('uid' => $s->uid, 'pid'=>$r->pid))
				->fields(array(
					'pid' => $r->pid,
					'total_score' => $s->total_score
				))->execute();
		}

		// Now calculate total_rank
		if(in_array(substr($r->pid,0,2),array('D5','D6','D7','D8'))) {
		$query=db_select('students','s')->fields('s',array('uid'))->condition('s.pass_round1_major',1);
		if(in_array($r->pid,array('D603','D604','D716','D717'))) {
			$subquery=db_select('students_going','sg')->fields('sg');
			$subquery->where('s.uid=sg.uid');
			$subquery->isNotNull('sg.gid');
			switch($r->pid) {
				case 'D603':
					$subquery->condition('sg.eid','208');
					break;
				case 'D604':
					$subquery->condition('sg.eid','210');
					break;
				case 'D716':
					$subquery->condition('sg.eid','285');
					break;
				case 'D717':
					$subquery->condition('sg.eid','286');
					break;
			}
			$query->exists($subquery);
		} else $query->condition('s.profession_major',$r->pid);
		$profession_exams = unserialize($r->exams);
		$totals=array();
		foreach($profession_exams as $eid=>$weight) {
			$neid='e'.$eid;
			if($weight!=0||substr($eid,0,1)=='3') {
				$query->leftJoin('students_score', $neid, "s.uid=$neid.uid");
				$query->condition("$neid.eid", $eid);
				if($weight||substr($eid,0,1)=='3') $totals[]="IFNULL($neid.rank,0)*$weight";
			}
		}
		$query->addExpression(implode('+', $totals), 'total_rank');
		$sdbo=$query->execute();
		foreach($sdbo as $s) {
			db_update('students_total_score')->condition('uid',$s->uid)->condition('pid',$r->pid)
				->fields(array(
					'total_rank' => $s->total_rank
				))->execute();
		}
		}

		// Now calulate the actural rank
		$students=db_select('students_total_score','s')->fields('s',array('uid'))->condition('s.pid',$r->pid)->execute();
		foreach($students as $s) {
			if(in_array(substr($r->pid,0,2),array('D5','D6','D7','D8'))) {
				$query=db_select('students_total_score','sc')->condition('sc.pid',$r->pid)->condition('sc.uid',$s->uid);
				$query->addExpression('(100000-sc.total_rank)*100000+sc.total_score','totsort');
				$score=$query->execute()->fetchField();
				$query=db_select('students_total_score','sc')->condition('sc.pid',$r->pid);
				$query->where('(100000-sc.total_rank)*100000+sc.total_score > '.$score);
				$query->innerJoin('students','s','sc.uid=s.uid');
				$query->condition('s.pass_round1_major',1)->condition('s.uid',$s->uid,'<>')->condition('sc.total_score',0,'<>');
				$query->addExpression('count(*)','num');
				db_update('students_total_score')->condition('uid',$s->uid)->condition('pid',$r->pid)->fields(array(
					'rank'=>($score==0)?'999':$query->execute()->fetchField()+1,
				))->execute();
			}
			else {
				$score=db_select('students_total_score','sc')->condition('sc.uid',$s->uid)->fields('sc',array('total_score'))->execute()->fetchField();
				$query=db_select('students_total_score','sc')->condition('sc.total_score',$score*1,'>');
				$query->innerJoin('students','s','sc.uid=s.uid');
				$query->condition('s.profession_major',$r->pid)->condition('s.pass_round1_major',1)->condition('s.uid',$s->uid,'<>')->condition('sc.total_score',0,'<>');
				$query->addExpression('count(*)','num');
				db_update('students_total_score')->condition('uid',$s->uid)->fields(array(
					'rank'=>($score==0)?'999':$query->execute()->fetchField()+1,
				))->execute();
			}
		}
	}
	
	// Force set those passthrough students's score
	$query=db_select('students','s')->fields('s',array('uid','profession_major'))->condition('s.validated',1);
	$query->innerJoin('students_passthrough','sp','s.idcard_number=sp.idcard_number');
	$result = $query->execute();
	foreach ($result as $r) {
		db_delete('students_score')
			->condition('uid',$r->uid)
			->execute();
		db_delete('students_total_score')
			->condition('uid',$r->uid)
			->execute();
		$query=db_select('students_going','sg')->fields('sg',array('uid','eid'))->condition('sg.uid',$r->uid)->orderBy('uid')->orderBy('eid');
		$query->addExpression('100','score');
		$query->addExpression('1','rank');
		db_insert('students_score')
			->from($query)
			->execute();
		db_insert('students_total_score')
			->fields(array(
				'uid' => $r->uid,
				'pid' => $r->profession_major,
				'total_score' => 100,
				'rank' => 1,
				'total_rank' => in_array(substr($r->profession_major,0,2),array('D5','D6','D7','D8'))?1:NULL
			))->execute();
	}

	// Force recalculate the Solfeggio score
	$solfeggios=array('321','322','323','324');
	foreach($solfeggios as $solfeggio) {
		db_delete('students_score')
			->condition('eid',$solfeggio)
			->execute();
		$query=db_select('students_score','t')->condition('t.eid',$solfeggio-20);
		$query->innerJoin('students_score','s','t.uid=s.uid');
		$query->condition('s.eid',$solfeggio-10)->fields('t',array('uid'));
		$query->addExpression($solfeggio,'eid');
		$query->addExpression('t.score*0.5+s.score*0.5','score');
		$query->addExpression('0','rank');
		db_insert('students_score')
			->from($query)
			->execute();
	}
}

function score_automize_page($form, $form_state) {
	global $user;
	if(empty($form)) $form=array();
	$form['#attached']['css']=array(
		'div#scores-automize-page-eid-gid > div {padding: 0px;}' => array('type' => 'inline'),
	);

	if(!empty($form_state['storage']['calculate'])) return score_automize_page_step_calculate($form, $form_state);
	$query=db_query('SELECT * FROM {vl_exam} e WHERE EXISTS(SELECT * FROM {students_going} sg WHERE sg.eid=e.eid AND sg.gid IS NOT NULL) AND e.uid=:uid',
		array(':uid'=>$user->name));
	$options=array();
	foreach($query as $r) {
		$options[$r->eid]=$r->ename.$r->elevel;
	}

	$eid=NULL;
	if(!empty($form_state['storage']['eid'])) $eid=$form_state['storage']['eid'];
	if(!empty($form_state['values']['eid'])) $eid=$form_state['values']['eid'];
	$form['eid']=array(
		'#type' => 'select',
		'#options' => $options,
		'#title' => '',
		'#prefix' => '<div class="inline-element-div">'.t('Select Exam and going'),
		'#default_value' => $eid,
		'#required' => TRUE,
		'#ajax' => array(
			'callback' => '_score_automize_page_eid_gid_select_callback',
			'wrapper' => 'scores-automize-page-eid-gid',
			'progress' => array('message'=>NULL)
		),
	);

	$gid=NULL;
	if(!empty($form_state['storage']['gid'])) $gid=$form_state['storage']['gid'];
	if(!empty($form_state['values']['gid'])) $gid=$form_state['values']['gid'];
	$options=_score_automize_page_eid_gid_select_options($eid);

	$form['gid']=array(
		'#type' => 'select',
		'#options' => _score_automize_page_eid_gid_select_options($eid),
		'#required' => TRUE,
		'#title_display' => 'invisible',
		'#prefix' => '<div id="scores-automize-page-eid-gid">',
		'#default_value' => $gid,
		'#suffix' => '</div>',
	);

	if(count($options)==1) {
		$form['gid']['#default_value']=key($options);
	}

	$form['eidgidgo']=array(
		'#type' => 'submit',
		'#value' => t('Update'),
		'#suffix' => '</div>',
		'#submit' => array('score_automize_page_submit_eidgidgo'),
		'#limit_validation_errors' => array(array('eid'),array('gid')),
	);

	if(!empty($form_state['storage']['assign'])) return score_automize_page_step_reorder($form, $form_state);
	if($gid) {
		$exam=exam_load($eid);
		$is_uid_unknown=$exam->needdraw;
		$is_uid_unknown=$is_uid_unknown&&!(db_query('SELECT EXISTS(SELECT * FROM {students_going} WHERE gid=:gid AND gorder IS NOT NULL)',
			array(':gid'=>$gid))->fetchField());
		if($is_uid_unknown)
			$query=db_query('SELECT DISTINCT t.tid, t.tname FROM {students_score_temp} st INNER JOIN {vl_teachers} t ON st.tid=t.tid '.
				' WHERE st.eid=:eid AND uid LIKE :uid ORDER BY t.tid',
				array(':eid'=>$eid, ':uid'=>db_like(sprintf('%s-%s-',$eid,$gid)).'%'))->fetchAll();
		else
			$query=db_query('SELECT DISTINCT t.tid, t.tname FROM {students_score_temp} st INNER JOIN {vl_teachers} t ON st.tid=t.tid '.
				'INNER JOIN {students_going} sg ON st.uid=sg.uid AND st.eid=sg.eid AND sg.gid=:gid '.
				'WHERE st.eid=:eid AND sg.gid=:gid ORDER BY t.tid',
				array(':eid'=>$eid, ':gid'=>$gid)
			);
		$options=array();
		foreach($query as $r) {
			$options[$r->tid]=$r->tname;
		}
		if(!empty($options)) {
			$form['tid']=array(
				'#type' => 'select',
				'#options' => $options,
				'#prefix' => '<div class="inline-element-div">'.t('Select the score sheet under the name of '),
				'#default_value' => NULL,
				'#required' => TRUE,
				'#suffix' => t(', in order to'),
			);
			$form['tidgo']=array(
				'#type' => 'submit',
				'#value' => t('view or modify'),
				'#suffix' => '</div>',
				'#limit_validation_errors' => array(array('eid'),array('gid'),array('tid')),
				'#submit' => array('score_automize_page_submit_tidgo'),
			);

		}

		$form['addscores']=score_automize_page_modify_score($form_state, $eid, $gid, isset($form_state['values']['tid'])?$form_state['values']['tid']:NULL);

		$exam=exam_load($eid);
		$q=db_query('SELECT count(*) FROM (SELECT tid FROM {students_score_temp} st WHERE st.eid=:eid GROUP BY st.tid) t',
			array(':eid'=>$eid)
		)->fetchField();

		$form['assign']=array(
			'#type' => 'submit',
			'#access' => $is_uid_unknown,
			'#value' => t('Reorder students in current going'),
			'#limit_validation_errors' => array(array('eid'),array('gid')),
			'#submit' => array('score_automize_page_submit_assign'),
		);

		$form['calculate']=array(
			'#type' => 'submit',
			'#access' => $q>=5 && !$is_uid_unknown,
			'#value' => t('Calculate the total score of !ename', array('!ename'=>$exam->enamefull)),
			'#submit' => array('score_automize_page_submit_calculate'),
			'#limit_validation_errors' => array(array('eid')),
		);
	}

	return $form;

}

function _score_automize_page_eid_gid_select_callback($form, $form_state) {
	return $form['gid'];
}

function _score_automize_page_eid_gid_select_options($eid=NULL) {
	if(empty($eid)) return array();
	$query=db_query('SELECT DISTINCT gid FROM {students_going} sg WHERE sg.eid=:eid AND sg.gid IS NOT NULL ORDER BY gid', array(':eid'=>$eid));
	$options=array();
	$exam=exam_load($eid);
	$is_uid_unknown=$exam->needdraw;
	foreach($query as $r) {
		$going=going_load($r->gid);
		$options[$r->gid]=sprintf('%s / %s', $going->formatTime, $going->rname);
		$is_uid_unknown=$is_uid_unknown&&!(db_query('SELECT EXISTS(SELECT * FROM {students_going} WHERE gid=:gid AND gorder IS NOT NULL)',
			array(':gid'=>$r->gid))->fetchField());
		if($is_uid_unknown)
			$q=db_query('SELECT COUNT(*) FROM (SELECT tid FROM {students_score_temp} '.
				'WHERE eid=:eid AND uid LIKE :uid GROUP BY tid) t',
				array(':eid'=>$eid, ':uid'=>db_like(sprintf('%s-%s-',$eid,$r->gid)).'%'))->fetchField();
		else
			$q=db_query('SELECT count(*) FROM ('.
				'SELECT tid FROM {students_score_temp} st INNER JOIN {students_going} sg ON st.uid=sg.uid AND st.eid=sg.eid '.
				'WHERE sg.eid=:eid and sg.gid=:gid GROUP BY st.tid) t',
				array(':eid'=>$eid, ':gid'=>$r->gid)
			)->fetchField();
		if($q)
			$options[$r->gid].=sprintf(' (%s)',t('!num score sheets collected', array('!num'=>$q)));
	}
	return $options;
}

function score_automize_page_submit_eidgidgo($form, &$form_state) {
	$form_state['storage']['eid']=$form_state['values']['eid'];
	$form_state['storage']['gid']=$form_state['values']['gid'];
	unset($form_state['storage']['tid']);
	unset($form_state['values']['tid']);
	unset($form_state['storage']['assign']);
	$form_state['rebuild']=TRUE;
}

function score_automize_page_submit_tidgo($form, &$form_state) {
	$form_state['storage']['eid']=$form_state['values']['eid'];
	$form_state['storage']['gid']=$form_state['values']['gid'];
	$form_state['storage']['tid']=$form_state['values']['tid'];
	$form_state['rebuild']=TRUE;
}

function score_automize_page_modify_score(&$form_state, $eid, $gid, $tid) {
	$should_show_save=db_query('SELECT EXISTS(SELECT * FROM {students} s INNER JOIN {students_score} sc ON s.uid=sc.uid '.
		'WHERE NOT EXISTS(SELECT * FROM {students_passthrough} sp WHERE sp.idcard_number=s.idcard_number) AND sc.eid=:eid)',
		array(':eid'=>$eid)
	)->fetchField();

	$exam=exam_load($eid);
	$is_uid_unknown=$exam->needdraw;
	$is_uid_unknown=$is_uid_unknown&&!(db_query('SELECT EXISTS(SELECT * FROM {students_going} WHERE gid=:gid AND gorder IS NOT NULL)',
		array(':gid'=>$gid))->fetchField());
	if(empty($tid) && $should_show_save) return array();
	$form['addscores']=array(
		'#type' => 'fieldset',
		'#title' => t('Add a new score sheet'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#access' => $gid,
		'#prefix' => '<div id="scores-automize-page-add-scores">',
		'#suffix' => '</div>',
		'#tree' => TRUE,
	);
	if($tid) $form['addscores']['#title']=t('Score sheet under !tname',
		array('!tname'=>db_query('SELECT tname FROM {vl_teachers} WHERE tid=:tid', array(':tid'=>$tid))->fetchField()));

	if($is_uid_unknown&&$tid)
		$query=db_query('SELECT uid, score FROM {students_score_temp} WHERE eid=:eid AND tid=:tid AND uid LIKE :uid',
				array(':eid'=>$eid, ':tid'=>$tid, ':uid'=>db_like(sprintf('%s-%s-',$eid,$gid)).'%'))->fetchAll();
	else if($tid)
		$query=db_query('SELECT sg.gorder, s.uid, s.name, st.score FROM {students} s INNER JOIN {students_going} sg ON s.uid=sg.uid '.
			'INNER JOIN {students_score_temp} st ON sg.uid=st.uid AND sg.eid=st.eid AND st.tid=:tid '.
			'WHERE sg.eid=:eid AND sg.gid=:gid ORDER BY sg.gorder', array(':eid'=>$eid, ':gid'=>$gid, ':tid'=>$tid)
		)->fetchAll();
	else
		$query=db_query('SELECT sg.gorder, s.uid, s.name FROM {students} s INNER JOIN {students_going} sg ON s.uid=sg.uid '.
			'WHERE sg.eid=:eid AND sg.gid=:gid ORDER BY sg.gorder, sg.uid', array(':eid'=>$eid, ':gid'=>$gid)
		)->fetchAll();
	$form_state['storage']['addscores']['students']=array();
	$form['addscores']['tablestart']=array(
		'#markup' => '<table><thead>',
	);
	if($is_uid_unknown)
		$form['addscores']['tablestart']['#markup'].=
			'<th>'.t('No.').'</th>'.
			'<th>'.t('Score').'</th>'.
			'<th>'.t('Absence').'?</th>';
	else
		$form['addscores']['tablestart']['#markup'].=
			'<th>'.t('No.').'</th>'.
			'<th>'.t('Student ID').'</th>'.
			'<th>'.t('Real Name').'</th>'.
			'<th>'.t('Score').'</th>'.
			'<th>'.t('Absence').'?</th>';
	$form['addscores']['tablestart']['#markup'].='</thead><tbody>';
	$trclass='odd';
	$i=1;
	foreach($query as $r) {
		$uid=$r->uid;
		if($is_uid_unknown)
			$uid=sprintf('%s-%s-%03d',$eid,$gid,$i);
		$form_state['storage']['addscores']['students'][]=$uid;
		$form['addscores']['new-score-label'.$uid]=array(
			'#markup' => sprintf('<tr class="%s">', $trclass),
		);
		if($trclass=='odd') $trclass='even';
		else $trclass='odd';
		if($is_uid_unknown) {
			$form['addscores']['new-score-label'.$uid]['#markup'] .= '<td>'.$i++.'</td>';
		}
		else {
			$form['addscores']['new-score-label'.$uid]['#markup'] .= '<td>'.$r->gorder.'</td>';
			$form['addscores']['new-score-label'.$uid]['#markup'] .= '<td>'.$r->uid.'</td>';
			$form['addscores']['new-score-label'.$uid]['#markup'] .= '<td>'.$r->name.'</td>';
		}
		if($tid) {
			$key='new-score-'.$tid.'-'.$uid;
			$abkey='new-score-'.$tid.'-'.$uid.'-absence';
		}
		else {
			$key='new-score-'.$uid;
			$abkey='new-score-'.$uid.'-absence';
		}
		$form['addscores'][$key]=array(
			'#type' => 'textfield',
			'#length' => 10,
			'#size' => 10,
			'#attributes' => array('autocomplete'=>'off'),
			'#title' => $is_uid_unknown?t('The score of No. @uid', array('@uid'=>$i-1)):t('The score of @uid', array('@uid'=>$uid)),
			'#title_display' => 'invisible',
			'#default_value' => (isset($r->score)&&$r->score>0)?$r->score:'',
			'#prefix' => '<td>',
			'#suffix' => '</td>',
			'#states' => array(
				'disabled' => array(
					'input[name="addscores['.$abkey.']"]' => array('checked' =>TRUE),
				),
				'required' => array(
					'input[name="addscores['.$abkey.']"]' => array('checked' =>FALSE),
				)
			),
		);
		$form['addscores'][$abkey]=array(
			'#type' => 'checkbox',
			'#title' => t('Absence'),
			'#prefix' => '<td width="60%">',
			'#suffix' => '</td></tr>',
			'#default_value' => (isset($r->score)&&$r->score==-1)?TRUE:db_query('SELECT EXISTS(SELECT * FROM {students_score_temp} WHERE eid=:eid AND uid=:uid AND score=-1)',
				array(':uid'=>$uid, ':eid'=>$eid))->fetchField(),
		);
	}
	$form['addscores']['new-score-teachername']=array(
		'#type' => 'textfield',
		'#title' => t('Teacher name'),
		'#maxlength' => 10,
		'#size' => 20,
		'#required' => TRUE,
		'#prefix' => '</tbody></table><div class="inline-element-div">',
		'#default_value' => '',
		'#suffix' => '</div>',
	);
	$form['addscores']['new-score-save']=array(
		'#type' => 'submit',
		'#name' => $tid?'new-score-save':'new-score-create',
		'#value' => t('Save'),
		'#access' => !$should_show_save,
		'#submit' => array('score_automize_page_submit_new_score_save'),
		'#validate' => array('score_automize_page_validate_new_score_save'),
		'#limit_validation_errors' => array(array('addscores')),
	);
	if($tid) {
		$form['addscores']['new-score-teachername']['#type'] = 'item';
		$form['addscores']['new-score-teachername']['#markup'] = db_query('SELECT tname FROM {vl_teachers} WHERE tid=:tid', array(':tid'=>$tid))->fetchField();
		$form['addscores']['new-score-save']['#limit_validation_errors']=array(array('addscores'), array('tid'));
	} else
		$form['addscores']['new-score-save']['#limit_validation_errors']=array(array('addscores'));

	drupal_add_js(
			"jQuery(document).ready(function(){".
			'var $inp = jQuery("input[type=text]");'.
			'$inp.bind("keydown", function (e){'.
				"var key = e.which;".
				" if (key == 13) {".
				"   e.preventDefault();".
				'   var nxtIdx = $inp.index(this) + 1;'.
				"   jQuery('input[type=text]:eq(' + nxtIdx + ')').focus();".
				"}".
			"});".
			"});",
			'inline'
	);
	if(empty($tid))
		drupal_add_js(
			"jQuery(document).ready(function(){".
				"jQuery('form input[type=text]').val('');".
			"});",
			'inline'
		);

	return $form;
}

function score_automize_page_validate_new_score_save($form, $form_state) {
	$tid=NULL;
	if(isset($form_state['values']['tid'])&&$form_state['triggering_element']['#name']=='new-score-save') $tid=$form_state['values']['tid'];
	if(empty($tid)) {
		$tname=trim($form_state['values']['addscores']['new-score-teachername']);
		$tid=db_query('SELECT tid FROM {vl_teachers} WHERE tname=:tname',array(':tname'=>$tname))->fetchField();
		if(!empty($tid)) {
			foreach($form_state['storage']['addscores']['students'] as $s) {
				if(db_query('SELECT EXISTS(SELECT * FROM {students_score_temp} WHERE uid=:uid AND eid=:eid AND tid=:tid)',
					array(':uid'=>$s, ':eid'=>$form_state['storage']['eid'], ':tid'=>$tid))->fetchField())
					form_set_error('addscores][new-score-'.$s, t('You have already input the score of !sid under !tname.',array('!sid'=>$s, '!tname'=>$tname)));
			}
		}
	}
	foreach($form_state['storage']['addscores']['students'] as $s) {
		if($tid&&$form_state['triggering_element']['#name']=='new-score-save')
			$key='new-score-'.$tid.'-'.$s.'-absence';
		else
			$key='new-score-'.$s.'-absence';
		if(!$form_state['values']['addscores'][$key]) {
			if($tid&&$form_state['triggering_element']['#name']=='new-score-save')
				$key='new-score-'.$tid.'-'.$s;
			else
				$key='new-score-'.$s;
			$score=$form_state['values']['addscores'][$key];
			if(!is_numeric($score) || (float)$score < 0 || (float)$score > 100)
				form_set_error('addscores]['.$key, t('The input for !sid is invalid.',array('!sid'=>$form['addscores']['addscores'][$key]['#title'])));
		}
	}
}

function score_automize_page_submit_new_score_save($form, &$form_state) {
	$tid=NULL;
	if(isset($form_state['values']['tid'])&&$form_state['triggering_element']['#name']=='new-score-save') $tid=$form_state['values']['tid'];
	if(empty($tid)) {
		$tname=trim($form_state['values']['addscores']['new-score-teachername']);
		db_merge('vl_teachers')->key(array('tname'=>$tname))
			->fields(array('tname'=>$tname))->execute();
		$tid=db_query('SELECT tid FROM {vl_teachers} WHERE tname=:tname',array(':tname'=>$tname))->fetchField();
	} else {
		$tname=db_query('SELECT tname FROM {vl_teachers} WHERE tid=:tid',array(':tid'=>$tid))->fetchField();
	}
	$i=0;
	foreach($form_state['storage']['addscores']['students'] as $s) {
		if($form_state['triggering_element']['#name']=='new-score-save')
			$key='new-score-'.$tid.'-'.$s.'-absence';
		else
			$key='new-score-'.$s.'-absence';

		if($form_state['values']['addscores'][$key])
			$score=-1;
		else {
			if($form_state['triggering_element']['#name']=='new-score-save')
				$key='new-score-'.$tid.'-'.$s;
			else
				$key='new-score-'.$s;
			$score=$form_state['values']['addscores'][$key];
		}
		$q=db_merge('students_score_temp')->key(array(
			'uid' => $s,
			'tid' => $tid,
			'eid' => $form_state['storage']['eid']
		))->fields(array(
			'uid' => $s,
			'tid' => $tid,
			'eid' => $form_state['storage']['eid'],
			'score' => floatval($score)
		))->execute();
		if($q) $i++;
	}
	drupal_set_message(t('@num scores of @tname have been saved.',array('@num'=>$i, '@tname'=>$tname)));
	unset($form_state['values']['addscores']);
	unset($form_state['values']['tid']);
	$form_state['rebuild']=TRUE;
}

function score_automize_page_submit_calculate($form, &$form_state) {
	$form_state['storage']['calculate']=$form_state['storage']['eid'];
	$form_state['rebuild']=TRUE;
}

function score_automize_page_step_calculate($form, $form_state, $eid=NULL) {
	if(preg_match('/(?i)msie [1-8]/',$_SERVER['HTTP_USER_AGENT'])) {
		drupal_set_message(t('It is suggested using Chrome-like browser to print this page.'), 'warning');
	}
	if(empty($eid))	$eid=$form_state['storage']['calculate'];
	$exam=exam_load($eid);
	$all_students=array();
	$professions=db_query('SELECT p.pname FROM {students} s INNER JOIN {students_going} sg ON s.uid=sg.uid '.
		'INNER JOIN {vl_professions} p ON s.profession_major=p.pid '.
		'WHERE sg.eid=:eid AND sg.gid IS NOT NULL GROUP BY p.pname ORDER BY p.pid', array(':eid'=>$eid));
	drupal_set_title(t('Total score sheet of !ename', array('!ename'=>$exam->enamefull)));
	$should_hide_save=db_query('SELECT EXISTS(SELECT * FROM {students} s INNER JOIN {students_score} sc ON s.uid=sc.uid '.
		'WHERE NOT EXISTS(SELECT * FROM {students_passthrough} sp WHERE sp.idcard_number=s.idcard_number) AND sc.eid=:eid)',
		array(':eid'=>$eid)
	)->fetchField();
	if($should_hide_save) {
		$default_values=db_query('SELECT * FROM {students_score} WHERE eid=:eid', array(':eid'=>$eid))->fetchAllAssoc('uid');
	}
	$should_calculate_rank=db_query('SELECT EXISTS(SELECT * FROM {students} s INNER JOIN {students_score_temp} sc ON s.uid=sc.uid '.
		'INNER JOIN {vl_professions} p ON s.profession_major=p.pid '.
		'WHERE sc.eid=:eid AND p.did IN (:prof))', array(':eid'=>$eid, ':prof'=>array('D5','D6','D7','D8')))->fetchField();
	foreach($professions as $p) {
		$rows=array();
		$form['profession-'.$p->pname]=array(
			'#type' => 'fieldset',
			'#title' => t('Profession !pname', array('!pname'=>$p->pname)),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);
		$teachers=db_query('SELECT st.tid, t.tname FROM {vl_teachers} t INNER JOIN {students_score_temp} st ON st.tid=t.tid '.
			'WHERE st.eid=:eid GROUP BY st.tid ORDER BY st.tid', array(':eid'=>$eid)
		)->fetchAll();
		$header=array(
			t('Student ID'),
			t('Real Name'),
		);
		foreach($teachers as $t) {
			$header[]=$t->tname;
		}
		$header[]=array('data'=>t('Total score'), 'field','sort'=>'desc');
		if($should_calculate_rank) {
			foreach($teachers as $t) {
				$header[]=t('Rank of !name',array('!name'=>$t->tname));
			}
			$header[]=array('data'=>t('Total average rank'), 'sort'=>'asc');
		}
		$students=db_query('SELECT s.uid, s.name FROM {students} s INNER JOIN {students_going} sg ON s.uid=sg.uid '.
			'INNER JOIN {vl_professions} p ON s.profession_major=p.pid '.
			'WHERE sg.eid=:eid AND sg.gid IS NOT NULL AND p.pname=:pname', array(':eid'=>$eid, ':pname'=>$p->pname))->fetchAll();;
		$scores=array();
		$totalscore=array();
		$ranks=array();
		$totalrank=array();
		foreach($students as $s) {
			$scores[$s->uid]=db_query('SELECT tid, score FROM {students_score_temp} WHERE eid=:eid AND uid=:uid',
				array(':eid'=>$eid, ':uid'=>$s->uid)
			)->fetchAllKeyed();
			$n=1+floor((count($scores[$s->uid])-5)/3);
			$larges[$s->uid]=_score_array_large_n($scores[$s->uid],$n);
			$t=$scores[$s->uid];
			arsort($t, SORT_NUMERIC);
			$t=array_slice($t, $n, count($t), TRUE); 
			$smalls[$s->uid]=_score_array_small_n($t,$n);
			if($should_hide_save) {
				$totalscore[$s->uid]=$default_values[$s->uid]->score;
			} else {
				$totalscore[$s->uid]=array_sum($scores[$s->uid]);
				$totalscore[$s->uid]-=array_sum($larges[$s->uid])+array_sum($smalls[$s->uid]);
				$totalscore[$s->uid]/=count($scores[$s->uid])-(float)$n*2;
			}
			$rows[$s->uid]=array(
				'uid'=>$s->uid,
				'name'=>$s->name,
			);
			foreach($teachers as $t) {
				$rows[$s->uid][$t->tid]=$scores[$s->uid][$t->tid];
			}
			$rows[$s->uid]['totalscore']=$totalscore[$s->uid];
			$all_students[$s->uid]['totalscore']=$totalscore[$s->uid];
		}

		if($should_calculate_rank) {
			$rankscores = array_transpose($scores);
			foreach($teachers as $t) {
				$ranks[$t->tid]=_score_array_rank($rankscores[$t->tid]);
			}
			$ranks = array_transpose($ranks);
			foreach($students as $s) {
				$n=1+floor((count($ranks[$s->uid])-5)/3);
				$larger[$s->uid]=_score_array_large_n($ranks[$s->uid],$n);
				$t=$ranks[$s->uid];
				arsort($t, SORT_NUMERIC);
				$t=array_slice($t, $n, count($t), TRUE); 
				$smallr[$s->uid]=_score_array_small_n($t,$n);
				if($should_hide_save) {
					$totalrank[$s->uid]=$default_values[$s->uid]->rank;
				} else {
					$totalrank[$s->uid]=array_sum($ranks[$s->uid]);
					$totalrank[$s->uid]-=array_sum($larger[$s->uid])+array_sum($smallr[$s->uid]);
					$totalrank[$s->uid]/=count($ranks[$s->uid])-(float)$n*2;
				}
				foreach($teachers as $t) {
					$rows[$s->uid][$t->tid.'r']=$ranks[$s->uid][$t->tid];
				}
				$rows[$s->uid]['totalrank']=$totalrank[$s->uid];
				$all_students[$s->uid]['totalrank']=$totalrank[$s->uid];
			}
		}

		$rows=array_orderby($rows, 'totalrank', SORT_ASC, 'totalscore', SORT_DESC);
		$rows_format=$rows;
		foreach($students as $s) {
			$rows_format[$s->uid]['totalscore']=round($rows_format[$s->uid]['totalscore'],2);
			if($should_calculate_rank)
				$rows_format[$s->uid]['totalrank']=round($rows_format[$s->uid]['totalrank'],2);
			foreach($teachers as $t) {
				if($rows_format[$s->uid][$t->tid]==-1) {
					$rows_format[$s->uid][$t->tid]=t('Absence');
					$rows_format[$s->uid]['totalscore']=t('Absence');
					if($should_calculate_rank) {
						$rows_format[$s->uid][$t->tid.'r']=t('Absence');
						$rows_format[$s->uid]['totalrank']=t('Absence');
					}
					continue;
				}
				foreach($larges[$s->uid] as $k=>$v)
					if($t->tid==$k)
						$rows_format[$s->uid][$t->tid]='<s>'.$rows_format[$s->uid][$t->tid].'</s>';
				foreach($smalls[$s->uid] as $k=>$v)
					if($t->tid==$k)
						$rows_format[$s->uid][$t->tid]='<s>'.$rows_format[$s->uid][$t->tid].'</s>';
				if($should_calculate_rank) {
					foreach($larger[$s->uid] as $k=>$v)
						if($t->tid==$k)
							$rows_format[$s->uid][$t->tid.'r']='<s>'.$rows_format[$s->uid][$t->tid.'r'].'</s>';
					foreach($smallr[$s->uid] as $k=>$v)
						if($t->tid==$k)
							$rows_format[$s->uid][$t->tid.'r']='<s>'.$rows_format[$s->uid][$t->tid.'r'].'</s>';
				}
			}
		}

		$output = theme('table', array('header'=>$header, 'rows'=>$rows_format));
		$form['profession-'.$p->pname]['output']=array(
			'#markup' => $output,
		);
	}
	if($professions->rowCount()==1) {
		$form=$form['profession-'.$p->pname];
		unset($form['#type']);
	}
	$form['#students']=$all_students;
	$form['#attached']['css']=array(
		'div.sidebar {display: none;}' => array('type' => 'inline'),
		'div#tasks {display: none;}' => array('type' => 'inline'),
		'body.sidebar-first div.content-inner {margin-left: 0px;}' => array('type' => 'inline'),
		'td {color: #000000; }' => array('type' => 'inline'),
		'td > s {color: #bbbbbb; }' => array('type' => 'inline'),
		'@page { size: A4 landscape; margin-top:1cm; margin-bottom: 3cm; margin-left: 0.5cm; margin-right: 0.5cm;}'.
			'@bottom-right { content: '.t('"Page "@page" of "@total', array('@page'=>'counter(page)', '@total'=>'counter(pages)')).';}'.
			'header > div.header-inner { display: none; }'.
			'footer > div#footer-inner { display: none; }'.
			'input { display: none; }'.
			'div#menu-bar { display: none; }'.
			'div#breadcrumb { display: none; }'.
			'div#messages { display: none; }'.
			'th, td {font-size: 0.05em;}'.
			'tr {-webkit-print-color-adjust: exact; }'.
		'' => array('type' => 'inline', 'media'=>'print'),
	);

	$form['know']=array(
		'#type' => 'checkbox',
		'#access' => !$should_hide_save,
		'#title' => t('I know that after saving, I will not able to modify any of the exam scores.'),
		'#default_value' => FALSE,
	);
	$form['save']=array(
		'#type'=>'submit',
		'#value'=>t('Save'),
		'#access' => !$should_hide_save,
		'#submit' => array('score_automize_page_step_calculate_submit'),
		'#states' => array(
			'disabled' => array(
				':input[name="know"]' => array('checked' =>FALSE),
			),
		),
	);
	$form['print']=array(
		'#type'=>'button',
		'#value'=>t('Print'),
		'#attributes' => array(
			'onclick' => 'javascript: window.print(); return false;'
		),
	);

	return $form;
}

function score_automize_page_step_calculate_submit($form, &$form_state) {
	$eid=$form_state['storage']['eid'];
	$exam=exam_load($eid);
	$i=0;
	foreach($form['#students'] as $s => $value) {
		$q=db_merge('students_score')->key(array(
			'uid' => $s,
			'eid' => $eid,
		))->fields(array(
			'uid' => $s,
			'eid' => $eid,
			'score' => $value['totalscore'],
			'rank' => $value['totalrank'],
		))->execute();
		if($q) $i++;
	}
	drupal_set_message(t('!num scores of !ename is saved.', array('!num'=>$i, '!ename'=>$exam->enamefull)));
	watchdog(
		'score',
		'Saved the !num scores of !ename.',
		array('!num'=>$i, '!ename'=>$exam->enamefull)
	);
	unset($form_state['storage']['calculate']);
	$form_state['rebuild']=TRUE;
}

function score_automize_page_submit_assign($form, &$form_state) {
	$form_state['storage']['eid']=$form_state['values']['eid'];
	$form_state['storage']['gid']=$form_state['values']['gid'];
	$form_state['storage']['assign']=$form_state['values']['eid'];
	unset($form_state['storage']['tid']);
	unset($form_state['values']['tid']);
	$form_state['rebuild']=TRUE;
}

function score_automize_page_step_reorder($form_orig, $form_state) {
	$form=array();
	$form['eid']=$form_orig['eid'];
	$form['gid']=$form_orig['gid'];
	$form['eidgidgo']=$form_orig['eidgidgo'];
	$form['eid']['#default_value']=$form_state['storage']['eid'];
	$form['eid']['#disabled']=TRUE;
	$form['gid']['#default_value']=$form_state['storage']['gid'];
	$form['gid']['#disabled']=TRUE;
	$form['reorder']=array(
		'#type' => 'fieldset',
		'#title' => t('Reorder students in current going'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#tree' => TRUE,
	);
	$form['reorder']['tablestart']=array(
		'#markup' => sprintf('<div class="messages warning">%s</div>', t('Saving can be done only once, so be careful.')).
			'<table><thead>'.
			'<th style="width: 2em;">'.t('No.').'</th>'.
			'<th>'.t('Student ID').'</th>'.
			'</thead><tbody>',
	);

	$students=db_query('SELECT s.uid, s.name, sg.gorder FROM {students} s INNER JOIN {students_going} sg ON s.uid=sg.uid '.
		'WHERE sg.eid=:eid AND sg.gid=:gid ORDER BY s.uid',
		array(':eid'=>$form_state['storage']['eid'], ':gid'=>$form_state['storage']['gid']))->fetchAll();
	$i=1;
	$options=array();
	foreach($students as $s) {
		$options[$s->uid]=sprintf('%s %s', $s->uid, $s->name);
	}
	$trclass="odd";
	foreach($students as $s) {
		$key=sprintf('%s-%s-%03d',$form_state['storage']['eid'],$form_state['storage']['gid'],$i);
		$form['reorder'][$key]=array(
			'#type' => 'select',
			'#options' => $options,
			'#required' => TRUE,
			'#default_value' => NULL,
			'#prefix' => sprintf('<tr class="%s"><td>%d</td><td>', $trclass, $i++),
			'#suffix' => '</td></tr>',
		);
		$disabled=db_query('SELECT EXISTS(SELECT * FROM {students_score_temp} WHERE uid=:uid AND eid=:eid AND score=-1)',
				array(':eid'=>$form_state['storage']['eid'], ':uid'=>$key))->fetchField();
		if($disabled)
			$form['reorder'][$key]['#field_suffix']='<span class="messages error">'.t('Absence').'</span>';
		$form['reorder'][$key]['#required']=!$form['reorder'][$key]['#disabled'];
		if($trclass=='odd') $trclass='even';
		else $trclass='odd';
	}

	$form['reorder']['tableend']=array(
		'#markup' => '</tbody></table>',
	);
	$form['reorder']['save']=array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#submit' => array('score_automize_page_step_reorder_submit'),
		'#validate' => array('score_automize_page_step_reorder_validate'),
		'#limit_validation_errors' => array(array('reorder')),
		'#prefix' => sprintf('<div class="messages warning">%s</div>', t('Saving can be done only once, so be careful.')),
	);

	return $form;
	
}

function score_automize_page_step_reorder_validate($form, $form_state) {
	$uids=array_filter($form_state['values']['reorder']);
	$uid_filtered=array_unique($uids);
	if(count($uids)!=count($uid_filtered)) {
		foreach($uids as $ki => $vi) {
			foreach($uids as $kj => $vj) {
				if($ki<$kj && $vi==$vj) {
					form_set_error('reorder]['.$ki, t('The student !name appears more than one time.',
						array('!name'=>$form['reorder'][$ki]['#options'][$vj])));
					form_set_error('reorder]['.$kj);
				}
			}
		}
	}
}

function score_automize_page_step_reorder_submit($form, &$form_state) {
	$uids=array_filter($form_state['values']['reorder']);
	$i=0;
	foreach($uids as $k => $v) {
		$t=explode('-',$k);
		$gorder=(int)$t[2];
		db_update('students_going')->condition('uid',$v)->condition('eid',$form_state['storage']['eid'])->fields(array(
			'gid' => $form_state['storage']['gid'],
			'gorder' => $gorder
		))->execute();
		db_update('students_score_temp')->condition('uid',$k)->fields(array(
			'uid' => $v
		))->execute();
		$i++;
	}
	$exam=exam_load($form_state['storage']['eid']);
	$going=going_load($form_state['storage']['gid']);
	watchdog('score','!user reordered the students of !ename in !going',
		array(
			'!ename'=>$exam->enamefull,
			'!going'=>$going->formatTime,
		)
	);
	drupal_set_message(t('Reordered !num students in current going.',array('!num'=>$i)));
	unset($form_state['storage']['assign']);
	$form_state['rebuild']=TRUE;
}

/*
	Usage:
	$arr=array('100'=>30, '102'=>41, '101'=>30, '103'=>50);
	var_dump(_score_array_rank($arr));
*/
function _score_array_rank($arr) {
	$ret=array();
	$a=$arr;
	rsort($a, SORT_NUMERIC);
	foreach($arr as $key=>$value) {
		$ret[$key]=array_search($value, $a)+1;
	}
	return $ret;
}

/*
	Usage:
	$arr=array('100'=>30, '102'=>41, '101'=>30, '103'=>50);
	var_dump(_score_array_small_n($arr));
*/
function _score_array_large_n($arr, $n=1) {
	$ret=array();
	$a=$arr;
	arsort($a, SORT_NUMERIC);
	$ret=array_slice($a, 0, $n, TRUE); 
	return $ret;
}

/*
	Usage:
	$arr=array('100'=>30, '102'=>41, '101'=>30, '103'=>50);
	var_dump(_score_array_small_n($arr));
*/
function _score_array_small_n($arr, $n=1) {
	$ret=array();
	$a=$arr;
	asort($a, SORT_NUMERIC);
	$ret=array_slice($a, 0, $n, TRUE); 
	return $ret;
}

function score_top_page() {
	return score_input_going_list();
}

function score_simpleoauth($input, $appid=NULL) {
	$output=array();
	if(empty($input) || empty($input['sid']) || empty($input['subop'])) {
		$output=array(
			'status' => '40002',
			'errmsg' => t('Invalid input for @op operation.', array('@op'=>'score')),
		);
		return $output;
	}
	if(variable_get('simpleoauth.connect.'.$appid.'.'.$input['sid'],0)==0) {
		$output=array(
			'status' => '40003',
			'errmsg' => t('@sid has not been connected with @app yet.', array('@sid'=>$input['sid'], '@app' => simpleoauth_get_appname($appid))),
		);
		return $output;
	}
	if($input['subop']=='eids') {
		$query=db_select('students_score','s')->condition('s.uid',$input['sid'])->fields('s')->condition('s.eid', '3%', 'LIKE')->orderBy('s.eid');
		$query->innerJoin('vl_exam','e','s.eid=e.eid');
		$query->addExpression("CONCAT_WS('',e.ename,e.elevel)", 'enamefull');
		$scores=$query->execute();
		if($scores->rowCount()==0) {
			$output=array(
				'status' => '40020',
				'errmsg' => t('No valid exams for @sid.', array('@sid'=>$input['sid'])),
			);
			return $output;
		}
		$output['status']='0';
		$output['sid']=$input['sid'];
		$eids=array();
		$enames=array();
		$exams=array();
		foreach($scores as $r) {
			$exams[]=array(
				'eid' => $r->eid,
				'ename' => $r->enamefull
			);
		}
		$output['exams']=$exams;
	} else if($input['subop']=='geteid') {
		if(empty($input['eid'])) {
			$output=array(
				'status' => '40002',
				'errmsg' => t('Invalid input for @op operation.', array('@op'=>'score')),
			);
			return $output;
		}
		$user=user_load_by_name($input['sid']);
		if(!user_access('check students own scores', $user)) {
			$output=array(
				'status' => '40002',
				'errmsg' => t('Invalid input for @op operation.', array('@op'=>'score')),
			);
			return $output;
		}
		$query=db_select('students_score','s')->condition('s.uid',$input['sid'])->condition('s.eid',$input['eid'])->condition('s.eid', '3%', 'LIKE')->fields('s')->orderBy('s.eid');
		$query->innerJoin('vl_exam','e','s.eid=e.eid');
		$query->addExpression("CONCAT_WS('',e.ename,e.elevel)", 'enamefull');
		$r=$query->execute()->fetchObject();
		if(empty($r)) {
			$output=array(
				'status' => '40020',
				'errmsg' => t('No valid exams for @sid.', array('@sid'=>$input['sid'])),
			);
			return $output;
		}
		$output['status']='0';
		$output['sid']=$r->uid;
		$output['eid']=$r->eid;
		$output['ename']=$r->enamefull;
		$output['score']=$r->score;
		watchdog(
			'score',
			'@appid queried the score of @sid.',
			array('@sid'=>$r->uid, '@appid'=>simpleoauth_get_appname($appid))
		);
	} else {
		$output=array(
			'status' => '40002',
			'errmsg' => t('Invalid input for @op operation.', array('@op'=>'score')),
		);
	}
	return $output;
}

?>
