<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * Implementation of hook_help().
 */
function score_help($path, $arg) {
	switch ($path) {
		case 'score/emptyscores':
			$output = t('Only authorized users have permisison on emptying scores.');
			break;
		case 'signup/transfer':
			$output = t('Please select the going you would like to operate.');
			break;
		case 'signup/transfer/%':
			$output = '<p>'.t('You should first select those students, then select the destination profession below the students list. Click Apply when done. You can do it multiple times for single profession, but only once for single student.').'</p>';
			$output .= '<p>'.t('Tip: You may want to input score at fisrt, the sort by the scores to decide.').'</p>';
			break;
	}
	if (isset($output))
		return '<p>'.$output.'</p>';
}

/**
 * Implementation of hook_theme().
 */
function score_theme() {
	return array(
		'score_input_going_form' => array(
			'render element' => 'form', 
		),
		'score_gaokao_province_status_form' => array(
			'render element' => 'form', 
		),
		'score_gaokao_province_detail_form' => array(
			'render element' => 'form', 
		),
	);
}
/**
 * Implementation of hook_menu().
 */
function score_menu() {
	$items['score'] = array(
		'title' => 'Score',
		'description' => "Upload the score of the students",
		'page callback' => 'score_input_going_list',
		'access callback' => 'score_input_going_list_check',
		'expanded' => TRUE,
	);

	$items['score/input'] = array(
		'title' => 'Input one by one',
		'weight' => 0,
		'page callback' => 'score_input_going_list',
		'access callback' => 'score_input_going_list_check',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['score/input/%'] = array(
		'title' => 'Input one by one',
		'weight' => 0,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_input_going_form', 2),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access callback' => 'score_input_check_access',
		'access arguments' => array(2),
	);
	
	$items['score/input/%/%'] = array(
		'title' => 'Input one by one',
		'weight' => 0,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_input_going_form', 2, 3),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access callback' => 'score_input_check_access',
		'access arguments' => array(2),
	);
	$items['score/batch'] = array(
		'title' => 'Batch upload',
		'weight' => 1,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_batch'),
		'access callback' => 'score_input_going_list_batch_check',
		'type' => MENU_LOCAL_TASK,
	);
	$items['score/view'] = array(
		'title' => 'View Scores',
		'weight' => 2,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_view_admin'),
		'access callback' => 'score_check_perm_view',
	);
	
	$items['score/view/%'] = array(
		'title' => 'View Scores',
		'type' => MENU_CALLBACK,
		'weight' => 2,
		'page callback' => 'score_view_detail',
		'page arguments' => array(2),
		'access callback' => 'score_check_perm_view',
	);
	
	$items['score/prepare3rd'] = array(
		'title' => 'Prepare for the 3rd round students',
		'weight' => 3,
		'page callback' => 'score_prepare_3rd_overview',
		'access callback' => 'score_check_perm_prepare3rd',
	);

	$items['score/prepare3rd/%'] = array(
		'title' => 'Prepare for the 3rd round students',
		'#type' => MENU_CALLBACK,
		'weight' => 3,
		'page callback' => 'score_prepare_3rd_detail',
		'page arguments' => array(2),
		'access callback' => 'score_check_perm_prepare3rd',
	);

	$items['score/preparegk'] = array(
		'title' => 'Prepare for the gk round students',
		'weight' => 5,
		'page callback' => 'score_prepare_gk_overview',
		'access callback' => 'score_check_perm_gk',
	);

	$items['score/preparegk/%'] = array(
		'title' => 'Prepare for the gk round students',
		'#type' => MENU_CALLBACK,
		'page callback' => 'score_prepare_gk_detail',
		'page arguments' => array(2),
		'access callback' => 'score_check_perm_gk',
	);

	$items['score/inputgk'] = array(
		'title' => 'Input gaokao scores for the students',
		'weight' => 4,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_gaokao_province_status_form'),
		'access callback' => 'score_check_perm_inputgk',
	);

	$items['score/inputgk/%'] = array(
		'title' => 'Input gaokao scores for the students',
		'#type' => MENU_CALLBACK,
		'weight' => 4,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_gaokao_province_detail_form',2),
		'access callback' => 'user_access',
		'access arguments' => array('input gaokao score'),
	);

	$items['score/emptyscores'] = array(
		'title' => 'Empty Scores',
		'description' => 'Empty specific scores of department',
		'weight' => 10,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('score_admin_empty_form'),
		'access callback' => 'user_access',
		'access arguments' => array('empty scores'),
	);
	
	$items['signup/transfer'] = array(
			'title'=>'Transfer students',
			'description' => 'Modify the profession of students',
			'weight'=>3,
			'page callback' => 'score_transfer_list',
			'access callback' => 'score_transfer_list_check',
	);
	$items['signup/transfer/%'] = array(
			'title'=>'Transfer students',
			'type'=>MENU_CALLBACK,
			'description' => 'Modify the profession of students',
			'weight'=>3,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('score_transfer', 2),
			'access callback' => 'score_transfer_check',
			'access arguments'=>array(2),
	);

	$items['signup/markround2'] = array(
			'title'=>'Mark round 2 students',
			'description' => 'Mark the students who will be enrolled in to second round examinations',
			'weight'=>4,
			'page callback' => 'score_mark_2nd_round_list',
			'access callback' => 'score_mark_2nd_round_list_check',
	);
	$items['signup/markround2/%'] = array(
			'title'=>'Mark round 2 students',
			'type'=>MENU_CALLBACK,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('score_mark_2nd_round', 2),
			'access callback' => 'score_mark_2nd_round_check',
			'access arguments'=>array(2),
	);

	$items['signup/markround3'] = array(
			'title'=>'Mark round 3 students',
			'description' => 'Mark the students who will be enrolled in to third round examinations',
			'weight'=>4,
			'page callback' => 'score_mark_3rd_round_list',
			'access callback' => 'score_mark_3rd_round_list_check',
	);
	$items['signup/markround3/%'] = array(
			'title'=>'Mark round 3 students',
			'type'=>MENU_CALLBACK,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('score_mark_3rd_round', 2),
			'access callback' => 'score_mark_3rd_round_check',
			'access arguments'=>array(2),
	);

	$items['signup/markroundg'] = array(
			'title'=>'Mark round g students',
			'description' => 'Mark the students who will be enrolled in to gaokao',
			'weight'=>4,
			'page callback' => 'score_mark_gaokao_round_list',
			'access callback' => 'score_mark_3rd_round_list_check',
	);
	$items['signup/markroundg/%'] = array(
			'title'=>'Mark round g students',
			'type'=>MENU_CALLBACK,
			'page callback' => 'drupal_get_form',
			'page arguments' => array('score_mark_gaokao_round', 2),
			'access callback' => 'score_mark_3rd_round_check',
			'access arguments'=>array(2),
	);

	$items['myscore'] = array(
		'title' => 'My Score',
		'description' => "Allow students to check the his own result",
		'page callback' => 'score_myscore',
		'access callback' => 'score_myscore_check',
	);

	$items['myscore/round3'] = array(
		'title' => 'The 3rd round exam result',
		'weight' => 0,
		'page callback' => 'score_myscore',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access callback' => 'score_myscore_check',
	);

	$items['myscore/roundg'] = array(
		'title' => 'The admission exam result',
		'weight' => 11,
		'page callback' => 'score_myscore_roundg',
		'type' => MENU_LOCAL_TASK,
		'access callback' => 'score_myscore_check_roundg',
	);
	
	return $items;
}

/**
 * Implementation of hook_permission
 */
function score_permission() {
	return array(
		'input score' => array(
			'title' => t('Input or batch import the scores'),
		),
		'empty scores' => array(
			'title' => t('Empty specific scores'),
		),
		'mark 2nd round students' => array(
			'title' => t('Mark the students who will be enrolled in to second round examinations'),
		),
		'review my score' => array(
			'title' => t('Review my scores'),
		),
		'review all score' => array(
			'title' => t('Review all scores'),
		),
		'check sutdents own scores' => array(
			'title' => t('Review students own scores'),
		),
		'input gaokao score' => array(
			'title' => t('Input students gaokao scores'),
		),
		'check sutdents roundg scores' => array(
			'title' => t('Review my roundg status'),
		),
	);
}

function score_input_going_list_check() {
	$query=db_select('students_going','sg')->isNotNull('sg.gid')->fields('sg');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	if(!user_access('review all score') && $GLOBALS['user']->uid)
		$query->condition('e.uid',$GLOBALS['user']->name);
	$r=$query->countQuery()->execute()->fetchField();
	if(user_access('input score') || user_access('review my score'))
		return $r>0;
	else if(user_access('review all score'))
		return $r>0;
	else
		return FALSE;
}

function score_input_going_list_batch_check() {
	$query=db_select('students_going','sg')->isNotNull('sg.gid')->fields('sg');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	$query->condition('e.uid',$GLOBALS['user']->name);
	$r=$query->countQuery()->execute()->fetchField();
	if(user_access('input score') || user_access('review my score'))
		return $r>0;
	else return FALSE;
}

function score_check_perm_view() {
	//$r=db_result(db_query('SELECT MAX(gid) FROM {students_going}'));
	$query=db_select('students_going');
	$query->addExpression('MAX(gid)', 'g');
	$r=$query->execute()->fetchField();
	return user_access('review all score') && $r;
}

function score_check_perm_prepare3rd() {
	$r=db_select('students','s')->condition('s.pass_round1_major',1)->fields('s')->countQuery()->execute()->fetchField();
	return user_access('review all score') && $r;
}

function score_check_perm_inputgk() {
	$r=db_select('students','s')->condition('s.pass_round3_major',1)->fields('s')->countQuery()->execute()->fetchField();
	return user_access('input gaokao score')&& $r;
}

function score_check_perm_gk() {
	$r=db_select('students','s')->condition('s.pass_round3_major',1)->fields('s')->countQuery()->execute()->fetchField();;
	return (user_access('input gaokao score') || user_access('view gaokao score'))&& $r;
}

function score_input_check_access($eid=NULL) {
	if(!user_access('review my score') && !user_access('input score')) return FALSE;
	if($eid) {
		$query=db_select('students_going','sg')->isNotNull('sg.gid')->condition('sg.eid',$eid)->fields('sg');
		$r=$query->countQuery()->execute()->fetchField();
		return $r > 0;
	} else return TRUE;
}

function score_input_going_list() {
	
	global $user;
	$output ='<div><p>'.
		t('Following exams are owned by your deparment. You can input the scores of the students one by one.').
		'</p><p>'.
		t('Please note that the scores should be uploaded only once, so be careful they are correct 100%.').'</div>';
	
	$form['own']=array(
		'#type'=>'fieldset',
		'#title'=>t('Score of my department'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	
	$query=db_select('vl_exam','e')->fields('e',array('eid'))->fields('s',array('gid'));
	$query->innerJoin('students_going','s','s.eid=e.eid');
	$query->addExpression("CONCAT_WS('',e.ename,e.elevel)", 'enamefull');
	$query=$query->condition('e.uid',$GLOBALS['user']->name)->isNotNull('s.gid')->groupBy('e.eid')->groupBy('s.gid');
	if($query->countQuery()->execute()->fetchField()==0) {
		$item = menu_get_item();
		$content = system_admin_menu_block($item);
		return theme('admin_block_content', array('content' => $content));
	}
	$exams=$query->execute();
	$output1 = '';
	foreach($exams as $exam) {
		$output1 .= '<dt>';
		$output1 .= l($exam->enamefull, 'score/input/'.$exam->eid.'/'.$exam->gid);
		$output1 .= '</dt><dd>';
		$query=db_select('vl_going','g')->fields('g',array('time'))->fields('r',array('rname'));
		$query->innerJoin('vl_room','r','g.place=r.rid');
		$query=$query->condition('g.gid',$exam->gid);
		$r=$query->execute()->fetchObject();
		$output1 .=_going_datetime_to_string($r->time).' / '.$r->rname;
		$output1 .='</dd>';
	}
	$form['own']['output1']=array('#markup'=>$output1);
	
	$form['stu']=array(
		'#type'=>'fieldset',
		'#title'=>t('Score of my students'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	
	$query=db_select('students','s');
	$query->innerJoin('students_score','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('vl_exam','e','c.eid=e.eid');
	$query->addExpression("CONCAT_WS('', ename, elevel)",'ename');
	$query->addExpression("COUNT(c.uid)",'num');
	$query=$query->fields('e',array('eid'))->condition('p.uid',$user->name)->condition('e.uid',$user->name,'<>')->isNotNull('e.eid')
		->where("NOT e.eid LIKE '3%'")->groupBy('e.eid');
	
	$output2='';
	$rdbo=$query->execute();
	foreach($rdbo as $r) {
		if(is_null($r->eid)) continue;
		$output2 .= '<dt>'.l($r->ename, 'score/input/'.$r->eid).'</dt>';
		$output2 .= '<dd>'.t('There are !num of your students have this score.', array('!num'=>$r->num)).'</dd>';
	}
	if($output2=='') {
		unset($form['stu']);
		$output.=drupal_render($form['own']['output1']);
	}
	else {
		$form['stu']['output2']=array('#markup'=>$output2);
		$output.=drupal_render($form['own']);
		$output.=drupal_render($form['stu']);
	}
	if (user_access('input score'))
		return $output;
	else
		return '';
}

function score_input_going_form($form, $form_state, $eid, $gid=NULL) {
	global $user;
	
	$query=db_select('vl_going','g')->condition('g.gid',$gid)->fields('g');
	if(!is_null($gid)) {
		$query->condition('g.gid',$gid);
		$query->innerJoin('vl_room','r','g.place=r.rid');
		$going=$query->fields('r')->execute()->fetchObject();
	}
	
	$query=db_select('vl_exam','e')->condition('e.eid',$eid);
	$query->addExpression(" CONCAT_WS('',e.ename,e.elevel)",'ename');
	$ename=$query->execute()->fetchField();

	$query=db_select('students','s');
	$query->innerJoin('students_going','g','s.uid=g.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query=$query->fields('s',array('uid','name'))->fields('p',array('pname'))->fields('g',array('gorder','eid'));
	$query=$query->condition('g.eid',$eid)->orderBy('g.gorder');
	if(!is_null($gid))
		$query->condition('g.gid',$gid);
	else $query->isNotNull('g.gid');
	
	if(!is_null($gid))
		$form['info']=array(
			'#markup'=>'<div class="messages">'._going_datetime_to_string($going->time).' / '.$ename.' / '.$going->rname.'</div>',
		);
	else
		drupal_set_title(sprintf('%s - %s',t('Score'), $ename));
	$text='';
	$j=1;
	
	$students=$query->execute();
	foreach($students as $student) {
		$form['uid'][$student->uid]=array('#markup'=>l($student->uid, 'user/'.db_select('users','u')->fields('u',array('uid'))->condition('name',$student->uid)->execute()->fetchField()));
		$text.=$student->gorder."\t";
		$text.=$student->uid;
		$form['eid'][$student->uid]=array('#type'=>'hidden', '#markup'=>$student->eid);
		$form['name'][$student->uid]=array('#markup'=>$student->name);
		$form['gorder'][$student->uid]=array('#markup'=>!is_null($gid)?(($student->gid).($student->gorder)):$student->gorder);
		$text.="\t".$student->name;
		$form['profession'][$student->uid]=array('#markup'=>$student->pname);
		$text.="\t".$student->pname."\\n";
		$op=unserialize(db_select('students_going','sg')->fields('sg',array('opus'))->condition('uid',$student->uid)->condition('eid',$eid)->execute()->fetchField());
		$should_opus=db_select('vl_exam','e')->fields('e',array('opus'))->condition('eid',$eid)->execute()->fetchField();
		unset($ops);
		for($i=1;$i<=$should_opus;$i++) {
			$ops[]=$op['opus'.$i];
		}
		if($should_opus >0 )
			$form['opus'][$student->uid]=array('#markup'=>implode('<br/>', $ops));
		$should_disabled=db_select('students_score','sc')->fields('sc')->condition('uid',$student->uid)->condition('eid',$student->eid)->countQuery()->execute()->fetchField();
		if($should_disabled || is_null($gid))
			$form['score-'.$student->uid]=array('#markup'=>db_select('students_score','sc')->fields('sc',array('score'))->condition('uid',$student->uid)->condition('eid',$student->eid)->execute()->fetchField());
		else
			$form['score-'.$student->uid]=array('#type'=>'textfield', '#title'=> t('!name\'s score', array('!name'=>$student->uid)),'#size'=>20, '#required'=>TRUE, '#prefix'=>'<div class="container-inline">', '#suffix'=>'</div>');
	}
	drupal_add_js(drupal_get_path('module','score').'/ZeroClipboard.js');
	drupal_add_css(drupal_get_path('module', 'score') .'/jquery.toastmessage.css');
	drupal_add_js(drupal_get_path('module','score').'/jquery.toastmessage.js');
	$form['submit']=array(
		'#type'=>'submit',
		'#value'=>t('Save'),
		'#prefix'=>$pre,
		'#suffix'=>'<input type="button" id="copytoclip" value="'.t('Copy to clipboard').'" class="form-submit"/><script>ZeroClipboard.setMoviePath(\'/'.drupal_get_path('module','score').'/ZeroClipboard.swf\'); var clip = new ZeroClipboard.Client(); clip.setText(\''.$text.'\'); clip.glue(\'copytoclip\'); clip.addEventListener(\'onComplete\', my_complete ); function my_complete( client, text ) { jQuery().toastmessage({position: \'middle-center\', stayTime: 2000}); jQuery().toastmessage(\'showSuccessToast\', \''.t('Copy Succeeded.').'\');}</script>'
	);
	if(is_null($gid)) unset($form['submit']);
	return $form;
}

function theme_score_input_going_form($variables) {
	$form=$variables['form'];
	if(!isset($form['opus'])) $form['opus']=array();
	if(!is_null(arg(3))) {
		$warn = '<div class="messages error" id="notification">';
		$warn.= t('WARNING: The score may be input only once, please keep it correct 100%!');
		$warn.= '</div>';
	} else $warn = '';
	$output = '';
	$header=array(
		array('data'=>t('No.')),
		array('data'=>t('Student ID')),
		array('data'=>t('Real Name')),
		array('data'=>t('Score')),
		array('data'=>count($form['opus'])==0?t('Profession'):t('Opuses')),
	);
	
	if(count($form['opus'])>0)
		unset($form['profession']);
	$i=1;
	foreach(element_children($form['uid']) as $u) {
		unset($form['score-'.$u]['#title']);
		if(is_null(arg(3))) unset($form['gorder'][$u]);
		$rows[]=array(
			is_null(arg(3))?$i:drupal_render($form['gorder'][$u]),
			drupal_render($form['uid'][$u]),
			drupal_render($form['name'][$u]),
			drupal_render($form['score-'.$u]),
			count($form['opus'])==0?drupal_render($form['profession'][$u]):drupal_render($form['opus'][$u]),
		);
		$i++;
	}

	$output.=$warn;
	$output.=drupal_render($form['info']);
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	$output.=drupal_render($form['submit']);
	$output.=drupal_render_children($form);
	return $output;;
}

function score_input_going_form_validate($form, &$form_state) {
	foreach($form_state['values'] as $field=>$value) {
		if(!is_null($form_state['values']['score-'.$field])) {
			$score=$form_state['values']['score-'.$field];
			if(!is_numeric($score) || (float)$score < 0 || (float)$score > 100)
				form_set_error('score-'.$field, t('The score you\'ve inputted for !sid is invalid.',array('!sid'=>$field)));
		}
	}
}

function score_input_going_form_submit($form, &$form_state) {
	$i=0;
	foreach($form_state['values'] as $field=>$value) {
		if(isset($form_state['values']['score-'.$field])) {
			$i++;
			$score=$form_state['values']['score-'.$field];
			db_insert('students_score')->fields(array(
				'uid' => $field,
				'eid' => arg(2),
				'score' => $score,
			))->execute();
		}
	}
	if($i) {
	watchdog('score','!user uploaded !num students score.',
		array(
			'!user'=>$GLOBALS['user']->name,
			'!num'=>$i
		)
	);
	drupal_set_message(t('!user uploaded !num students score.',array('!user'=>$GLOBALS['user']->name,'!num'=>$i)));
	}
	$form_state['redirect']='score';
}

function score_admin_empty_form($form, $form_state) {
	$query=db_select('students_score','sc')->fields('sc',array('eid'));
	$query->addExpression('COUNT(sc.uid)','num');
	$query->innerJoin('students','s','sc.uid=s.uid');
	$query->innerJoin('vl_exam','e','sc.eid=e.eid');
	$query->innerJoin('vl_research_sec','r','r.uid=e.uid');
	$query->addExpression(" CONCAT_WS('',e.ename,e.elevel)",'ename');
	$query=$query->fields('r',array('rname'))->groupBy('e.eid')->orderBy('e.eid');
	
	
	$result=$query->execute();
	$form=array();

	$options=array();
	foreach($result as $r) {
		$options[$r->eid]=array(
			'ename' => $r->ename,
			'depname' => $r->rname,
			'num' => $r->num,
		);
	}
	
	$header=array(
		'ename'=>array('data'=>t('Exam Name')),
		'depname'=>array('data'=>t('Responsible department')),
		'num'=>array('data'=>t('Current number of scores')),
	);
	
	$form['info'] = array(
		'#type' => 'item',
		'#title' => t('Please select the exam you want to empty'),
		'#required' => true,
	);
	$form['exams']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $options,
			'#attributes' => array('class'=>array('assign_students')),
			'#empty' => t('No scores to empty.'),
	);
	
	if(count($options)>0) {
		$form['pass']=array(
			'#type' => 'password',
			'#title' => t('Your password'),
			'#required' => true,
			'#size' => 20,
			'#description' => t('To empty scores, we must double check your password.')
		);
	
		$form['save']=array(
			'#type' => 'submit',
			'#value' => t('Empty selected exams\' scores'),
		);
	}
	return $form;
}

function score_admin_empty_form_validate($form, $form_state) {
	// Check if at least one of the exam has been selected.
	$form_values = array_filter($form_state['values']['exams']);
	if(count($form_values)<=0) {
		form_set_error('exams', t('You must select the exams you want to empty.'));
	}
	
	// now check the password
		global $user;
		require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
		if(!user_check_password($form_state['values']['pass'], $user))
			form_set_error('pass', t('The password you have entered is wrong.'));
}

function score_admin_empty_form_submit($form, $form_state) {
	global $user;
	$exams=array_keys(array_filter($form_state['values']['exams']));
	foreach($exams as $exam) {
		$num=db_select('students_score','sc')->condition('sc.eid',$exam)->fields('sc')->countQuery()->execute()->fetchField();
		$query=db_select('vl_exam','e')->condition('eid',$exam);
		$query->addExpression(" CONCAT_WS('',e.ename,e.elevel)",'ename');
		$ename=$query->execute()->fetchField();
		db_delete('students_score')
			->condition('eid',$exam)
			->execute();
		watchdog('score','!user emptied !ename scores for !num students.',
			array(
				'!user' => $user->name,
				'!ename' => $ename,
				'!num' => $num,
			)
		);
		drupal_set_message(t('You emptied !ename scores for !num students.', array('!ename'=>$ename, '!num'=>$num)));
	}
}

function score_batch($form, $form_state) {
	global $user;
	if(!isset($form_state['rebuild_info']['need_preview']))
		$form_state['rebuild_info']['need_preview']=false;
	if($form_state['rebuild_info']['need_preview']) {
		$form['desciption']=array('#markup'=>_score_generate_batch_preview($form_state['values']['eid'], $form_state['values']['score']));
	}
	else
	{
		$form['desciption'] = array(
			'#markup'=>'<p>'.t('The function is to enable the department inputing the scores  by pasting the scores directly from Microsoft Excel or other spreadsheet program. The format of the spreadsheet must be in the following format:').
			sprintf('</p><p><img src="/%s/demo-spreadsheet.png"/></p><p>', drupal_get_path('module','score')).
			t('The program only need the 1st column (the student ID) and the last the column (the final score) of the spreadsheet. There is no limitation on how many the teachers (the columns) in the table. If the first row contains header, it will be skipped automatically.').'</p><p>'.
			t('Please note that the scores which will be saved are exactly the same with what you\'ve seen on the screen. So if you want the number be more accurate, expand the widths of demicals.').'</p>',
		);
	}
	$exams=array();
	$query=db_select('vl_exam','e')->fields('e',array('eid','ename','elevel'));
	$query->innerJoin('students_going','sg','e.eid=sg.eid');
	$query=$query->isNotNull('sg.gid');
	if($user->uid!=1) $query=$query->condition('e.uid',$user->name);
	$results=$query->execute();
	foreach($results as $r) {
		$exams[$r->eid]=$r->ename.$r->elevel;
	}
	
	$scoretypes=array(
		'score' => t('Score'),
		'rank' => t('Rank'),
	);
	
	$form['frame']=array(
		'#type'=>'fieldset',
		'#title'=>t('Batch import scores'),
		'#collapsible'=> $form_state['rebuild_info']['need_preview'],
		'#collapsed' => $form_state['rebuild_info']['need_preview'],
	);
	$form['frame']['eid']=array(
		'#type'=>'select',
		'#title'=>t('Select the exam you want to import'),
		'#options'=>$exams,
		'#default_value'=>$form_state['values']['eid'],
		'#required'=>TRUE,
	);
	$form['frame']['scoretype']=array(
		'#type'=>'select',
		'#title'=>t('Select the score type'),
		'#options'=>$scoretypes,
		'#default_value'=>$form_state['values']['scoretype'],
		'#required'=>TRUE,
	);
	$form['frame']['score']=array(
		'#type'=>'textarea',
		'#rows'=>'20',
		'#title'=>t('The mass scores'),
		'#description'=>t('The scores should be pasted directly from spreadsheet program.'),
		'#default_value'=>$form_state['values']['score'],
		'#required'=>TRUE,
	);
	
	$form['frame']['preview']=array(
		'#type'=>'submit',
		'#value'=>t('Preview result'),
		'#validate'=>array('score_batch_validate'),
		'#submit'=>array('score_batch_preview'),
	);
	if($form_state['rebuild_info']['need_preview'])
		$form['submit']=array(
			'#type'=>'submit',
			'#value'=>t('Save'),
			'#validate'=>array('score_batch_validate'),
			'#submit'=>array('score_batch_submit'),
		);
	unset($form_state['rebuild_info']['need_preview']);

	if(user_access('input score')) return $form;
	else return array();
}

function score_batch_preview($form, &$form_state) {
	$form_state['rebuild_info']['need_preview']=1;
	$form_state['rebuild']=TRUE;
}

function _score_generate_batch_preview($eid,$mass_score) {
	$massscore=explode("\r\n", $mass_score);
	foreach($massscore as $scores) {
		$score[]=explode("\t", $scores);
	}
	if(count($score)==0) return '';
	
	// Determine whether the first row is header;
	if(preg_match('/'.variable_get('zhaoban_current_year',date('Y')).'B/', $score[0][0])==0)
		array_shift($score);
	while(count($score[count($score)-1])==1)
		array_pop($score);
	if(count($score)==0) return '';
	
	$header=array(
		t('Status'),
		t('Student ID'),
		t('Score'),
		t('Real Name'),
		t('Gender'),
		t('Province'),
	);
	
	foreach($score as $row) {
		$query=db_select('students','s')->fields('s',array('uid','name','gender'));
		$query->leftJoin('students_gk','sk','s.uid=sk.uid');
		$query->innerJoin('students_going','sg','s.uid=sg.uid');
		$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
		$query=$query->fields('p',array('pname'))->fields('sk',array('province'))->condition('s.uid',$row[0])->isNotNull('sg.gid');
		$r=$query->execute()->fetchObject();
		
		$rows[]=array(
			'<img src="/misc/watchdog-ok.png"/> '.t('Ready to import'),
			$r->uid,
			trim($row[count($row)-1]),
			$r->name,
			$r->gender=='2'?t('Female'):t('Male'),
			$r->province=='000000'?t('Our own student'):db_select('vl_province','p')->condition('p.pid',$r->province)->fields('p',array('name'))->execute()->fetchField(),
		);
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	return $output;
}

function score_batch_submit($form, &$form_state) {
	$form_values=$form_state['values'];
	global $user;
	
	$eid=$form_values['eid'];
	$mass_score=explode("\r\n", $form_values['score']);
	foreach($mass_score as $scores) {
		$score[]=explode("\t", $scores);
	}
	
	// Determine whether the first row is header;
	if(preg_match('/'.variable_get('zhaoban_current_year',date('Y')).'B/', $score[0][0])==0)
		array_shift($score);
	while(count($score[count($score)-1])==1) {
		array_pop($score);
	}
	
	foreach($score as $row) {
		if($form_values['scoretype']=='rank') {
			db_merge('students_score')
				->key(array('uid' => $s->uid, 'eid' => $eid))
				->fields(array(
					'uid'=>$row[0],
					'eid'=>$eid,
					'rank'=>trim(round($row[count($row)-1],3))
				))->execute();
		} else {
			db_merge('students_score')
				->key(array('uid' => $s->uid, 'eid' => $eid))
				->fields(array(
					'uid'=>$row[0],
					'eid'=>$eid,
					'score'=>trim(round($row[count($row)-1],3))
				))->execute();
		}
	}
	
	drupal_set_message(t('!user imported !num students\' score.', array('!user'=>$user->name, '!num'=>count($score))));
	watchdog('score','!user uploaded !num students score.',
		array(
			'!user'=>$user->name,
			'!num'=>count($score)
		)
	);
}

function score_batch_validate($form, $form_state) {
	$form_values=$form_state['values'];
	$eid=$form_values['eid'];
	$etype=db_select('vl_exam','e')->condition('e.eid',$eid)->fields('e',array('etype'))->execute()->fetchField();
	if($etype!=2 && $form_values['scoretype']=='rank')
		form_set_error('scoretype', t('You cannot upload rank for this exam.'));
	$mass_score=explode("\r\n", $form_values['score']);
	$score=array();
	foreach($mass_score as $scores) {
		$score[]=explode("\t", $scores);
	}
	if(count($score)==0) {
		form_set_error('score', t('You haven\'t entered any students\' score.'));
	}
	
	// Determine whether the first row is header;
	if(preg_match('/'.variable_get('zhaoban_current_year',date('Y')).'B/', $score[0][0])==0)
		array_shift($score);
	while(count($score[count($score)-1])==1) {
		array_pop($score);
	}
	if(count($score)==0) {
		form_set_error('score', t('You haven\'t entered any students\' score.'));
	}
	$uids=array();
	
	
	foreach($score as $row) {
		if(in_array($row[0], $uids))
			fomr_set_error('score', t('The score of student !uid appears more than one time.', array('!uid'=>$row[0])));
		$uids[]=$row[0];
		
		$query=db_select('students','s')->fields('s');
		$query->innerJoin('students_going','sg','s.uid=sg.uid');
		$query->condition('s.uid',$row[0])->condition('sg.eid',$eid)->isNotNull('sg.gid');
		$r=$query->countQuery()->execute()->fetchField();
		if($r==0) { // No such student
			form_set_error('score', t('There is no such student !uid.', array('!uid'=>$row[0])));
		} else {
			$scoretype=$form_values['scoretype'];
			$caninsert=db_select('students_score','sc')->fields('sc')
				->condition('sc.uid',$row[0])->condition('sc.eid',$eid)->isNotNull('sc.'.$scoretype)->countQuery()->execute()->fetchField();
			if($caninsert==0) { // Ready to insert
				if(!is_numeric(trim($row[count($row)-1]))) { // The last entry is not numeric
					form_set_error('score', t('The score of student !uid: !score is not valid.', array('!uid'=>$row[0], '!score'=>$row[count($row)-1])));
				}
				if($form_values['scoretype']=='rank') {
					if(floatval(trim($row[count($row)-1])) < 1)
						form_set_error('score', t('The score of student !uid: !score is not valid.', array('!uid'=>$row[0], '!score'=>$row[count($row)-1])));
				}
				else if(floatval(trim($row[count($row)-1])) < 0 || floatval(trim($row[count($row)-1])) > 100)
					form_set_error('score', t('The score of student !uid: !score is not valid.', array('!uid'=>$row[0], '!score'=>$row[count($row)-1])));
			} else { // The score of the student have been imported already.
				form_set_error('score', t('The score of student !uid has been already imported.', array('!uid'=>$row[0])));
			}
		}
	}
}

function score_mark_2nd_round_list() {
	global $user;
	$output='<p>'.t('The following professions are decided by your deparment. You can now select who will be enrolled into second round one by one.').'</p>';
	$output.='<dl>';
	$query=db_select('vl_professions','p')->fields('p')->condition('p.uid',$user->name)->condition('p.allow_round1','1');
	$result=$query->execute();
	foreach($result as $r) {
		$students=db_select('students','s')->fields('s')
			->condition('s.validated','1')->condition('s.profession_major',$r->pid)->countQuery()->execute()->fetchField();
		if($students==0) continue;
		if(!score_mark_2nd_round_check($r->pid)) continue;
		$output .= '<dt>';
		$output .= l($r->pname,'signup/markround2/'.$r->pid);
		$output .= '</dt><dd>';
		$output .= t('There are !num students in total.', array('!num'=>$students));
		$output .='</dd>';
	}
	$output.='</dl>';
	return $output;
}

function score_mark_2nd_round_list_check() {
	global $user;
	$query=db_select('students','s')->condition('s.validated','1');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->condition('p.uid',$user->name)->groupBy('p.uid');
	$query->addExpression('MAX(allow_round1)','num');
	$can_students=$query->execute()->fetchField();

	return (user_access('mark 2nd round students') && $can_students);
}

function score_mark_2nd_round_check($pid) {
	global $user;
	$query=db_select('students','s')->fields('s')->condition('s.validated','1')->condition('s.profession_major',$pid);
	$can_students=$query->countQuery()->execute()->fetchField();
	
	$query=db_select('vl_professions','p')->fields('p')->condition('p.pid',$pid)->condition('p.uid',$user->name)->condition('p.allow_round1','1');
	$can_prof=$query->countQuery()->execute()->fetchField();
	
	return ($can_students>=1 && $can_prof==1);
}

function score_mark_2nd_round($form, $form_state, $pid) {
	global $user;
	$prof=db_select('vl_professions','p')->condition('p.pid',$pid)->fields('p',array('pname'))->execute()->fetchField();
	drupal_set_title(t('Mark round 2 students').' - '.$prof);
	drupal_add_css(drupal_get_path('module', 'going') .'/going.css');

	$form=array();
	
	$header=array(
		'order'=>array('data'=>t('No.')),
		'uid'=>array('data'=>t('Student ID')),
		'name'=>array('data'=>t('Real Name')),
		'gender'=>array('data'=>t('Gender')),
		'keyword'=>array('data'=>t('Sorting keyword')),
	);
	
	$sortorders=_score_mark_2nd_round_determine_best_sortorder($pid);
	$a=array_keys($sortorders);
	$saint_default_sort=isset($form_state['values']['sortorder'])?$form_state['values']['sortorder']:$a[0];
	unset($a);
	$form['sortorder']=array(
		'#id' => 'sortorder',
		'#type' => 'select',
		'#title' => t('Sort Order'),
		'#prefix' => '<p/><div class="container-inline">',
		'#options' => $sortorders,
		'#default_value' => $saint_default_sort,
	);
	$options=array();
	$examplaces=_score_mark_2nd_round_enabled_examplace($pid);
	foreach($examplaces as $examplace) {
		$options[$examplace]=db_select('vl_city_district','cd')
			->condition('cd.cid',$examplace)->fields('cd',array('name_simp'))->execute()->fetchField();
	}
	
	// Test if we have marked enough examplace
	$saint_default_place=isset($form_state['values']['examplace'])?$form_state['values']['examplace']:((count($options)==1&&$examplace!=='110000')?$examplace:'110000');
	if(count($options)==0) $saint_default_place='000000';
	if(count($options)>1 || (count($options)==1&&$examplace!='110000')) {
		$form['examplace'] = array(
			'#type' => 'select',
			'#title' => t('Exam Place'),
			'#options' => $options,
			'#prefix' => '&nbsp;&nbsp;&nbsp;',
			'#default_value' => $saint_default_place,
		);
	}

	$form['redraw']=array(
		'#type' => 'button',
		'#value' => t('Update'),
		'#prefix' => '&nbsp;&nbsp;&nbsp;',
		'#suffix'=> '</div><p/>',
		'#validate' => array(),
		'#submit' => array('score_mark_2nd_round_redraw'),
	);
	
	$query=db_select('students_passthrough','sp')->condition('sp.pid',$pid);
	$query->innerJoin('students','s','sp.idcard_number=s.idcard_number');
	$query=$query->fields('s');
	$num=$query->countQuery()->execute()->fetchField();
	if($num > 0)
		$form['pass_through']=array(
			'#markup' => '<div class="messages">'.t('There are !num extra passed through students also.',array('!num'=>$num)).'</div>',
		);
	
	$query=db_select('students','s')->fields('s',array('uid','name','gender'))->condition('s.profession_major',$pid)->groupBy('s.uid');
	$query->innerJoin('students_going','sg','s.uid=sg.uid');
	$query=$query->isNotNull('sg.gid');

	// Step 1, filter examplace
	$query=$query->condition('s.examplace',$saint_default_place);
	
	// Step 2, filter sortorder
	$exams = unserialize(db_select('vl_professions','p')->fields('p',array('exams'))->condition('p.pid',$pid)->execute()->fetchField());
	switch($saint_default_sort) {
		case 's': // sort by score
			$header['keyword']['data']=t('Total score');
			ksort($exams);
			$total_score=array();
			foreach($exams as $eid=>$weight){
				if(substr($eid,0,1)!='1') break; 
				if(floatval($weight) == 0 ) continue;
				$query->innerJoin('students_score','e'.$eid,'e'.$eid.'.uid=s.uid');
				$query=$query->condition('e'.$eid.'.eid', $eid);
				$total_score[]='e'.$eid.'.score*'.$weight;
			}
			$query->addExpression(implode('+',$total_score), 'total_score');
			$query=$query->orderBy('total_score', 'DESC')->orderBy('s.uid');
			break;
		
		case 'o': // sort by gorder
			$header['keyword']['data']=t('Going order');
			krsort($exams);
			foreach($exams as $eid=>$weight){
				if(substr($eid,0,1)!=1) continue;
				if(db_select('vl_exam','e')->condition('e.eid',$eid)->fields('e',array('etype'))->execute()->fetchField()==2) break;
			}
			$query=$query->fields('sg',array('gid','gorder'))->condition('sg.eid',$eid)->orderBy('sg.gid')->orderBy('sg.gorder')->orderBy('s.uid');
			break;
		case 'u': // sort by student id
			unset($header['keyword']);
			$query->orderBy('s.uid');
	}
	$results=$query->execute();
	$options=array();
	$i=1;
	foreach($results as $r) {
		$options[$r->uid]=array(
			'order'=>$i++,
			'uid'=>$r->uid,
			'name'=>$r->name,
			'gender'=>$r->gender==1?t('Male'):t('Female'),
		);
		switch($saint_default_sort) {
			case 's':
				$options[$r->uid]['keyword']=$r->total_score;
				break;
			case 'o':
				$options[$r->uid]['keyword']=$r->gorder;
				break;
		}
	}
	$form['students']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $options,
			'#attributes' => array('class'=>array('assign_students')),
			'#empty' => t('No suitable students in current condition.'),
			'#after_build' => array('_score_mark_2nd_round_students_force'),
	);
	if(count($options)>0)
		$form['submit']=array(
			'#type' => 'submit',
			'#value' => t('Save'),
			'#prefix' => '<p>',
			'#suffix' => '</p>',
		);
	return $form;
}

function score_mark_2nd_round_redraw($form, &$form_state) {
	$form_state['rebuild']=TRUE;
}

function _score_mark_2nd_round_determine_best_sortorder($pid=NULL) {
	$exams = unserialize(db_select('vl_professions','p')->fields('p',array('exams'))->condition('p.pid',$pid)->execute()->fetchField());
	ksort($exams);
	$result=array();
	
	// Step 1, if we can sort by total scores, i.e., at least one exam takes weight in total_score
	foreach($exams as $eid=>$weight){
		if(floatval($weight)>0) break;
	}
	if(substr($eid,0,1)==1) $result['s'] = t('By total score, from top to bottom');
	
	// Step 2, if we can sort by going order, i.e, at least one exam typed interview
	foreach($exams as $eid=>$weight){
		if(db_select('vl_exam','e')->condition('e.eid',$eid)->fields('e',array('etype'))->execute()->fetchField()==2) break;
	}
	if(substr($eid,0,1)==1) $result['o'] = t('By going order, from first to last');
	
	// Step 3, we always could sort it via student ID
	$result['u'] = t('By Student ID, from small to big');
	
	return $result;
	
}

function _score_mark_2nd_round_students_force($form_element, &$form_values) {
	$query=db_select('students','s')->fields('s',array('uid'))->condition('s.profession_major',arg(2));
	$query->innerJoin('students_passthrough','sp','s.idcard_number=sp.idcard_number');
	$result=$query->execute();
	foreach($result as $r) {
		if(!isset($form_element[$r->uid])) continue;
		$form_element[$r->uid]['#value']=TRUE;
		$form_element[$r->uid]['#checked']=TRUE;
		$form_element[$r->uid]['#attributes']['disabled']=TRUE;
		$form_values['values']['students'][$r->uid]=TRUE;
	}
		return $form_element;
}

/*
 	If examplace set, return TRUE of FALSE if the place should be avaliable.
 	If not set, return array of avaliable examplace.
*/
function _score_mark_2nd_round_enabled_examplace($pid, $examplace=NULL) {
	$query=db_select('students','s')->fields('s',array('examplace'))->condition('s.profession_major',$pid)->groupBy('s.examplace');
	$subquery=db_select('students_passthrough','sp')->where('s.idcard_number=sp.idcard_number')->fields('sp');
	$query->notExists($subquery);
	$query->addExpression('MAX(s.pass_round1_major)','num');
	$output=array();
	$result=$query->execute();
	foreach($result as $r) {
		if($r->num==0)
			$output[]=$r->examplace;
	}
	if(isset($examplace) && !is_null($examplace)) {
		return in_array($examplace, $output);
	} else
		return $output;
}

function score_mark_2nd_round_validate($form, &$form_state) {
	$form_values = array_filter($form_state['values']['students']);
	if (count($form_values) == 0) {
		form_set_error('students', t('No students selected.'));
	}
}

function score_mark_2nd_round_submit($form, &$form_state) {
	global $user;
	$form_values = array_keys(array_filter($form_state['values']['students']));
	$prof=db_select('vl_professions','p')->condition('p.pid',arg(2))->fields('p',array('pname'))->execute()->fetchField();
	foreach($form_values as $student) {
		db_update('students')->fields(array(
				'pass_round1_major'=>1
		))->condition('uid',$student)
		->execute();
		if(module_exists('onlinecharge')) {
			for($i=2;$i<=3;$i++) {
				$query=db_select('orders','o')->fields('o');
				$query->innerJoin('users','u','o.uid=u.uid');
				$query->condition('u.name',$student);
				$query->innerJoin('vl_charging_standard','sc','sc.scid=o.standard');
				$query->condition('sc.period',$i);
				if($query->countQuery()->execute()->fetchField()==0) {
					$uid=db_select('users','u')->condition('u.name',$student)->fields('u',array('uid'))->execute()->fetchField();
					$localuser=user_load($uid);
					$fee=db_select('vl_charging_standard','sc')->condition('sc.period',$i)->condition('sc.ucategory',$localuser->ucategory)->fields('sc')->execute()->fetchObject();
					if($fee->fee<=0) continue;
					db_insert('orders')->fields(array(
						'uid' => $localuser->uid,
						'orderno' => onlinecharge_generate_random_orderno(),
						'ordertime' => time(),
						'standard' => $fee->scid,
						'ordertitle' => $fee->title,
						'amount' => $fee->fee,
						'gateway' => NULL,
						'gatewaytransactionno' => NULL,
						'status' => 0,
					))->execute();
				}
			}
		}
	}
	
	drupal_set_message(
		t('!num !prof students have been enrolled into the 2nd round examiniation.', array(
			'!num'=>count($form_values), '!prof'=>$prof)));
	watchdog('score',
		'!num !prof students have been enrolled into the 2nd round examiniation.', array(
			'!num'=>count($form_values),
			'!prof'=>$prof),
		WATCHDOG_INFO);

	if(count(_score_mark_2nd_round_enabled_examplace(arg(2)))==0) {
		db_update('vl_professions')->fields(array(
				'allow_round1'=>0
		))->condition('pid',arg(2))
		->execute();
		$form_state['redirect']='signup/2ndround/profession/'.arg(2);
	} else 
		$form_state['redirect']='signup/markround2';
}

function score_transfer_list_check() {
	$query=db_select('students_going','sg')->isNotNull('sg.gid')->fields('sg');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	$query->condition('e.uid',$GLOBALS['user']->name);
	$r=$query->countQuery()->execute()->fetchField();
	if($r==0) return FALSE;
	$query=db_select('vl_professions','p')->condition('p.uid',$GLOBALS['user']->name)->groupBy('p.exams');
	$query->addExpression('count(pid)','pid_count');
	$query=db_select($query,'pcount');
	$query->addExpression('MAX(pid_count)','num');
	$r=$query->execute()->fetchField();
	return ($r>1) && user_access('mark 2nd round students') || ($GLOBALS['user']->uid==1);
}

function score_transfer_list() {
	global $user;
	$output='<dl>';
	$query=db_select('vl_going','g')->fields('g')->orderBy('g.time')->groupBy('g.gid');
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$query->fields('r',array('rname'));
	$query->innerJoin('students_going','sg','sg.gid=g.gid');
	$query->innerJoin('vl_exam','e','e.eid=sg.eid');
	$query->condition('e.uid',$user->name);
	
	$result=$query->execute();
	foreach($result as $r) {
		$output.='<dt>';
		$output.=l($r->gname, "signup/transfer/$r->gid");
		$output.='</dt>';
		$output.=sprintf('<dd>%s / %s </dd>', $r->rname, _going_datetime_to_string($r->time));
	}
	$output.='</dl>';
	return $output;
}

function score_transfer_check($gid) {
	global $user;
	$query=db_select('vl_going','g')->condition('g.gid',$gid);
	$query->innerJoin('students_going','sg','sg.gid=g.gid');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	$query->groupBy('e.uid');
	$query->fields('e',array('uid'));
	if($query->countQuery()->execute()->fetchField()!=1 || $query->execute()->fetchField()!=$user->name)
		return FALSE;
	else
		return TRUE;
}

function score_transfer($form, $form_state, $gid) {
	global $user;
	drupal_set_title(t('Transfer students').' - '.db_select('vl_going','g')->condition('g.gid',$gid)->fields('g',array('gname'))->execute()->fetchField());
	$form=array();
	
	$header=array(
		'gorder'=>array('data'=>t('No.'),'field'=>'sg.gorder'),
		'uid'=>array('data'=>t('Student ID'), 'field'=>'s.uid'),
		'name'=>array('data'=>t('Real Name')),
		'gender'=>array('data'=>t('Gender'), 'field'=>'s.gender'),
		'pname'=>array('data'=>t('Current Profession'), 'field'=>'p.pid'),
	);
	
	$query=db_select('vl_going','g')->condition('g.gid',$gid)->fields('g');
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$query->fields('r',array('rname'));
	$g_info=$query->execute()->fetchObject();
	
	$query->innerJoin('students_going','sg','sg.gid=g.gid');
	$query->innerJoin('vl_exam','e','e.eid=sg.eid');
	$query->fields('e',array('eid'))->groupBy('e.eid');
	$query->addExpression("CONCAT_WS('',e.ename,e.elevel)",'ename');
	$exams=$query->execute()->fetchAll();
	foreach($exams as $r) {
		$header['e'.$r->eid]=array('data'=>$r->ename, 'field'=>'e'.$r->eid, 'sort'=>'desc');
	}
	
	$squery=db_select('students_going','sg')->condition('sg.gid',$gid);
	$squery->innerJoin('students','s','s.uid=sg.uid');
	$squery->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$squery->fields('s',array('uid','name','gender'))->fields('sg',array('gorder'))->fields('p',array('pname'));
	$t=$squery->execute()->rowCount();
	foreach($exams as $r) {
		$query=db_select('students_going','sg')->condition('sg.gid',$gid);
		$query->innerJoin('students','s','s.uid=sg.uid');
		$query->fields('s',array('uid','name','gender'));
		$query->innerJoin('students_score','e'.$r->eid,'e'.$r->eid.'.uid=s.uid');
		$query->condition('e'.$r->eid.'.eid',$r->eid);
		$query->addExpression('e'.$r->eid.'.score','e'.$r->eid);
		if($t!=$query->execute()->rowCount())
			unset($header['e'.$r->eid]);
		else {
			$squery->innerJoin('students_score','e'.$r->eid,'e'.$r->eid.'.uid=s.uid');
			$squery->condition('e'.$r->eid.'.eid',$r->eid);
			$squery->addExpression('CAST(e'.$r->eid.'.score as DECIMAL)','e'.$r->eid);
		}
	}
	
	$squery->extend('TableSort')->orderByHeader($header);
	$students=$squery->execute()->fetchAll();
	$options=array();
	foreach($students as $r) {
		foreach(array_keys($header) as $item) {
			if(isset($r->$item))
				$options[$r->uid][$item]=$r->$item;
			if($item=='gender')
				$options[$r->uid][$item]=($r->gender==2?t('Female'):t('Male'));
		}
		
	}
	
	if(count($header)==5) {
		$header['gorder']['sort']='asc';
	}
	
	$form['desc']=array(
		'#markup' => '<div class="messages">'.sprintf('%s / %s / %s', $g_info->gname, $g_info->rname, _going_datetime_to_string($g_info->time)).'</div>',
	);
	
	$form['students']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $options,
			'#attributes' => array('class'=>array('assign_students')),
			'#empty' => t('No students to operate.'),
	);
	
	$profs=db_select('vl_professions','p')->condition('p.uid',$user->name)->condition('p.enabled',0,'<>')
		->orderBy('p.pid')->fields('p',array('pid','pname'))->execute()->fetchAllKeyed();
	$form['targetprof']=array(
		'#type' => 'select',
		'#title'=>t('The target profession of selected students is'),
		'#options'=>$profs,
		'#attributes' => array('class'=>'inline-element'),
		'#prefix'=>'<p/><div class="container-inline">',
	);
	
	$form['submit']=array(
		'#type'=>'submit',
		'#value'=>t('Save'),
		'#prefix'=>'&nbsp;&nbsp;&nbsp;',
		'#suffix'=>'</div>',
	);
	
	return $form;
}

function score_transfer_validate($form, &$form_state) {
	// Check if at least one of the exam has been selected.
	$form_values = array_filter($form_state['values']['students']);
	if(count($form_values)<=0) {
		form_set_error('students', t('No students selected.'));
	}
	foreach($form_values as $uid=>$u) {
		$r=db_select('vl_professions','p')->fields('p',array('pname','extracondition'))->condition('p.pid',$form_state['values']['targetprof'])->execute()->fetchObject();
		if($r->extracondition) {
			$count=db_select('students','s')->fields('s')->where($r->extracondition)->condition('uid',$uid)->countQuery()->execute()->fetchField();
			if($count==0) {
				form_set_error('students', t('!uid student does not comply the citera of !prof profession.', array(
					'!uid'=>$uid,
					'!prof'=>$r->pname,
				)));
				return;
			}
		}
	}
}

function score_transfer_submit($form, &$form_state) {
	$form_values=$form_state['values'];
	$students=$form_values['students'];
	$students=array_filter($students);
	$prof_new=db_select('vl_professions','p')->condition('p.pid',$form_values['targetprof'])->fields('p',array('pname'))->execute()->fetchField();
	foreach($students as $uid=>$u) {
			db_update('students')->fields(array(
					'profession_major'=>$form_values['targetprof']
			))->condition('uid',$uid)
			->execute();
	}
	drupal_set_message(t('!num students have been transfered into !prof_new profession.', array('!num'=>count($students), '!prof_new'=>$prof_new)));
	watchdog('score',
		'!num students have been transfered into !prof_new profession.', array(
			'!num'=>count($students),
			'!prof_new'=>$prof_new
	));
	$form_state['redirect']='signup/transfer';
}

function score_view_admin() {
	$form=array();
	
	// Fetch all exams at first
	$query=db_select('vl_exam','e')->fields('e',array('eid'));
	$query->addExpression("CONCAT_WS('', e.ename, e.elevel)", 'exam');
	$query->innerJoin('vl_research_sec','r','e.uid=r.uid');
	$query->fields('r',array('uid','rname'));
	$rdbo=$query->execute();
	$exams=array();
	$weight=array();
	$st=array();
	$rows=array();
	foreach($rdbo as $r) {
		$exams[]=$r;
	}
	
	$rdbo=db_select('vl_professions','p')->fields('p',array('exams'))->execute();
	foreach($rdbo as $r) {
		$t=unserialize($r->exams);
		foreach($t as $eid=>$w)
			$weight[$eid]=array_key_exists($eid, $weight)?$weight[$eid]+$w:$w;
	}
	
	$header=array(
		array('data'=>t('Examination')),
		array('data'=>t('Status')),
	);
	
	$form['score_admin']=array(
		'#type' => 'vertical_tabs',
	);
	foreach($exams as $exam) {
		if(empty($weight[$exam->eid])) continue;
		
		if(db_select('students_going','g')->condition('eid',$exam->eid)->isNotNull('gid')->fields('g')->countQuery()->execute()->fetchField()==0) continue;
		
		$query=db_select('students_score','c')->condition('c.eid', $exam->eid);
		$num=$query->fields('c')->countQuery()->execute()->fetchField();
		$query=db_select('students_score','c')->condition('c.eid', $exam->eid)->where('CAST(c.score AS DECIMAL)>0');
		$query->addExpression('AVG(c.score)');
		$st[$exam->eid]=$query->execute()->fetchField();
		if(!isset($st[$exam->uid])) $st[$exam->uid]=1;
		$st[$exam->uid]*=$st[$exam->eid];
		$rows[$exam->uid][]=array(
			$num?l($exam->exam, 'score/view/'.$exam->eid):$exam->exam,
			$st[$exam->eid]?t('The average score of this exam is !num',array('!num'=>sprintf('%.2f',$st[$exam->eid]))):t('Not Uploaded yet'),
		);
		unset($form[$exam->uid][$exam->eid]);
		$output[$exam->uid]=theme('table', array('header'=>$header, 'rows'=>$rows[$exam->uid]));
		if(!isset($form[$exam->uid]) && count($rows[$exam->uid])) {
			$form[$exam->uid]=array(
				'#type'=>'fieldset',
				'#title'=>$exam->rname,
				'#collapsible'=>TRUE,
				'#group'=>'score_admin',
			);
		}
		$form[$exam->uid][$exam->uid]=array('#markup'=>$output[$exam->uid]);
	}
	
	foreach(array_keys($rows) as $key) {
		$output[$key]=theme('table', array('header'=>$header, 'rows'=>$rows[$key]));
		$form[$key][$key]=array('#markup'=>$output[$key]);
		if(count($rows[$key])==0) unset($form[$key]);
	}
	

	$rdbo=db_select('vl_research_sec','r')->fields('r')->execute();
	foreach($rdbo as $r) {
		if(array_key_exists($r->uid, $st)|| empty($st[$r->uid]))
			$form[$r->uid]['#collapsed'] = TRUE;
		else $form[$r->uid]['#collapsed'] = FALSE;
	}
	
	return $form;
}

function score_view_detail($eid) {
	$query=db_select('vl_exam','e')->condition('eid',$eid);
	$query->addExpression("CONCAT_WS('',e.ename,e.elevel)");
	drupal_set_title(t('View Scores').' - '.$query->execute()->fetchField());
	$header = array(
		array('data'=>t('No.')),
		array('data' =>t('Student ID'), 'field'=>'s.uid'),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Profession'), 'field'=>'s.profession_major'),
		array('data' =>t('Score'), 'field'=>'score_real', 'sort'=>'desc'),
	array('data' =>t('Rank'), 'field'=>'rank', 'sort'=>'asc'),
	);

	$query=db_select('students_score','c')->fields('c',array('rank'))->condition('eid',$eid)->orderBy('c.rank','desc')->condition('c.rank','1','<>');
	$should_show_rank=$query->execute()->fetchField()?1:0;

	if(!$should_show_rank) {
		 unset($header[count($header)-1]);
	} else {
		 unset($header[count($header)-2]['sort']);
	}

	$query=db_select('students','s');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('students_score','c','s.uid=c.uid');
	$query->condition('c.eid',$eid)->fields('s',array('uid','name','gender'))->fields('p',array('pname'));
	$query->addExpression('c.score*1.0','score_real');
	$query->addExpression('u.uid','uuid');
	$query->addExpression('ifnull(c.rank,9999)*1','rank');
	$query->extend('TableSort')->orderByHeader($header)->orderBy('score_real','desc');
	
	$rdbo=$query->execute();
	$i=1;
	foreach($rdbo as $r) {
		$rows[] = array(
			$i++,
			'<nobr>'.l($r->uid, 'user/'.$r->uuid).'</nobr>',
			'<nobr>'.$r->name.'</nobr>',
			$r->gender == 1 ? t('Male'): t('Female'),
			$r->pname,
			($r->score_real===NULL)?'':sprintf("%.2f", $r->score_real),
		);
		if($should_show_rank) $r->rank==9999?'':$rows[count($rows)-1][]=$r->rank;
	}

	return theme('table', array('header'=>$header, 'rows'=>$rows));
}

function score_prepare_3rd_overview() {
	$header=array(
		array('data'=>t('Profession'), 'field'=>'p.pid', 'sort'=>'asc'),
		array('data'=>t('People (%)'), 'field'=>'num'),
	);
	
	$total_students=db_select('students','s')->fields('s')->condition('s.pass_round1_major',1)->countQuery()->execute()->fetchField();
	$query=db_select('students','s')->condition('s.pass_round1_major',1);
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->fields('p',array('pid','pname'))->groupBy('p.pid')->extend('TableSort')->orderByHeader($header);
	$query->addExpression('count(*)','num');
	$rdbo=$query->execute();
	$rows=array();
	foreach($rdbo as $r)
		$rows[]=array(
			l($r->pname, 'score/prepare3rd/'.$r->pid),
			sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
		);
	
	$output = t('There are currently !num students marked as being enrolled into the 2nd round examination.', array('!num'=>$total_students));
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	return $output;
}

function score_prepare_3rd_detail($prof=NULL) {
	drupal_add_css(
		'div#sidebar-left { display: none; } '.
		'.one-sidebar div#content { width: 95%; } ',
		array('type' => 'inline')
	);
	$profession=db_select('vl_professions','p')->condition('pid',$prof)->fields('p')->execute()->fetchObject();
	$profession_exams = unserialize($profession->exams);
	drupal_set_title(t('Prepare for the 3rd round students').' - '.$profession->pname);
	$output = '<div class=\'messages\'>';
	$output .= '<p>'.t('The enrollment plan of the profession is !num.',array('!num'=>$profession->plan));
	$tmp = $profession->memo;
	if (!is_null($tmp) && strlen($tmp) != 0)
		$output .= $tmp;
	$output .= '</p>';
	$output .= '<p>'.t('The formula used to generate the result is:').'</p><blockquote>';
	ksort($profession_exams);
	$edata='';
	foreach($profession_exams as $eid => $eweight){
		$exam = db_select('vl_exam','e')->condition('e.eid',$eid)->fields('e')->execute()->fetchObject();
		if ($eweight)
			$edata .= $exam->ename.$exam->elevel.'&times;'.sprintf('%d%%',$eweight*100).'+';
	}
	$output .= substr($edata, 0, strlen($edata)-1);
	$output .= '</blockquote></div>';

	
	$header=array(
		array('data'=>t('No.')),
		array('data'=>t('Student ID'), 'field'=>'s.uid'),
		array('data'=>t('Real Name')),
		array('data'=>' '),
		array('data'=>t('Gender')),
	);
	
	foreach($profession_exams as $eid => $eweight) {
		if($eweight!=0||substr($eid,0,1)=='3') {
			$query=db_select('vl_exam','e')->condition('e.eid',$eid);
			$query->addExpression('CONCAT(ename, IFNULL(elevel, \'\'))','ename');
			$header[]=array('data'=>$query->execute()->fetchField());
			if(in_array($eid, array(321,322,323,324))) {
				$header[count($header)-1]['data'].='<br/>(';
				$query=db_select('vl_exam','e')->condition('e.eid',str_replace('32','30',$eid));
				$query->addExpression('CONCAT(ename, IFNULL(elevel, \'\'))','ename');
				$header[count($header)-1]['data'].=$query->execute()->fetchField();
				$header[count($header)-1]['data'].='/';
				$query=db_select('vl_exam','e')->condition('e.eid',str_replace('32','31',$eid));
				$query->addExpression('CONCAT(ename, IFNULL(elevel, \'\'))','ename');
				$header[count($header)-1]['data'].=$query->execute()->fetchField();
				$header[count($header)-1]['data'].=')';
			}
		}
	}
		
	if(in_array(substr($prof,0,2),array('D5','D6','D7','D8'))) {
		if(in_array(substr($prof,0,2),array('D5','D6','D8')))
			$header[]=array('data'=>t('Total score'));
		$header[]=array('data'=>t('Total average rank'), 'field'=>'totsort', 'sort'=>'desc');
	} else {
		$header[]=array('data'=>t('Total score'), 'field'=>'total_score', 'sort'=>'desc');
	}
	$header[]=array('data' =>t('Personnel record'), 'field'=>'sc.personnel_record_at');

	$rows=array();
	
	$query=db_select('students','s')->fields('s',array('uid','ucategory','name','gender','profession_major'));
	// FIXME: HACK FOR CELLA
	if($prof=='D603' || $prof=='D604' || $prof=='D716' || $prof=='D717') {
		$query->condition('s.pass_round1_major',1);
		$squery=db_select('students_total_score','sts')->fields('sts',array('total_score'))->condition('sts.pid',$prof)->where('sts.uid=s.uid');
		$query->exists($squery);
	} else {
		$query->condition('s.profession_major',$prof)->condition('s.pass_round1_major',1);
	}
	// FIXME: HACK FOR CELLA
	$query->innerJoin('students_contact','sc','s.uid=sc.uid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->fields('sc',array('personnel_record_at'));
	$query->addExpression('u.uid','uuid');
	
	$totals=array();
	$totals_r=array();
	foreach($profession_exams as $eid=>$weight) {
		if(substr($eid,0,1)=='3') {
			$neid='e'.$eid;
			$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
			$query->addExpression("$neid.score",$neid);

			if($eid<>'350') {
				$neid='e'.str_replace('32','30',$eid);
				$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
				$query->addExpression("$neid.score",$neid);

				$neid='e'.str_replace('32','31',$eid);
				$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
				$query->addExpression("$neid.score",$neid);
			}
		}
		if($weight!=0 && substr($eid,0,1)!='3') {
			$neid='e'.$eid;
			$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
			$query->addExpression("$neid.score",$neid);

			if(!in_array(substr($prof,0,2),array('D5','D6','D7','D8'))) continue;
			$neid='r'.$eid;
			$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
			$query->addExpression("$neid.rank",$neid);
		}
	}
	$query->leftJoin('students_total_score','ts','s.uid=ts.uid');
	$query->condition('ts.pid',$prof);
	$query->addExpression('ts.total_score','total_score');
	if(in_array(substr($prof,0,2),array('D5','D6','D7','D8')))
	{
		$query->addExpression('ts.total_rank','total_rank');
		$query->addExpression('ts.rank','tsrank');
		$query->addExpression('(100000-ts.total_rank)*100000+ts.total_score','totsort');
	}
	
	$query->extend('TableSort')->orderByHeader($header);
	$rdbo=$query->execute();
	$i=1;
	while($r=$rdbo->fetchAssoc()) {
		// FIXME: HACKAGE FOR CELLA
		if($prof=='D603' || $prof=='D604' || $prof=='D716' || $prof=='D717') {
			if($r['total_score']==0) continue;
		}
		// FIXME: HACKAGE FOR CELLA
		$rows[]=array(
			(isset($r['tsrank'])&&$r['tsrank']!=999)?$r['tsrank']:$i,
			l($r['uid'], 'user/'.$r['uuid']),
			$r['name'],
			'',
			$r['gender'] == 1 ? t('Male'): t('Female')
		);
		$i++;
		foreach($profession_exams as $eid=>$weight) {
			if($weight!=0||substr($eid,0,1)=='3') {
				if(isset($r['totsort']) && substr($eid,0,1)!='3')
					$rows[count($rows)-1][]=number_format($r['r'.$eid], 2, '.' ,'');
				else
					$rows[count($rows)-1][]=($eid=='350')?$r['e'.$eid]:(($r['e'.$eid]==NULL)?('0.00'):(number_format($r['e'.$eid], 2, '.', '')));
				if(in_array($eid, array(321,322,323,324)) && $r['e'.$eid]) {
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].='(';
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].=number_format(db_select('students_score','sc')->fields('sc',array('score'))->condition('eid',str_replace('32','30',$eid))->condition('uid',$r['uid'])->execute()->fetchField(),1);
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].='/';
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].=number_format(db_select('students_score','sc')->fields('sc',array('score'))->condition('eid',str_replace('32','31',$eid))->condition('uid',$r['uid'])->execute()->fetchField(),2);
					$rows[count($rows)-1][count($rows[count($rows)-1])-1].=')';
				}
			}
		}
		if(!in_array(substr($prof,0,2),array('D7')))
			$rows[count($rows)-1][]=number_format($r['total_score'], 2, '.' ,'');
		if(in_array(substr($prof,0,2),array('D5','D6','D7','D8'))) {
			$rows[count($rows)-1][]=round($r['total_rank'], 2);
		}
		if($r['profession_major']!==$prof)
			$rows[count($rows)-1][]='* '.t('This is a secondary profession student');
		else
			$rows[count($rows)-1][]=$r['ucategory']!='1'?db_select('vl_student_type','st')->condition('st.stid',$r['ucategory'])->fields('st',array('name'))->execute()->fetchField():$r['personnel_record_at'];
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No students to display.')));
	return $output;
}

function score_mark_3rd_round_list_check() {
	$r=db_select('students','s')->condition('pass_round1_major',0,'>')->fields('s')->countQuery()->execute()->fetchField();
	return user_access('mark 3rd round students') && $r;
}

function score_mark_3rd_round_list() {
	$header=array(
		array('data'=>t('Department')),
		array('data'=>t('Profession')),
		array('data'=>t('Mainland students (In/Out)')),
		array('data'=>t('Students out of mainland (In/Out)')),
	);

	$rows=array();
	$query=db_select('vl_professions','p')->fields('p',array('pid','pname','did'))->orderBy('p.pid');
	$query->innerJoin('vl_department','d','p.did=d.did');
	$query->fields('d',array('dname'));
	$subquery=db_select('students','s')->fields('s')->condition('s.pass_round1_major',1)->where('s.profession_major=p.pid');
	$query->exists($subquery);
	$rdbo=$query->execute();
	
	$tot_mainland_in=0;
	$tot_mainland_out=0;
	$tot_outmainland_in=0;
	$tot_outmainland_out=0;
	while($r=$rdbo->fetchObject())
	{
		$did=$r->did;
		$mainland_in=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1)->condition('s.pass_round3_major',10)->fields('s')->countQuery()->execute()->fetchField();
		$mainland_out=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1)->condition('s.pass_round3_major',1)->fields('s')->countQuery()->execute()->fetchField();
		$outmainland_in=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1,'<>')->condition('s.pass_round3_major',10)->fields('s')->countQuery()->execute()->fetchField();
		$outmainland_out=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1,'<>')->condition('s.pass_round3_major',1)->fields('s')->countQuery()->execute()->fetchField();
		$rows[]=array(
			$r->dname,
			l($r->pname, 'signup/markround3/'.$r->pid),
			$mainland_in.' / '.$mainland_out,
			$outmainland_in.' / '.$outmainland_out,
		);
		$tot_mainland_in+=$mainland_in;
		$tot_mainland_out+=$mainland_out;
		$tot_outmainland_in+=$outmainland_in;
		$tot_outmainland_out+=$outmainland_out;
	}
	$output = t('There are !num mainland students marked as being determined enrolled into round3, while !num_2 marked as to be determined.',array(
		'!num'=>db_select('students','s')->fields('s')->condition('s.ucategory',1)->condition('s.pass_round3_major',10)->countQuery()->execute()->fetchField(),
		'!num_2'=>db_select('students','s')->fields('s')->condition('s.ucategory',1)->condition('s.pass_round3_major',1)->countQuery()->execute()->fetchField(),
	));
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));

	return $output;
}

function score_mark_3rd_round_check($pid=NULL) {
	global $user;
	$query=db_select('students','s')->condition('pass_round1_major',0,'>')->fields('s');
	if($pid)
		$query->condition('s.profession_major',$pid);
	$r=$query->countQuery()->execute()->fetchField();
	return user_access('mark 3rd round students') && $r && $user->uid==3 || $user->uid==1;
}

function score_mark_3rd_round($form, $form_state, $prof) {
	drupal_set_title(t('Mark the 3rd round student').' -  '.db_select('vl_professions','p')->condition('p.pid',$prof)->fields('p',array('pname'))->execute()->fetchField());
	$profession=db_select('vl_professions','p')->condition('pid',$prof)->fields('p')->execute()->fetchObject();
	drupal_add_css(drupal_get_path('module', 'going') .'/going.css');
		$profession_exams = unserialize($profession->exams);

	$header=array(
		array('data'=>t('No.')),
		array('data'=>t('Student ID'), 'field'=>'s.uid'),
		array('data'=>t('Real Name')),
		array('data'=>t('Gender'), 'field'=>'s.gender'),
		array('data'=>t('Current status'),'field'=>'s.pass_round3_major'),
	);
	
		foreach($profession_exams as $eid => $eweight) {
		if($eweight!=0||substr($eid,0,1)=='3') {
			$query=db_select('vl_exam','e')->condition('e.eid',$eid);
			$query->addExpression('CONCAT(ename, IFNULL(elevel, \'\'))','ename');
		}
		}
		
		if(in_array(substr($prof,0,2),array('D5','D6','D7','D8'))) {
		$header[]=array('data'=>t('Total score'), 'field'=>'rank', 'sort'=>'asc');
	} else {
		$header[]=array('data'=>t('Total score'), 'field'=>'total_score', 'sort'=>'desc');
	}

	$rows=array();
	
	$query=db_select('students','s')->fields('s',array('uid','ucategory','name','gender','pass_round3_major'));
	// FIXME: HACK FOR CELLA
	if($prof=='D603' || $prof=='D604' || $prof=='D716' || $prof=='D717') {
		$query->condition('s.validated',1);
		if($prof=='D603' || $prof=='D716') {
			$query->where("s.profession_major='D603' OR s.profession_major='D716'");
		} else if($prof=='D604' || $prof=='D717') {
			$query->where("s.profession_major='D604' OR s.profession_major='D717'");
		}
	} else {
		$query->condition('s.profession_major',$prof)->condition('s.pass_round1_major',1);
	}
	// FIXME: HACK FOR CELLA
	$query->innerJoin('students_contact','sc','s.uid=sc.uid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->fields('sc',array('personnel_record_at'));
	$query->addExpression('u.uid','uuid');
	$query->innerJoin('students_total_score','ts','ts.uid=s.uid');
	$query->fields('ts',array('total_score','rank','outrank'));
	
	$totals=array();
	$query->extend('TableSort')->orderByHeader($header);
	$rdbo=$query->execute();
	$i=1;
	while($r=$rdbo->fetchAssoc()) {
		// FIXME: HACKAGE FOR CELLA
		if($prof=='D603' || $prof=='D604' || $prof=='D716' || $prof=='D717') {
			if($r['total_score']==0) continue;
		}
		// FIXME: HACKAGE FOR CELLA
		$rows[$r['uid']]=array(
			$i++,
			l($r['uid'], 'user/'.$r['uuid']),
			$r['name'],
			$r['gender'] == 1 ? t('Male'): t('Female'),
			$r['pass_round3_major']?($r['pass_round3_major']==1?t('To be determined').'/'.$r['outrank']:t('Determined')):t('None'),
			in_array(substr($prof,0,2),array('D5','D6','D7','D8'))?abs($r['rank']):number_format($r['total_score']>100?100:$r['total_score'], 2, '.' ,''),
		);
		
	}
	$form['students']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $rows,
			'#attributes' => array('class'=>array('assign_students')),
			'#empty' => t('No students to operate.'),
	);
	$form['status']=array(
		'#type'=>'select',
		'#title'=>t('Set current status'),
		'#required'=>true,
		'#options'=>array(
			0=>t('None'),
			1=>t('To be determined'),
			10=>t('Determined'),
		),
		'#prefix'=>'<div class="container-inline">',
		'#suffix'=>'</div>',
	);
	$form['submit'] = array('#type'=>'submit', '#value'=>t('Submit'));
	return $form;
}

function score_mark_3rd_round_submit($form, $form_state) {
	$students= array_filter($form_state['values']['students']);
	foreach($students as $uid=>$u) {
		db_update('students')->condition('uid',$uid)->fields(array(
			'pass_round3_major'=>$form_state['values']['status']
		))->execute();
	}
	if($form_state['values']['status']==1) {
		$query=db_select('students','s')->condition('s.pass_round3_major',1)->condition('profession_major',arg(2));
		$query->innerJoin('students_total_score','ts','s.uid=ts.uid');
		$query->fields('s',array('uid'))->orderBy('ts.rank');
		$students=$query->execute();
		$i=1;
		foreach($students as $student) {
			db_update('students_total_score')->condition('uid',$student->uid)->fields(array(
				'outrank'=>$i++
			))->execute();
		}
	}
}

function score_myscore_check() {
	global $user;
	if(!$user->uid) return false;
	$r=db_select('students','s')->fields('s',array('pass_round1_major'))->condition('uid',$user->name)->execute()->fetchField();
	return user_access('check sutdents own scores') && $r;
}

function score_myscore_check_roundg() {
	global $user;
	if(!$user->uid) return false;
	$r=db_select('students','s')->fields('s',array('pass_roundg_major'))->condition('uid',$user->name)->execute()->fetchField();
	return user_access('check sutdents roundg scores') && $r;
}
function score_myscore() {
	global $user;
	$uid=$user->name;

	$student=db_select('students','s')->fields('s')->condition('uid',$uid)->execute()->fetchObject();
	$output  = '<p>';
	$output .= t('Dear student @uid @name, ',
		array(
			'@uid' =>$student->uid,
			'@name'=>$student->name,
		)
	);
	$output .= '</p>';
	
	$query=db_select('vl_professions','p');
	$query->innerJoin('vl_department','d','p.did=d.did');
	$query->innerJoin('students','s','s.profession_major=p.pid');
	$query->fields('p',array('plan','pname','exams'))->fields('d',array('dname'))->condition('s.uid',$uid);
	$profession=$query->execute()->fetchObject();
	$output .= '<p>';
	$output .= t('You\'ve selected @dep @prof profession this year. The plan of this profession is @plan.',
		array(
			'@dep' =>$profession->dname,
			'@prof'=>$profession->pname,
			'@plan'=>$profession->plan,
		)
	);
	
	$output .= t('And your scores goes for:').'</p>';
	
	$query=db_select('students','s')->condition('s.uid',$uid);
	$query->innerJoin('students_score','sc','s.uid=sc.uid');
	$query->innerJoin('vl_exam','e','sc.eid=e.eid');
	$query->fields('e')->fields('sc')->orderBy('sc.eid');
	$rdbo=$query->execute();
	
	$is_passedthrough=db_select('students_passthrough','sp')->fields('sp')->condition('sp.idcard_number',$student->idcard_number)->countQuery()->execute()->fetchField();
	
	$exams = unserialize($profession->exams);
	foreach($rdbo as $r) {
		if($exams[$r->eid]==0 && substr($r->eid,0,1)!='3') continue;
		if(!$r->rank) {
			$rows[]=array(
				$r->ename.$r->elevel,
				$is_passedthrough?t('Passed through'):t('Numeric Value'),
				$is_passedthrough?t('Passed through'):t('The large the better'),
				$is_passedthrough?t('Passed through'):round($r->score, 2)
			);
		} else {
			$rows[]=array(
				$r->ename.$r->elevel,
				$is_passedthrough?t('Passed through'):t('Mean rank'),
				$is_passedthrough?t('Passed through'):t('The small the better'),
				$is_passedthrough?t('Passed through'):$r->rank
			);
		}
	}
	
	$header=array(
		t('Exam Name'),
		t('Score type'),
		t('Comparing method'),
		t('Result')
	);
	
	$output .= theme('table',array('rows'=>$rows, 'header'=>$header));

	$output .= '<p><b>';
	
	switch($student->pass_round3_major) {
		case 10:
			if($student->profession_major=='D301')
				$output .= t('You are marked as quanlified students ranking @rank, but your gaokao score will affect your order when considering marking in.', array('@rank'=>db_select('students_total_score','ts')->fields('ts',array('rank'))->condition('ts.uid',$student->uid)->execute()->fetchField()));
			else
				$output .= t('You are marked as planed students.');
			$output .= t('Please consider about your willings of gaokao.');
			$output .= '<br/>'.t('Please ask your school to write a recomendation letter, and mail it to students affairs\' office.');
			break;
		case 1:
			$output .= t('You are marked as unplaned students.');
			$output .= t('Please consider about your willings of gaokao.');
			$output .= '<br/>'.t('Please ask your school to write a recomendation letter, and mail it to students affairs\' office.');
			break;
		case 0:
			$output .= t('You are marked as unqualified students.');
			break;
	}
	
	$output .= '</b></p>';
	return $output;
}

function score_input_gaokao_overview() {
	return drupal_get_form('score_gaokao_province_status_form');
}

function score_gaokao_province_status_form() {
	$form=array();
	$query=db_select('vl_province','p');
	$query->innerJoin('students_gk','sg','p.pid=sg.province');
	$query->innerJoin('students','s','sg.uid=s.uid');
	$query->condition('s.pass_round3_major',0,'>')->condition('p.ucategory',array('1','2'),'IN');
	$query->fields('p',array('pid','name','isgkenabled'));
	$query->addExpression('count(*)','num');
	$query->groupBy('p.pid')->orderBy('p.pid');
	$rdbo=$query->execute();

	foreach($rdbo as $r) {
		$form['pid'][$r->pid]=array('#type'=>'hidden','#value'=>$r->pid);
		$form['name'][$r->pid]=array('#markup'=>$r->name);
		$form['num'][$r->pid]=array('#markup'=>$r->num);
		
		$q=db_select('students_gk','sg');
		$q->innerJoin('students','s','sg.uid=s.uid');
		$q->condition('s.pass_round3_major',0,'>')->condition('sg.province',$r->pid);
		$q->addExpression('MIN(sg.validated)');
		
		$form['status-'.$r->pid]=array('#type'=>'checkbox',
			'#default_value'=>$r->isgkenabled,
			'#disabled'=>$q->execute()->fetchField(),
			'#title'=>t('Students can input scores themselves'),
		);
		$form['op'][$r->pid]=$r->isgkenabled?'':array('#markup'=>l(t('Input myself'),'score/inputgk/'.$r->pid));
	}
	
	$form['submit']=array('#type'=>'submit','#value'=>t('Update'));
	return $form;

}

function score_gaokao_province_status_form_submit($form, &$form_state) {
	$form_values=$form_state['values'];
	$keys=array_keys($form_values);
	$values=array_values($form_values);
	foreach($keys as $key) {
		if(strpos($key, 'status')!==FALSE) {
			$p=substr($key, 7);
			db_update('vl_province')->fields(array(
				'isgkenabled' => $form_values[$key]
			))->condition('pid',$p)->execute();
		}
	}
	drupal_set_message(t('Settings have been saved.'));
}


function theme_score_gaokao_province_status_form($variables) {
	$form=$variables['form'];
	$output = '';
	$rows=array();
	$header=array(
		array('data'=>t('Province')),
		array('data'=>t('Number of students')),
		array('data'=>t('Status')),
		array('data'=>t('Operations')),
	);
	
	foreach(element_children($form['pid']) as $p) {
		$rows[]=array(
			drupal_render($form['name'][$p]),
			drupal_render($form['num'][$p]),
			drupal_render($form['status-'.$p]),
			drupal_render($form['op'][$p]),
		);
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output.=drupal_render($form['submit']);
	$output.=drupal_render_children($form);

	return $output;
}

function score_gaokao_province_detail_form($form, $form_state, $province) {
	drupal_set_title(t('Input gaokao scores for the students').' - '.db_select('vl_province','p')->condition('pid',$province)->fields('p',array('name'))->execute()->fetchField());
	
	$form=array();
	$query=db_select('vl_province','p')->condition('p.pid',$province);
	$query->innerJoin('students_gk','sg','p.pid=sg.province');
	$query->innerJoin('students','s','sg.uid=s.uid');
	$query->innerJoin('vl_professions','pp','s.profession_major=pp.pid');
	$query->innerJoin('users','u','u.name=s.uid');
	$query->condition('s.pass_round3_major',0,'>')->orderBy('sg.sid')->orderBy('s.name');
	$query->fields('sg')->fields('s',array('name','idcard_number','gender','profession_major'));
	$query->addExpression('u.uid','uuid');
	$query->addExpression('pp.pname','pname');
	$query=$query->extend('PagerDefault')->limit(20);

	$rdbo=$query->execute();
	
	foreach($rdbo as $r) {
		settype($r->score_chinese,'float');
		settype($r->score_languages,'float');
		settype($r->score_math,'float');
		settype($r->score_synthesis,'float');
		$form['uid'][$r->uid]=array('#type'=>'hidden','#value'=>$r->uid);
		$form['_sid-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->sid,'#size'=>19,'#maxlength'=>14,'#attributes'=>array('style'=>'padding-left: 2px; padding-right: 2px;'));
		$form['prof'][$r->uid]=array('#markup'=>l($r->pname,'signup/3rdround/profession/'.$r->profession_major,array('attributes'=>array('title'=>t('View 3rd round students')))));
		$form['name'][$r->uid]=array('#markup'=>'<nobr>'.l($r->name,'user/'.$r->uuid,array('attributes'=>array('title'=>$r->idcard_number))).'</nobr>',);
		$form['_sis-'.$r->uid]=array('#type'=>'checkbox','#default_value'=>$r->is_math_subjects);
		$form['_sch-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->score_chinese,'#size'=>4,'#maxlength'=>6);
		$form['_slg-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->score_languages,'#size'=>4,'#maxlength'=>6);
		$form['_smt-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->score_math,'#size'=>4,'#maxlength'=>6);
		$form['_sst-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->score_synthesis,'#size'=>4,'#maxlength'=>6);
		$form['validated-'.$r->uid]=array('#type'=>'checkbox', '#default_value'=>$r->validated);
		$form['memory-'.$r->uid]=array('#type'=>'textfield','#default_value'=>$r->memory,'#size'=>10,'#maxlength'=>6);
	}

	$form['submit']=array('#type'=>'submit', '#value'=>t('Save, and caculate total score with coefficient:'), '#prefix' => '<div class="inline-element-div">');
	$form['coefficient']=array('#type'=>'textfield','#default_value'=>'1', '#size'=>3, '#suffix' => '</div>');
	$form['pager']=array('#markup'=>theme('pager'));
	
	return $form;
}

function theme_score_gaokao_province_detail_form($variables) {
	$form=$variables['form'];
	$output = '';
	$header=array(
		array('data'=>t('Gaokao SID')),
		array('data'=>t('Real Name')),
		array('data'=>t('Profession')),
		array('data'=>t('Is Science subject').'?'),
		array('data'=>t('Chinese')),
		array('data'=>t('Math')),
		array('data'=>t('Foreign language')),
		array('data'=>t('Synthesis subject')),
		array('data'=>t('Validated')),
		array('data'=>t('Memory')),
	);
	
	$query=db_select('students_gk','sg');
	$query->innerJoin('students','s','sg.uid=s.uid');
	$query->addExpression('MIN(sg.validated)');
	$query->condition('s.pass_round3_major',0,'>')->condition('sg.province',arg(2));
	$should_disable_all=$query->execute()->fetchField();

	foreach(element_children($form['uid']) as $u) {
		$rows[]=array(
			$should_disable_all?$form['_sid-'.$u]['#default_value']:drupal_render($form['_sid-'.$u]),
			//drupal_render($form['idcard_number'][$u]),
			drupal_render($form['name'][$u]),
			drupal_render($form['prof'][$u]),
			$should_disable_all?($form['_sis-'.$u]['#default_value']?t('Yes'):t('No')):drupal_render($form['_sis-'.$u]),
			$should_disable_all?$form['_sch-'.$u]['#default_value']:drupal_render($form['_sch-'.$u]),
			$should_disable_all?$form['_smt-'.$u]['#default_value']:drupal_render($form['_smt-'.$u]),
			$should_disable_all?$form['_slg-'.$u]['#default_value']:drupal_render($form['_slg-'.$u]),
			$should_disable_all?$form['_sst-'.$u]['#default_value']:drupal_render($form['_sst-'.$u]),
			drupal_render($form['validated-'.$u]),
			$should_disable_all?$form['memory-'.$u]['#default_value']:drupal_render($form['memory-'.$u]),
		);
		if($should_disable_all) {
			unset($form['_sid-'.$u]);
			unset($form['_sis-'.$u]);
			unset($form['_sch-'.$u]);
			unset($form['_smt-'.$u]);
			unset($form['_slg-'.$u]);
			unset($form['_sst-'.$u]);
			unset($form['memory-'.$u]);
		}
	}
	drupal_add_css(drupal_get_path('module', 'score') .'/score.css');
	$output.=theme('table', array('header'=>$header, 'rows'=>$rows));
	if(!$should_disable_all)
		$output.=drupal_render($form['submit']).drupal_render($form['coefficient']);
	else
		{unset($form['submit']);unset($form['coefficient']);}
	
	$output.=drupal_render($form['pager']);
	$output.=drupal_render_children($form);
	return $output;

}

function score_gaokao_province_detail_form_validate($form, &$form_state) {
	$form_values=$form_state['values'];
	$keys=array_keys($form_values);
	foreach($keys as $key) {
		switch(substr($key,0,4)) {
			case '_sid': 
				if($form_values[$key] && (db_select('vl_province','p')->fields('p',array('ucategory'))->condition('pid',arg(2))->execute()->fetchField() == 1) &&!preg_match('/'.substr(variable_get('zhaoban_current_year',date('Y')),-2).'\d{12}/', $form_values[$key]))
				{
					form_set_error($key, t('The student gaokao ID you\'ve entered is not valid.'));
				}
				break;
			case '_sch':
			case '_slg':
			case '_smt':
			case '_sst':
				if(!is_numeric($form_values[$key]))
					form_set_error($key, t('The score you\'ve entered is not valid.'));
		}
	}
}

function score_gaokao_province_detail_form_submit($form, &$form_state) {
	$form_values=$form_state['values'];
	$keys=array_keys($form_values);
	foreach($keys as $key) {
		if(substr($key,0,4)!=variable_get('zhaoban_current_year',date('Y'))) continue;
		db_update('students_gk')->condition('uid',$key)->fields(array(
			'sid' => $form_values['_sid-'.$key],
			'is_math_subjects' => $form_values['_sis-'.$key],
			'score_chinese' => $form_values['_sch-'.$key],
			'score_languages' => $form_values['_slg-'.$key],
			'score_math' => $form_values['_smt-'.$key],
			'score_synthesis' => $form_values['_sst-'.$key],
			'score_total' => ($form_values['_sch-'.$key]+$form_values['_slg-'.$key]+$form_values['_smt-'.$key]+$form_values['_sst-'.$key])*$form_values['coefficient'],
			'validated' => $form_values['validated-'.$key],
			'memory' => $form_values['memory-'.$key]
		))->execute();
	}
	drupal_set_message(t('Scores have been saved.'));
	$form_state['redirect']='score/inputgk'; 
}

function score_prepare_gk_overview() {
	$header=array(
		array('data'=>t('Profession'), 'field'=>'p.pid', 'sort'=>'asc'),
		array('data'=>t('People (%)'), 'field'=>'num'),
	);
	
	$total_students=db_select('students','s')->fields('s')->condition('s.pass_round3_major',1,'>=')->countQuery()->execute()->fetchField();
	$query=db_select('students','s')->condition('s.pass_round3_major',1,'>=');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->fields('p',array('pid','pname'))->groupBy('p.pid')->extend('TableSort')->orderByHeader($header);
	$query->addExpression('count(*)','num');
	$rdbo=$query->execute();
	$rows=array();
	foreach($rdbo as $r)
	{
		$rows[]=array(
			l($r->pname, 'score/preparegk/'.$r->pid),
			sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
		);
	}
	
	$output = t('There are currently !num students marked as being enrolled into the 3rd round examination.', array('!num'=>$total_students));
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	return $output;
}

function score_prepare_gk_detail($prof=NULL) {
	$profession=db_select('vl_professions','p')->condition('pid',$prof)->fields('p')->execute()->fetchObject();
		$profession_exams = unserialize($profession->exams);
		drupal_set_title(t('Prepare for the gk round students').' - '.$profession->pname);
		$output .= '<div class=\'messages\'>';
		$output .= t('The enrollment plan of the profession is !num.',array('!num'=>$profession->plan));
		$output .= '</blockquote></div>';

	
	$header=array(
		array('data'=>t('No.')),
		//array('data'=>t('Student ID')),
		array('data'=>t('Real Name')),
		array('data'=>' '),
		array('data'=>t('Round3 situation')),
		array('data'=>t('Gender')),
	);
	
		if(in_array(substr($prof,0,2),array('D5','D6','D7','D8'))) {
		$header[]=array('data'=>t('Total score'), 'field'=>'tsrank');
	} else {
		$header[]=array('data'=>t('Total score'), 'field'=>'total_score');
	}
	$header[]=array('data'=>t('Chinese'));
	$header[]=array('data'=>t('Foreign language'));
	$header[]=array('data'=>t('Overall'));
	$header[]=array('data' =>t('Personnel record'));
	$header[]=array('data' =>t('Memory'));

	$rows=array();
	
	$query=db_select('students','s')->fields('s',array('uid','ucategory','name','gender','pass_round3_major'));
	$query->condition('s.profession_major',$prof)->condition('s.pass_round3_major',1,'>=');
	$query->innerJoin('students_contact','sc','s.uid=sc.uid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->fields('sc',array('personnel_record_at'));
	$query->fields('sg',array('score_chinese', 'score_languages', 'score_math', 'score_synthesis', 'score_total','is_math_subjects','memory'));
	$query->addExpression('u.uid','uuid');
	
	$totals=array();
	$query->innerJoin('students_total_score','ts','s.uid=ts.uid');
	$query->addExpression('ABS(ts.total_score)','total_score');
	$query->fields('ts',array('outrank'));
	
		$query->orderBy('sg.memory','ASC')->orderBy('s.pass_round3_major','DESC')->orderBy('ts.outrank');
		if(in_array(substr($prof,0,2),array('D5','D6','D7','D8'))) {
			$query->addExpression('CAST(ts.rank AS DECIMAL)','tsrank');
			$query->orderBy('tsrank','ASC');
	} else {
		$query->addExpression('ABS(ts.total_score)','total_score');
		$query->orderBy('total_score','DESC');
	}

	$rdbo=$query->execute();
	$i=1;
	while($r=$rdbo->fetchAssoc()) {
		
		settype($r['score_chinese'],'float');
		settype($r['score_languages'],'float');
		settype($r['score_total'],'float');
		$rows[]=array(
			$i++,
			$r['name'],
			'',
			$r['pass_round3_major'] == '10' ? t('Determined'):(t('To be determined').'/'.$r['outrank']),
			$r['gender'] == 1 ? t('Male'): t('Female'),
			number_format($r['total_score']>100?100:$r['total_score'], 2, '.' ,''),
			($r['ucategory']!='1'&&$r['ucategory']!='2')?t('N/A'):$r['score_chinese'],
			($r['ucategory']!='1'&&$r['ucategory']!='2')?t('N/A'):$r['score_languages'],
			($r['ucategory']!='1'&&$r['ucategory']!='2')?t('N/A'):$r['score_total'],
			$r['ucategory']!='1'?db_select('vl_student_type','st')->condition('st.stid',$r['ucategory'])->fields('st',array('name'))->execute()->fetchField():$r['personnel_record_at'],
			$r['is_math_subjects']?(t('Science').($r['memory']?', '.$r['memory']:'')):$r['memory'],
		);
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	return $output;
}

function score_mark_gaokao_round_list() {
	$header=array(
		array('data'=>t('Department')),
		array('data'=>t('Profession')),
		array('data'=>t('Mainland students')),
		array('data'=>t('Students out of mainland')),
	);

	$rows=array();
	$query=db_select('vl_professions','p')->fields('p',array('pid','pname','did', 'pnamememo'))->orderBy('p.pid');
	$query->innerJoin('vl_department','d','p.did=d.did');
	$query->fields('d',array('dname'));
	$subquery=db_select('students','s')->fields('s')->condition('s.pass_round3_major',0,'<>')->where('s.profession_major=p.pid');
	$query->exists($subquery);
	$rdbo=$query->execute();
	
	while($r=$rdbo->fetchObject())
	{
		$did=$r->did;
		$mainland_in=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1)->condition('s.pass_roundg_major',1)->fields('s')->countQuery()->execute()->fetchField();
		$outmainland_in=db_select('students','s')->condition('s.profession_major',$r->pid)->condition('s.ucategory',1,'<>')->condition('s.pass_roundg_major',1)->fields('s')->countQuery()->execute()->fetchField();
		$rows[]=array(
			$r->dname,
			l($r->pname.($r->pnamememo?'('.$r->pnamememo.')':''), 'signup/markroundg/'.$r->pid),
			$mainland_in?$mainland_in:'',
			$outmainland_in?$outmainland_in:'',
		);
		$tot_mainland_in+=$mainland_in;
		$tot_outmainland_in+=$outmainland_in;
	}
	$output = t('There are !num mainland students marked as being determined enrolled into roundg.',array(
		'!num'=>db_select('students','s')->fields('s')->condition('s.ucategory',1)->condition('s.pass_roundg_major',1)->countQuery()->execute()->fetchField(),
	));
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));

	return $output;
}

function score_mark_gaokao_round($form, $form_state, $prof) {
	drupal_set_title(t('Mark round g students').' -  '.db_select('vl_professions','p')->condition('p.pid',$prof)->fields('p',array('pname'))->execute()->fetchField());
	$profession=db_select('vl_professions','p')->condition('pid',$prof)->fields('p')->execute()->fetchObject();
	drupal_add_css(drupal_get_path('module', 'going') .'/going.css');
		$profession_exams = unserialize($profession->exams);

	$header=array(
		array('data'=>t('No.')),
		array('data'=>t('Student ID'), 'field'=>'s.uid'),
		array('data'=>t('Real Name')),
		array('data'=>t('Gender'), 'field'=>'s.gender'),
		array('data'=>t('Current status'),'field'=>'s.pass_round3_major'),
	);
	
		foreach($profession_exams as $eid => $eweight) {
		if($eweight!=0||substr($eid,0,1)=='3') {
			$query=db_select('vl_exam','e')->condition('e.eid',$eid);
			$query->addExpression('CONCAT(ename, IFNULL(elevel, \'\'))','ename');
		}
		}
		
		if(in_array(substr($prof,0,2),array('D5','D6','D7','D8'))) {
		$header[]=array('data'=>t('Total score'), 'field'=>'rank', 'sort'=>'asc');
	} else {
		$header[]=array('data'=>t('Total score'), 'field'=>'total_score', 'sort'=>'desc');
	}
	$header[]=array('data'=>t('Overall'), 'field'=>'score_total');

	$rows=array();
	
	$query=db_select('students','s')->fields('s',array('uid','ucategory','name','gender','pass_round3_major','pass_roundg_major'));
	$query->condition('s.profession_major',$prof)->condition('s.pass_round3_major',0,'<>');
	$query->innerJoin('students_contact','sc','s.uid=sc.uid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->fields('sc',array('personnel_record_at'))->fields('sg',array('score_total'));
	$query->addExpression('u.uid','uuid');
	$query->innerJoin('students_total_score','ts','ts.uid=s.uid');
	$query->fields('ts',array('total_score','rank','outrank'));
	
	$totals=array();
	$query->extend('TableSort')->orderByHeader($header);
	$rdbo=$query->execute();
	$i=1;
	$default_value=array();
	while($r=$rdbo->fetchAssoc()) {
		settype($r['score_total'],'float');
		if($r['pass_roundg_major']) $default_values[$r['uid']]=$r['uid'];
		$rows[$r['uid']]=array(
			$i++,
			l($r['uid'], 'user/'.$r['uuid']),
			$r['name'],
			$r['gender'] == 1 ? t('Male'): t('Female'),
			$r['pass_round3_major']?($r['pass_round3_major']==1?t('To be determined').'/'.$r['outrank']:t('Determined')):t('None'),
			in_array(substr($prof,0,2),array('D5','D6','D7','D8'))?abs($r['rank']):number_format($r['total_score']>100?100:$r['total_score'], 2, '.' ,''),
			$r['score_total'],
		);
		
	}
	$form['students']=array(
			'#type' => 'tableselect',
			'#header' => $header,
			'#options' => $rows,
			'#attributes' => array('class'=>array('assign_students')),
			'#default_value' => $default_values,
			'#empty' => t('No students to list.'),
	);
	$form['submit'] = array('#type'=>'submit', '#value'=>t('Submit'));
	return $form;
}

function score_mark_gaokao_round_submit($form, &$form_state) {
	global $user;
	$form_values = array_keys(array_filter($form_state['values']['students']));
	$prof=db_select('vl_professions','p')->condition('p.pid',arg(2))->fields('p',array('pname'))->execute()->fetchField();
	db_update('students')->fields(array(
			'pass_roundg_major'=>0
	))->condition('profession_major',arg(2))->execute();
	foreach($form_values as $student) {
		db_update('students')->fields(array(
				'pass_roundg_major'=>1
		))->condition('uid',$student)
		->execute();
	}
	
	drupal_set_message(
		t('!num !prof students have been enrolled into the gaokao round examiniation.', array(
			'!num'=>count($form_values), '!prof'=>$prof)));
	watchdog('score',
		'!num !prof students have been enrolled into the gaokao round examiniation.', array(
			'!num'=>count($form_values),
			'!prof'=>$prof),
		WATCHDOG_INFO);

	$form_state['redirect']='signup/markroundg';
}

function score_myscore_roundg() {
	global $user;
	$uid=$user->name;
	
	$query=db_select('students','s')->condition('s.uid',$uid)->fields('s', array('uid','name'));
	$query->innerJoin('vl_professions', 'p', 'p.pid=s.profession_major');
	$query->innerJoin('vl_department', 'd', 'p.did = d.did');
	$query->fields('p',array('pname','plan'))->fields('d',array('dname'));
	$query->innerJoin('students_contact','sc','sc.uid=s.uid');
	$query->fields('sc',array('emscode_roundg'));
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->fields('sg',array('sid'));
	
	
	$r=$query->execute()->fetchObject();
	
	$output = '<p>';
	$output .= t('Dear student !uid !name, ',
		array(
			'!uid' =>$r->uid,
			'!name'=>$r->name,
		)
	);
	$output .= '</p>';
	
	$output .= '<p>';
	$output .= t('Welcome to CCOM. You\'ve been qualified !dep !prof profession.',
		array(
			'!dep' =>$r->dname,
			'!prof'=>$r->pname,
		)
	);
	$output .= '</p>';

	$output .='<p>'.t('We\'ve sent out the papaer via EMS, whith its access code as !emscode. You could query the status via Tel 11183 or via <a href="http://www.ems.com.cn">www.ems.com.cn</a>.',
		array(
			'!emscode'=>$r->emscode_roundg,
		)
	).t('If students gk number is required, then you might want to provide your gk number !scode',
		array('!scode'=>$r->sid)
	).'</p>';
	
	return $output;
}

function score_cron() {
	// Force recalculate the total_score of all students
	$q=db_select('vl_professions','p')->fields('p',array('pid','exams'));
	$subquery=db_select('students','s')->fields('s')->condition('s.pass_round1_major',1);
	if($prof=='D603' || $prof=='D604' || $prof=='D716' || $prof=='D717') {
		$subquery->innerJoin('students_going','sg','s.uid=sg.uid');
		$subquery->isNotNull('sg.gid');
		switch($prof) {
			case 'D603':
				$subquery->condition('sg.eid','208');
				break;
			case 'D604':
				$subquery->condition('sg.eid','210');
				break;
			case 'D716':
				$subquery->condition('sg.eid','285');
				break;
			case 'D717':
				$subquery->condition('sg.eid','286');
				break;
		}
	} else
		$subquery->where('s.profession_major=p.pid');
	$q->exists($subquery);
	$rdbo=$q->execute();
	// Compose query string
	foreach($rdbo as $r) {
		// Now calculate total_score
		$query=db_select('students','s')->fields('s',array('uid'))->condition('s.pass_round1_major',1);
		if(in_array($r->pid,array('D603','D604','D716','D717'))) {
			$subquery=db_select('students_going','sg')->fields('sg');
			$subquery->where('s.uid=sg.uid');
			$subquery->isNotNull('sg.gid');
			switch($r->pid) {
				case 'D603':
					$subquery->condition('sg.eid','208');
					break;
				case 'D604':
					$subquery->condition('sg.eid','210');
					break;
				case 'D716':
					$subquery->condition('sg.eid','285');
					break;
				case 'D717':
					$subquery->condition('sg.eid','286');
					break;
			}
			$query->exists($subquery);
		} else
			$query->condition('s.profession_major',$r->pid);
		$profession_exams = unserialize($r->exams);
		$totals=array();
		foreach($profession_exams as $eid=>$weight) {
			$neid='e'.$eid;
			if($weight!=0||substr($eid,0,1)=='3') {
				$query->leftJoin('students_score', $neid, "s.uid=$neid.uid AND $neid.eid=$eid");
				if($weight||substr($eid,0,1)=='3') $totals[]="$neid.score*$weight";
			}
		}
		$query->addExpression(implode('+', $totals), 'total_score');
		$sdbo=$query->execute();
		foreach($sdbo as $s) {
			db_merge('students_total_score')
				->key(array('uid' => $s->uid, 'pid'=>$r->pid))
				->fields(array(
					'pid' => $r->pid,
					'total_score' => $s->total_score
				))->execute();
		}

		// Now calculate total_rank
		if(!in_array(substr($r->pid,0,2),array('D5','D6','D7','D8'))) continue;
		$query=db_select('students','s')->fields('s',array('uid'))->condition('s.pass_round1_major',1);
		if(in_array($r->pid,array('D603','D604','D716','D717'))) {
			$subquery=db_select('students_going','sg')->fields('sg');
			$subquery->where('s.uid=sg.uid');
			$subquery->isNotNull('sg.gid');
			switch($r->pid) {
				case 'D603':
					$subquery->condition('sg.eid','208');
					break;
				case 'D604':
					$subquery->condition('sg.eid','210');
					break;
				case 'D716':
					$subquery->condition('sg.eid','285');
					break;
				case 'D717':
					$subquery->condition('sg.eid','286');
					break;
			}
			$query->exists($subquery);
		}
		$profession_exams = unserialize($r->exams);
		$totals=array();
		foreach($profession_exams as $eid=>$weight) {
			$neid='e'.$eid;
			if($weight!=0||substr($eid,0,1)=='3') {
				$query->leftJoin('students_score', $neid, "s.uid=$neid.uid");
				$query->condition("$neid.eid", $eid);
				if($weight||substr($eid,0,1)=='3') $totals[]="IFNULL($neid.rank,0)*$weight";
			}
		}
		$query->addExpression(implode('+', $totals), 'total_rank');
		$sdbo=$query->execute();
		foreach($sdbo as $s) {
			db_update('students_total_score')->condition('uid',$s->uid)->condition('pid',$r->pid)
				->fields(array(
					'total_rank' => $s->total_rank
				))->execute();
		}

		// Now calulate the actural rank
		$students=db_select('students_total_score','s')->fields('s',array('uid'))->condition('s.pid',$r->pid)->execute();
		foreach($students as $s) {
			if(in_array(substr($r->pid,0,2),array('D5','D6','D7','D8'))) {
				$query=db_select('students_total_score','sc')->condition('sc.pid',$r->pid)->condition('sc.uid',$s->uid);
				$query->addExpression('(100000-sc.total_rank)*100000+sc.total_score','totsort');
				$score=$query->execute()->fetchField();
				$query=db_select('students_total_score','sc')->condition('sc.pid',$r->pid);
				$query->where('(100000-sc.total_rank)*100000+sc.total_score > '.$score);
				$query->innerJoin('students','s','sc.uid=s.uid');
				$query->condition('s.pass_round1_major',1)->condition('s.uid',$s->uid,'<>')->condition('sc.total_score',0,'<>');
				$query->addExpression('count(*)','num');
				db_update('students_total_score')->condition('uid',$s->uid)->condition('pid',$r->pid)->fields(array(
					'rank'=>($score==0)?'999':$query->execute()->fetchField()+1,
				))->execute();
			}
			else {
				$score=db_select('students_total_score','sc')->condition('sc.uid',$s->uid)->fields('sc',array('total_score'))->execute()->fetchField();
				$query=db_select('students_total_score','sc')->condition('sc.total_score',$score*1,'>');
				$query->innerJoin('students','s','sc.uid=s.uid');
				$query->condition('s.profession_major',$r->pid)->condition('s.pass_round1_major',1)->condition('s.uid',$s->uid,'<>')->condition('sc.total_score',0,'<>');
				$query->addExpression('count(*)','num');
				db_update('students_total_score')->condition('uid',$s->uid)->fields(array(
					'rank'=>($score==0)?'999':$query->execute()->fetchField()+1,
				))->execute();
			}
		}
	}
	
	// Force set those passthrough students's score
	$query=db_select('students','s')->fields('s',array('uid','profession_major'))->condition('s.validated',1);
	$query->innerJoin('students_passthrough','sp','s.idcard_number=sp.idcard_number');
	$result = $query->execute();
	foreach ($result as $r) {
		db_delete('students_score')
			->condition('uid',$r->uid)
			->execute();
		db_delete('students_total_score')
			->condition('uid',$r->uid)
			->execute();
		$query=db_select('students_going','sg')->fields('sg',array('uid','eid'))->condition('sg.uid',$r->uid)->orderBy('uid')->orderBy('eid');
		$query->addExpression('100','score');
		$query->addExpression('1','rank');
		db_insert('students_score')
			->from($query)
			->execute();
		db_insert('students_total_score')
			->fields(array(
				'uid' => $r->uid,
				'pid' => $r->profession_major,
				'total_score' => 100,
				'rank' => 1,
				'total_rank' => 1
			))->execute();
	}

	// Force recalculate the Solfeggio score
	$solfeggios=array('321','322','323','324');
	foreach($solfeggios as $solfeggio) {
		db_delete('students_score')
			->condition('eid',$solfeggio)
			->execute();
		$query=db_select('students_score','t')->condition('t.eid',$solfeggio-20);
		$query->innerJoin('students_score','s','t.uid=s.uid');
		$query->condition('s.eid',$solfeggio-10)->fields('t',array('uid'));
		$query->addExpression($solfeggio,'eid');
		$query->addExpression('t.score*0.5+s.score*0.5','score');
		$query->addExpression('0','rank');
		db_insert('students_score')
			->from($query)
			->execute();
	}
}
