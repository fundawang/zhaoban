<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * @file
 * Provides the operations of arrange schedules.
 */
define("going_going_MAX_EXAMS", 5);

function going_init() {
  drupal_add_css(drupal_get_path('module', 'going') .'/going.css');
}

/**
 * Implementation of hook_help().
 */
function going_help($path, $arg) {
  return NULL;
}

/**
 * Implementation of hook_menu().
 */
function going_menu() {
  $items['definations/going'] = array(
    'title' => 'Going',
    'description' => "Define going transaction.",
    'weight' => 3,
    'page callback' => 'going_goinglist',
    'access callback' => 'user_access',
    'access arguments' => array('administer going'),
  );

  $items['definations/going/list'] = array(
    'title' => 'List',
    'weight' => 0,
    'page callback' => 'going_goinglist',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'going_menu_perm',
  );
  $items['definations/going/add'] = array(
    'title' => 'Add Going',
    'weight' => 1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('going_going_edit'),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'going_menu_perm',
  );
  $items['definations/going/edit/%'] = array(
    'title' => 'Edit Going',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('going_going_edit'),
    'type' => MENU_CALLBACK,
    'access callback' => 'going_menu_perm',
);
  $items['definations/going/delete/%'] = array(
    'title' => 'Delete Going',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('going_going_delete'),
    'type' => MENU_CALLBACK,
    'access callback' => 'going_menu_perm',
  );

  $items['definations/arrange'] = array(
    'title' => 'Assign students',
    'weight' => 4,
    'page callback' => 'going_assign_list',
    'description' => "Assign students to going.",
    'access callback' => 'going_menu_perm',
  );
  $items['definations/arrange/fill/%'] = array(
  	'title' => 'Assign students',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('going_assign_students', 3),
    'access callback' => 'going_menu_perm',
    'type' => MENU_CALLBACK,
  );
  $items['definations/arrange/empty/%'] = array(
    'title' => 'Empty Going',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('going_assign_empty', 3),
    'access callback' => 'going_menu_perm',
    'type' => MENU_CALLBACK,
  );
  $items['definations/arrange/printorderlist/%'] = array(
  	'title' => 'Print Order List',
    'page callback' => 'going_print_orderlist',
    'page arguments' => array(3),
    'access callback' => 'going_print_orderlist_perm',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function going_menu_perm()
{
	//var_dump(user_access('administer own going'));
	return user_access('administer going')||user_access('administer own going');
}

function going_print_orderlist_perm()
{
	return going_menu_perm() && user_access('print order list');
}

function going_goinglist() {
	$is_dep_only=user_access('administer own going')&&!user_access('administer going');

  $header = array(
  	array('data'=>t('Schedule ID'), 'field'=>'g.gid', 'sort'=>'asc'),
  	array('data'=>t('Schedule Name')),
  	array('data'=>t('Place'), 'field'=>'g.place'),
  	array('data'=>t('Running exams')),
  	array('data'=>t('Time'), 'field'=>'g.time'),
  	array('data'=>t('Operations'), 'colspan'=>'2'),
  );
  $query = db_select('vl_going', 'g')->where(variable_get('zhaoban_going_list_date_filter_'.$GLOBALS['user']->name,'1'));
  $query->innerJoin('vl_room', 'r', 'g.place = r.rid');
  $query = $query
  	->fields('g')
	->fields('r', array('rname', 'capacity'))
	->extend('PagerDefault')->limit(50)
	->extend('TableSort')
	->orderByHeader($header);
  if($is_dep_only) $query=$query->condition('department', $GLOBALS['user']->name);
  $result = $query->execute();

  $output = drupal_render(drupal_get_form('going_goinglist_filter'));
  
  $rows = array();
  foreach($result as $r) {
  	  $exam_ids=explode(', ', $r->valid_exams);
  	  $exam_names=array();
  	  for($i=0;$i<count($exam_ids);$i++) {
  	  	  $rd=db_select('vl_exam', 'e')
  	  	  	  ->fields('e')
  	  	  	  ->condition('eid',$exam_ids[$i])
  	  	  	  ->execute()->fetchObject();
  	  	  //$rd=db_query('SELECT e.ename,e.elevel FROM {vl_exam} e WHERE e.eid=:eid',array(':eid'=>$exam_ids[$i]))->fetchObject();
  	  	  //var_dump($rd);
  	  	  if($rd)
  	  	  	$exam_names[]=$rd->ename.$rd->elevel;
  	  }
  	  $if_has_perm=user_access('administer going')||$r->department==$GLOBALS['user']->name;
  	  $candelete=db_table_exists('students_going');
  	  if($candelete)  {
  	  	  $candelete=db_select('students_going', 'g')
  	  	  ->fields('g')
  	  	  ->condition('g.gid',$r->gid)
  	  	  ->countQuery()
  	  	  ->execute()->fetchField();
  	  }
  	  $rows[] = array(
  	  	  $r->gid,
  	  	  (user_access('administer going')&&!empty($r->department)?'<span class=\'error\'>':'').$r->gname.(user_access('administer going')&&!empty($r->department)?'</span>*':''),
  	  	  '<nobr>'.$r->rname.'</nobr>',
  	  	  (count($exam_names)==1)?$exam_names[0]:'<ul><li>'.implode('</li><li>',$exam_names).'</li></ul>',
  	  	  '<nobr>'.implode('</nobr><br/><nobr>',explode(' ',_going_datetime_to_string($r->time))).'</nobr>',
  		  $if_has_perm?('<nobr>'.l(t('edit'), "definations/going/edit/$r->gid").'</nobr>'):'',
  		  ($if_has_perm&&($candelete==0))?'<nobr>'.l(t('delete'), "definations/going/delete/$r->gid").'</nobr>':'<nobr><span title="'.t('Cannot delete. Please empty it at first.').'">'.t('delete').'</span></nobr>',
  	  );
  }
  
  if(count($rows)==0) {
    $rows[] = array(array('data' => t('No schedule defined.'), 'colspan' => '7'));
  }
    
  $output .= theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');

  return $output;
}

function going_goinglist_filter($form, $form_state) {
	$form=array();
	$options=array(
		'all' => '- '.t('All').' -',
		'today' => t('Today').'('.date('n月j日').')',
	);
	$query=db_select('vl_going','g');
	$query->addExpression('SUBSTR(TIME, 1, 8)', 'd');
	$query->groupBy('d')->orderBy('d');
	$dates=$query->execute();
	foreach($dates as $date) {
		$options[$date->d]=intval(substr($date->d,4,2)).t('Month').intval(substr($date->d,6,2)).t('Day');
	}
	//var_dump(variable_get('zhaoban_going_list_date_filter_plain','all'));
	$form['date']=array(
		'#type' => 'select',
		'#title' => t('Date'),
		'#options' => $options,
		'#prefix' => '<div class="inline-element-div">',
		'#default_value' => variable_get('zhaoban_going_list_date_filter_plain_'.$GLOBALS['user']->name,'all'),
	);
	$form['submit']=array(
		'#type' => 'submit',
		'#value' => t('Update'),
	);
	return $form;
}

function going_goinglist_filter_submit($form, $form_state) {
	$filter=$form_state['values']['date'];
	switch($filter) {
		case 'all':
			$result='1'; break;
		case 'today':
			$result="g.time LIKE DATE_FORMAT(now(), '%Y%m%d%%')"; break;
		default:
			$result="g.time LIKE '".$filter."%'"; break;
	}
	variable_set('zhaoban_going_list_date_filter_plain_'.$GLOBALS['user']->name, $filter);
	variable_set('zhaoban_going_list_date_filter_'.$GLOBALS['user']->name, $result);
	
}

/**
 * Implementation of hook_permission
 */
function going_permission() {
  return array(
    'administer going' => array(
      'title' => t('Administrater goings'),
    ),
    'administer own going' => array(
      'title' => t('Administrater own goings'),
    ),
    'print order list' => array(
      'title' => t('Print order list'),
    ),
  );
}

function _going_datetime_to_string($time) {
	
	if(strlen($time)!=16) return '';
	
	$dateofs_y = substr($time, 0, 4);
	$dateofs_m = substr($time, 4, 2);
	$dateofs_d = substr($time, 6, 2);
	$timeofstarttime_h = substr($time, 8, 2);
	$timeofstarttime_m = substr($time, 10, 2);
	$timeofendtime_h = substr($time, 12, 2);
	$timeofendtime_m = substr($time, 14, 2);
	
	return t('@y-@m-@d @start-@end', array('@y' => $dateofs_y, '@m' => $dateofs_m, '@d' => $dateofs_d, '@start'=>sprintf('%s:%s', $timeofstarttime_h, $timeofstarttime_m), '@end'=>sprintf('%s:%s', $timeofendtime_h, $timeofendtime_m)));
}

function going_going_edit() {
	$is_dep_only=user_access('administer own going')&&!user_access('administer going');
	$form=array();
	switch(arg(2)) {
		case 'edit':
			$query=db_select('vl_going', 'g')->fields('g')->condition('gid', arg(3));
			if(!$query->countQuery()->execute()->fetchField()) {
				drupal_goto('definations/going');
				return;
			}
			$default_values=$query->execute()->fetchObject();
			$form['gid']=array(
				'#type'=>'item',
				'#title' => t('Schedule ID'),
				'#markup' => arg(3),
				'#required' => TRUE,
			);
		case 'add': 
			if(!isset($default_values)) $default_values=array();
			$result = db_select('vl_room', 'r')
				->fields('r')
				->orderBy('rname', 'ASC')
				->execute();
			
			$rooms = array();
			foreach ($result as $r)
				$rooms += array(
					$r->rid => $r->capacity ? t('@room/@people people', array('@room'=>$r->rname, '@people'=>$r->capacity)) : $r->rname);
			
			$query = db_select('vl_exam', 'e');
			$query->innerjoin('vl_research_sec', 'r', 'e.uid = r.uid');
			$query = $query
				->fields('e')
				->fields('r',array('rname'))
				->orderBy('e.uid')
				->orderBy('e.eid');
			if($is_dep_only) $query = $query->condition('e.department', $GLOBALS['user']->name);
			$result = $query->execute();
			
			$exams=array();
			foreach ($result as $r) {
				if($is_dep_only)
					$exams += array($r->eid => $r->ename.$r->elevel);
				else
					$exams += array($r->eid => $r->rname.': '.$r->ename.$r->elevel);
			}

			if(!isset($form['gid']))
			$form['gid']=array(
				'#title' => t('Schedule ID'),
				'#type' => 'textfield',
				'#required' => TRUE,
				'#default_value' => '',
				'#maxlength'=>4,
				'#size'=>4,
			);
			$form['gname']=array(
				'#title' => t('Schedule Name'),
				'#type' => 'textfield',
				'#required' => True,
				'#default_value' => isset($default_values->gname)?$default_values->gname:'',
				'#maxlength' => 50,
			);
			
			$form['place']=array(
				'#title' => t('Place'),
				'#type'=>'select',
				'#required'=>True,
				'#options' => $rooms,
				'#default_value' => isset($default_values->place)?$default_values->place:NULL,
			);
			
			
			$form['waiting_room']=array(
				'#title'=>t('Waiting room'),
				'#type'=>'select',
				'#required'=>True,
				'#options'=>array('0'=>t('N/A'))+$rooms,
				'#default_value' => isset($default_values->waiting_room)?$default_values->waiting_room:0,
			);
			$form['time']=array(
				'#title'=>t('Time'),
				'#type'=>'textfield',
				'#required'=>True,
				'#maxlength'=>16,
				'#size'=>20,
				'#default_value' => isset($default_values->time)?$default_values->time:'',
			);
			
			$form['ownarrange']=array(
				'#type'=>'checkbox',
				'#title'=>t('Enable deparment to arrange the this schedule themselves.'),
				'#default_value'=>!empty($default_values->department),
			);

			$form['valid_exams']=array(
				'#type'=>'fieldset',
				'#title'=>t('Valid exams'),
				'#collapsible'=> TRUE,
				'#collapsed' => FALSE,
			);
			$form['valid_exams']['#attributes'] = array('class' => array('schedule_edit'));
			
			$prev_exams=explode(', ',isset($default_values->valid_exams)?$default_values->valid_exams:'');
			for($i=1;$i<=going_going_MAX_EXAMS;$i++) {
				if($is_dep_only) {
					$form['valid_exams']['ownarrange']['#value']=True;
					$form['valid_exams']['ownarrange']['#disabled']=True;
				}
				$form['valid_exams']['exam'.$i]=array(
					'#type'=>'select',
					'#title' => t('Exam No. !eno', array('!eno' => $i)),
					'#options'=>array('0'=>t('N/A'))+$exams,
					'#default_value'=>isset($prev_exams[$i-1])?$prev_exams[$i-1]:'0',
					'#prefix' => '<div class="inline-element-div">',
					'#suffix' => '</div>',
				);
			}
			$form['submit'] = array('#type' => 'submit', '#value' =>t('Save'));
			break;
			
			
	}
	return $form;
}

function going_going_edit_validate($form, &$form_state) {
	// Check if the schedule id has been taken
	if(arg(2)=='add') {
		$r=db_select('vl_going', 'g')->fields('g')->condition('g.gid',$form_state['values']['gid'])->countQuery()->execute()->fetchField();
		if($r>0)
			form_set_error('gid',t('The schedule ID has already been taken.'));
	}
	
	// Check if all the exams are being taken by the same research section
	$sec=array();
	for($i=1;$i<=going_going_MAX_EXAMS;$i++) {
		if($form_state['values']['exam'.$i]!='0')
			$sec[]=db_select('vl_exam', 'e')->fields('e',array('uid'))->condition('e.eid',$form_state['values']['exam'.$i])->execute()->fetchField();
			//$sec[]=db_result(db_query('SELECT e.uid FROM {vl_exam} e WHERE e.eid=\'%s\'', $form_state['values']['exam'.$i]));
	}
	if(count($sec)==0) { // No exam defined
		form_set_error('valid_exams', t('There is no examinations in this schedule.'));
	}
	else if(count(array_unique($sec))!=1) { // Conflict research section
		form_set_error('valid_exams', t('Conflict research section detected.'));
	}
	
	// Check if the time is valid
	if(preg_match('/\d{16}/', $form_state['values']['time'])||preg_match('/\d{12}/', $form_state['values']['time']))
		return;
	else
		form_set_error('time', t('The time you specified is not valid.'));
}

function going_going_edit_submit($form, &$form_state) {
	$form_state['values']['gname']=trim($form_state['values']['gname']);
	$dep=db_select('vl_exam','e')->fields('e',array('uid'))->condition('e.eid',$form_state['values']['exam1'])->execute()->fetchField();
	switch(arg(2)) {
		case 'add':
			$exams=array();
			for($i=1;$i<=going_going_MAX_EXAMS;$i++) {
				if($form_state['values']['exam'.$i]!='0')
					$exams[]=$form_state['values']['exam'.$i];
			}
			db_insert('vl_going')
				->fields(array(
					'gid' => $form_state['values']['gid'],
					'gname' => $form_state['values']['gname'],
					'place' => $form_state['values']['place'],
					'waiting_room' => $form_state['values']['waiting_room'],
					'valid_exams' => implode(', ', $exams),
					'time' => $form_state['values']['time'],
					'department' => $form_state['values']['ownarrange']?$dep:NULL,)
				)->execute();
			watchdog('going',
				'!user created new schedule !gname.', array(
					'!user'=>$GLOBALS['user']->name,
					'!gname'=>$form_state['values']['gname']),
				WATCHDOG_INFO,
				l(t('View'), 'definations/going')
			);
			$form_state['redirect']='definations/going';
			break;
		case 'edit':
			$exams=array();
			for($i=1;$i<=going_going_MAX_EXAMS;$i++) {
				if($form_state['values']['exam'.$i]!='0')
					$exams[]=$form_state['values']['exam'.$i];
			}
			db_update('vl_going')
				->fields(array(
					'gname' => $form_state['values']['gname'],
					'place' => $form_state['values']['place'],
					'waiting_room' => $form_state['values']['waiting_room'],
					'valid_exams' => implode(', ', $exams),
					'time' => $form_state['values']['time'],
					'department' => $form_state['values']['ownarrange']?$dep:NULL))
				->condition('gid', arg(3))
				->execute();
			watchdog('going',
				'!user modified schedule !gname.', array(
					'!user'=>$GLOBALS['user']->name,
					'!gname'=>$form_state['values']['gname']),
				WATCHDOG_INFO,
				l(t('View'), 'definations/going/edit/'.arg(3))
			);
			$form_state['redirect']='definations/going';
	}
}

function going_going_delete() {
	$r = db_select('vl_going', 'g')->fields('g')->condition('g.gid', arg(3))->execute()->fetchObject();
	$form=confirm_form(
		NULL,
		t('Confirm Going Deletion'),
		'definations/going',
		t('Are you sure you want to delete this going?').
			'<br/><div class="messages">'.
			_going_datetime_to_string($r->time).
			'<br/>'.
			$r->gname.
			'</div>',
		t('Delete'),
		t('Cancel')
	);
	return $form;
}


function going_going_delete_submit($form, &$form_state) {
	$r = db_select('vl_going', 'g')->fields('g')->condition('g.gid', arg(3))->execute()->fetchObject();
	db_delete('vl_going')
		->condition('gid', arg(3))
		->execute();
	
	drupal_set_message(t('!gname deleted.', array('!gname'=>$r->gname)));
	watchdog('going',
		'!user deleted schedule !gname.', array(
			'!user'=>$GLOBALS['user']->name,
			'!gname'=>$r->gname),
		WATCHDOG_INFO,
		l(t('View'), 'definations/going')
	);
	$form_state['redirect']='definations/going';
}

function going_assign_list() {
  $is_dep_only=user_access('administer own going')&&!user_access('administer going');

  $header = array(
  	array('data'=>t('Status'), 'field'=>'num'),
  	array('data'=>t('Schedule Name'), 'field'=>'gid', 'sort'=>'asc'),
  	array('data'=>t('Place'), 'field'=>'g.place'),
  	array('data'=>t('Existing people'), 'field'=>'num'),
  	array('data'=>t('Time'), 'field'=>'g.time'),
  	array('data'=>t('Operations'), 'colspan'=>'2'),
  );
  
  $query=db_select('vl_going', 'g')->where(variable_get('zhaoban_going_list_date_filter_'.$GLOBALS['user']->name,'1'))
	->fields('g',array('gid','gname','place','time'))
	->extend('PagerDefault')->limit(25)
	->extend('TableSort')
	->orderByHeader($header);

  if($is_dep_only) $query=$query->condition('department', $GLOBALS['user']->name);
  $result = $query->execute();

  $rows=array();
  
  foreach($result as $r) {
  	  $num=db_select('students_going','sg')
  	  	  ->fields('sg')
  	  	  ->groupBy('sg.uid')
  	  	  ->condition('sg.gid',$r->gid)
  	  	  ->countQuery()
  	  	  ->execute()->fetchField();
  	  if($num)
  	  	  if(going_print_orderlist_perm())
  	  	  	  $tmp_satus=l('<img src="'.base_path().drupal_get_path('module', 'going').'/printer.png" title="'.t('Print Order List').'"/>',"definations/arrange/printorderlist/$r->gid", array('html'=>true));
  	  	  else
  	  	  	  $tmp_satus='<img src="/misc/watchdog-ok.png"/>';
  	  else
  	  	  $tmp_satus='<img src="/misc/watchdog-error.png"/>';

  	  $rows[] = array(
  	  	  $tmp_satus,
  	  	  $r->gname,
  	  	  db_select('vl_room', 'r')->fields('r',array('rname'))->condition('r.rid', $r->place)->execute()->fetchField(),
  	  	  $num,
  	  	  '<nobr>'._going_datetime_to_string($r->time).'</nobr>',
  		  '<nobr>'.l(t('fill'), "definations/arrange/fill/$r->gid").'</nobr>',
  		  '<nobr>'.($num?l(t('empty'), "definations/arrange/empty/$r->gid"):'').'</nobr>',
  	  );
  }

  if(count($rows)==0) {
    $rows[] = array(array('data' => t('No going have been filled.'), 'colspan' => '7'));
  }
  
  $output = drupal_render(drupal_get_form('going_goinglist_filter'));
  $output .= theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');
  
  return $output;
  //var_dump($query->__toString());
  	  
  
  	  
  /*
  $sql=tablesort_sql($header);
  $rdbo = pager_query('SELECT g.gid, g.gname, g.place, g.time, count(sg.uid) AS num FROM {vl_going} g LEFT JOIN {students_going} sg ON g.gid=sg.gid '.$criteria.'GROUP BY g.gid'.$sql, 80, 0, 'SELECT count(*) FROM {vl_going} g '.$criteria);
  
  $rows = array();
  while($r=db_fetch_object($rdbo)) {
  	  if($r->num) {
  	  	  if(going_print_orderlist_perm())
  	  	  	  $tmp_satus=l('<img src="'.base_path().drupal_get_path('module', 'going').'/printer.png" title="'.t('Print Order List').'"/>',"definations/arrange/printorderlist/$r->gid", array('html'=>true));
  	  	  else
  	  	  	  $tmp_satus='<img src="/misc/watchdog-ok.png"/>';
  	  }
  	  else
  	  	  $tmp_satus='<img src="/misc/watchdog-error.png"/>';
  	  $rows[] = array(
  	  	  $tmp_satus,
  	  	  $r->gname,
  	  	  db_result(db_query('SELECT r.rname FROM {vl_room} r WHERE r.rid=\'%s\'', $r->place)),
  	  	  $r->num,
  	  	  '<nobr>'._going_datetime_to_string($r->time).'</nobr>',
  		  '<nobr>'.l(t('fill'), "definations/arrange/fill/$r->gid").'</nobr>',
  		  '<nobr>'.($r->num?l(t('empty'), "definations/arrange/empty/$r->gid"):'').'</nobr>',
  	  );
  }
  
  if(count($rows)==0) {
    $rows[] = array(array('data' => t('No going have been filled.'), 'colspan' => '7'));
  }
  
  $output = theme('table', $header, $rows);
  $output .= theme('pager');

  return $output;
  */
//  return '';
}

function going_assign_students($form, $form_state, $gid=NULL) {
	//var_dump(db_select('vl_going','g')->fields('g',array('valid_exams'))->condition('g.gid',$gid)->execute()->fetchField());
	$valid_exams=explode(', ',  db_select('vl_going','g')->fields('g',array('valid_exams'))->condition('g.gid',$gid)->execute()->fetchField());
	//$valid_exams=explode(', ', db_result(db_query('SELECT g.valid_exams FROM {vl_going} g WHERE g.gid=\'%s\'', $gid)));
	//var_dump($valid_exams);exit;
	
	$students=array();
	$form=array();
	
	$form['desc'] = array(
		'#type' => 'markup',
		'#markup' => '<div class=\'messages\'><p>'.t('Note: System will shuffle these students again after you click Getin button. So the order you are seeing is not the final order you will get.').'</p><p>'.t('If you do not satisfied with current shuttled result of students, you can reshuffle them.').'</p></div>',
	);
	
	$header=array(
		'rndnum' => array('data'=>t('No.')),
		'uid' => array('data'=>t('Student ID'), 'field'=>'s.uid'),
		//'realname' => array('data'=>t('Real Name')),
		'gender' => array('data'=>t('Gender'), 'field'=>'s.gender'),
		'profession' => array('data'=>t('Profession'), 'field'=>'s.profession_major'),
		'province' => array('data'=>t('Province'), 'field'=>'sk.province'),
		//'personalrecord' => array('data'=>t('Personnel record')),
		'addition' => array('data'=>t('Additional')),
	);
	
	//$going=db_fetch_object(db_query('SELECT * from {vl_going} g INNER JOIN {vl_room} r ON g.place=r.rid WHERE gid="%s"', $gid));
	$query=db_select('vl_going','g')->fields('g')->condition('g.gid',$gid);
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$going=$query->fields('r')->execute()->fetchObject();
	foreach($valid_exams as $exam) {
		//var_dump($exam);
		$citera='1';
		switch(substr($exam,0,1)) {
			case '1': 
				$citera='s.validated=1';
				break;
			case '2':
			case '3':
				$citera='s.validated=1 AND s.pass_round1_major=1';
				break;
		}
		
		if($going->cid) $citera .= " AND s.examplace='".$going->cid."'";
		$query=db_select('students','s')->fields('s',array('randnum','uid'));
		$query->innerJoin('students_going','sg','s.uid=sg.uid');
		$query->leftJoin('students_gk','sk','s.uid=sk.uid');
		$query=$query->where($citera)->condition('sg.eid',$exam)->isNull('sg.gid')->fields('sk',array('province'));
		//var_dump($query->__toString());
		
		$subquery=db_select('students_going','sg1')->condition('sg1.uid','sg.uid')->fields('sg1');
		$subquery->innerJoin('vl_going','g1','sg1.gid = g1.gid');
		$subquery=$subquery->condition('g1.time',$going->time)->condition('g1.gid',$gid,'<>');
		//var_dump($subquery->__toString());
		
		$query->notExists($subquery);
		//var_dump($query->__toString());
		$query=$query->extend('TableSort')->orderByHeader($header)->orderRandom();
		
		$rdbo=$query->execute();
		foreach($rdbo as $r) {
			$students[]=array($r->uid=>$exam);
			//var_dump($r);
		}
		
		//$rdbo=db_query('SELECT s.randnum as rnd, sg.uid, sk.province FROM {students} s INNER JOIN {students_going} sg ON s.uid=sg.uid LEFT JOIN {students_gk} sk ON s.uid=sk.uid WHERE %s AND sg.eid="%s" AND sg.gid IS NULL AND NOT EXISTS ( SELECT * FROM {students_going} sg1 INNER JOIN {vl_going} g1 ON sg1.gid = g1.gid WHERE sg1.uid = sg.uid AND g1.time = "%s" AND g1.gid <> "%s")'.tablesort_sql($header).' LIMIT 0,80', $citera, $exam, $going->time, $gid);
		//while($r=db_fetch_object($rdbo)) {
		//	$students[]=array($r->uid=>$exam);
		//}
	}
	//var_dump($students);
	// Out the info of the specific going
	
	drupal_set_title(t('Assign students').' - '.$going->gname);
	
	$form['info']=array(
		'#type' => 'markup',
		'#markup'=>'<div class="messages">'._going_datetime_to_string($going->time).' / '.$going->gname.' / '.$going->rname.'</div>',
	);
	$i=1;
	$options=array();
	foreach($students as $no) {
		foreach($no as $uid=>$exam) {
			$query=db_select('students','s')->fields('s',array('name','profession_major','gender'))->condition('s.uid',$uid);
			$query->leftJoin('students_contact','sc','s.uid=sc.uid');
			$query->leftJoin('students_gk','sk','s.uid=sk.uid');
			$query->innerJoin('vl_city_district','cd','s.examplace=cd.cid');
			$query=$query->fields('sk',array('province'))->fields('sc',array('personnel_record_at'))->fields('cd',array('name_simp'));
			$r=$query->execute()->fetchObject();
			$addition='';
			if(db_select('vl_exam','e')->fields('e',array('opus'))->condition('eid',$exam)->execute()->fetchField() > 0) {
				$dbr=unserialize(db_select('students_going','sg')->fields('sg',array('opus'))->condition('uid',$uid)->condition('eid',$exam)->execute()->fetchField());
				if(isset($dbr['eadditional']))
					$addition=t($dbr['eadditional']);
			}
			
			$options[$uid] = array(
				'rndnum' => (isset($options[$uid]['rndnum'])?$options[$uid]['rndnum']:$i++),
				'uid' => '<span title="'.$uid.'">'.substr_replace($uid, '**', 6, 2).'</span>',
				//'realname' => $r->name,
				'gender' => $r->gender=='2'?t('Female'):t('Male'),
				'profession' => db_select('vl_professions','p')->fields('p',array('pname'))->condition('p.pid',$r->profession_major)->execute()->fetchField(),
				'province' => $r->province?db_select('vl_province','p')->fields('p',array('name'))->condition('p.pid',$r->province)->execute()->fetchField():t('Our own student'),
				//'personalrecord' => $r->province?$r->personnel_record_at:t('Our own student'),
				'addition' => $addition,
			);
			$form[$uid] = array(
				'#type' => 'hidden',
				'#value' => $exam,
			);
			
			//$r=db_fetch_object(db_query('SELECT s.name, s.profession_major, s.gender, sk.province, sc.personnel_record_at FROM {students} s LEFT JOIN {students_contact} sc ON s.uid=sc.uid LEFT JOIN {students_gk} sk ON s.uid=sk.uid WHERE s.uid=\'%s\'', $uid));
			/*
			$form['uid'][$uid]=array('#value'=>$uid);
			$form['name'][$uid]=array('#value'=>$r->name);
			$form['eid'][$uid]=array('#type'=>'hidden','#value'=>$exam);
			$form['profession'][$uid]=array('#value'=>db_select('vl_professions','p')->fields('p',array('pname'))->condition('p.pid',$r->profession_major)->execute()->fetchField());
			$form['gender'][$uid]=array('#value'=>$r->gender=='2'?t('Female'):t('Male'));
			$form['province'][$uid]=array('#value'=>$r->province?db_select('vl_province','p')->fields('p',array('name'))->condition('p.pid',$r->province)->execute()->fetchField():t('Our own student'));
			$form['personnel'][$uid]=array('#value'=>$r->province?$r->personnel_record_at:t('Our own student'));*/
			/*
			if (db_result(db_query('SELECT opus FROM {vl_exam} WHERE eid=\'%s\'', $exam))) {
				//$dbr=unserialize(db_result(db_query('SELECT opus FROM {students_going} WHERE uid=\'%s\' AND eid=\'%s\'', $uid, $exam)));
				if ($dbr['eadditional'])
					$form['additional'][$uid]=array('#value'=>t($dbr['eadditional']));
				else $form['additional'][$uid]=array('#value'=>'');
			}
			$enabled[$uid]='';
			*/
		}
	}
	
	//var_dump($form);
	
	$form['students']=array(
	    '#type' => 'tableselect',
	    '#header' => $header,
	    '#options' => $options,
	    '#attributes' => array('class'=>array('assign_students')),
	    '#empty' => t('No suitable students.'),
	);
	//'#type'=>'checkboxes', '#options'=>$enabled, '#DANGEROUS_SKIP_CHECK' => TRUE);
	if(count($options)) {
		$form['getin']=array('#type'=>'submit', '#value'=>t('Get the selected students in'));
		$form['reshuffle']=array('#type'=>'button', '#value'=>t('Reshuffle all students'), '#validate'=>array());
	}
	
	return $form;
}

function going_assign_students_validate($form, &$form_state) {
	//var_dump($form_state['values']);exit;
	$form_values = array_filter($form_state['values']['students']);
	if (count($form_values) == 0) {
		form_set_error('students', t('No users selected.'));
	}
}

function going_assign_students_submit($form, &$form_state) {
	$students=array_keys(array_filter($form_state['values']['students']));
	shuffle($students);
	
	$query=db_select('students_going','sg')->condition('sg.gid',arg(3));
	$query->addExpression('MAX(sg.gorder)');
	$i=1+$query->execute()->fetchField();
	$exams=explode(', ',db_select('vl_going','g')->fields('g',array('valid_exams'))->condition('gid',arg(3))->execute()->fetchField());
	// If it is a writing exam, we should go with asc-sorted order
	//var_dump(db_select('vl_exam','e')->fields('e',array('etype'))->condition('eid',$exams[0])->execute()->fetchField());exit;
	if(db_select('vl_exam','e')->fields('e',array('etype'))->condition('eid',$exams[0])->execute()->fetchField()=='1')
		sort($students);
	for($j=0;$j<count($students);$j++) {
			$student=$students[$j];
			db_update('students_going')->fields(array(
				'gid' => arg(3),
				'gorder' => $i,
			))->condition('uid',$student)->condition('eid',$exams,'IN')->execute();
			//db_query('UPDATE {students} s SET randnum=rand() WHERE s.uid=\'%s\'',$student);
			$i++;
	}
	$form_state['redirect']='definations/arrange';
	
}

function going_assign_empty($form, $form_state, $gid) {
	$query=db_select('vl_going','g')->fields('g')->condition('g.gid',$gid);
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$query=$query->fields('r');
	$going=$query->execute()->fetchObject();
	//$going=db_fetch_object(db_query('SELECT * from {vl_going} g INNER JOIN {vl_room} r ON g.place=r.rid WHERE gid="%s"', $gid));

	return confirm_form(
		NULL,
		t('Confirm Emptying Going'),
		'definations/arrange',
		'<p>'.t('Are you sure you want to empty this going?').'</p>'.
			'<div class="messages">'._going_datetime_to_string($going->time).' / '.$going->gname.' / '.$going->rname.'</div>',
		t('Empty it'),
		t('Cancel')
	);
}

function going_assign_empty_submit($form, &$form_state) {
	$form_state['redirect']='definations/arrange';
	db_update('students_going')->fields(array(
		'gid' => NULL,
		'gorder' => NULL,
		))->condition('gid',arg(3))->execute();
}

function going_print_orderlist()
{
	$gid=arg(3);
	require_once(drupal_get_path('module','going').'/../tcpdf/config/lang/eng.php');
	require_once(drupal_get_path('module','going').'/../tcpdf/tcpdf.php');
	
	$query=db_select('vl_going','g')->fields('g')->condition('g.gid',$gid);
	$query->innerJoin('vl_room','r','g.place=r.rid');
	$going=$query->fields('r')->execute()->fetchObject();
	
	set_time_limit(300);

	// create new PDF document
	$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
	$pdf->SetProtection(array('modify','copy','extract'));

	// set document information
	$pdf->SetCreator(PDF_CREATOR);

	// Set font
	// dejavusans is a UTF-8 Unicode font, if you only need to
	// print standard ASCII chars, you can use core fonts like
	// helvetica or times to reduce file size.
	$pdf->SetFont('droidsansfallback', 'B', 14, '', true);
	// set default font subsetting mode
	$pdf->setFontSubsetting(true);

	$pdf->setPrintHeader(false);
	$pdf->setPrintFooter(false);

	$pdf->SetMargins(6, 6, 6);
	$pdf->SetAutoPageBreak(false);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	// ---------------------------------------------------------

	if(strpos($going->gname,'专业复试')===false) {
		// Add a page
		// This method has several options, check the source code documentation for more information.
		$pdf->AddPage();
		$pdf->SetFillColor(216,216,216);
		$pdf->SetDrawColor(0,0,0);
		$pdf->SetLineWidth(0.5);
		
		$pdf->setX(6);
		$pdf->setY(8);
		$pdf->Cell(42,20,'',1,0,'C',false);
		//$pdf->Rect(6,6,40,25,'S',array('all' => $style3));
		
		$pdf->setX(6);
		$pdf->setY(5.5);
		$pdf->SetFontSize(16);
		$pdf->Cell(20,16,intval(substr($going->time,4,2)).'月'.intval(substr($going->time,6,2)).'日',0,0,'L');
		$pdf->Cell(21,16,intval(substr($going->time,8,2)).':'.substr($going->time,10,2),0,1,'R');
		
		$pdf->setX(6);
		$pdf->setY(15);
		if($going->waiting_room)
			$placename='候:'.db_select('vl_room','r')->fields('r',array('rname'))->condition('rid',$going->waiting_room)->execute()->fetchField();
		//db_result(db_query('SELECT rname FROM {vl_room} WHERE rid=\'%s\'', $going->waiting_room));
		else
			$placename=$going->rname;
		//db_result(db_query('SELECT rname FROM {vl_room} WHERE rid=\'%s\'', $going->place));
		$pdf->Cell(41,16,$placename,0,0,'R');
		
		$pdf->SetFontSize(20);
		$pdf->Text(50,8,'中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生考试考试次序表');
		$pdf->LN();
		$pdf->SetFontSize(24);
		$pdf->SetX(50);
		$pdf->Cell(146,11,$going->gname,0,1,'C',false);
		
		$pdf->Line(6,39,200,39);
		
		$pdf->SetFontSize(12);
		$pdf->setXY(6,30);
		$pdf->Cell(10,10,'序号',0,0,'C');
		$pdf->Cell(23,10,'准考证号',0,0,'C');
		$pdf->Cell(18,10,'姓名',0,0,'C');
		$pdf->Cell(35,10,'专业',0,1,'C');

		$pdf->SetFillColor(0,0,0);
		$pdf->SetDrawColor(255,255,255);
		
		$query=db_select('students_going','sg')->fields('sg',array('gorder'))->condition('sg.gid',$gid);
		$query->innerJoin('students','s','s.uid=sg.uid');
		$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
		$query=$query->fields('s',array('uid','name'))->fields('p',array('pname'))->orderBy('gorder')->groupBy('s.uid');
		$students=$query->execute();
		//$students=db_query('SELECT sg.gorder as gorder, s.uid AS uid, s.name as cname, p.pname as profession FROM {students_going} sg INNER JOIN {students} s ON s.uid=sg.uid INNER JOIN {vl_professions} p ON s.profession_major=p.pid WHERE sg.gid=\'%s\' ORDER BY gorder', $gid);
		//while($student=db_fetch_object($students)) {
		foreach($students as $student) {
			if($student->gorder>31)
				$pdf->setX(110);
			else if($student->gorder<31)
				$pdf->setX(6);
			else {
				$pdf->setXY(110,30);
				$pdf->Cell(10,10,'序号',0,0,'C');
				$pdf->Cell(23,10,'准考证号',0,0,'C');
				$pdf->Cell(18,10,'姓名',0,0,'C');
				$pdf->Cell(35,10,'专业',0,1,'C');
				$pdf->setXY(110,40);
			}
			
			$pdf->SetTextColor(255,255,255);
			$pdf->Cell(10,8,$student->gorder,1,0,'C',true);
			$pdf->SetTextColor(0,0,0);
			$pdf->Cell(23,8,$student->uid,0,0,'C');
			$pdf->Cell(18,8,$student->name,0,0,'C');
			$pdf->Cell(35,8,$student->pname,0,1,'C');

		} //while($student=db_fetch_object($students))
	
	} //if(strpos($going->gname,'专业复试')===false)
	else {
		$pdf->SetAutoPageBreak(true);
		// Add a page
		// This method has several options, check the source code documentation for more information.
		$pdf->AddPage();
		$pdf->SetFillColor(216,216,216);
		$pdf->SetDrawColor(0,0,0);
		$pdf->SetLineWidth(0.5);
		
		$pdf->setXY(159,8);
		$pdf->Cell(43,20,'',1,0,'C',false);
		//$pdf->Rect(6,6,40,25,'S',array('all' => $style3));
		
		$pdf->SetFontSize(20);
		$pdf->Text(8,8,'中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生考试考试分组表');
		$pdf->LN();
		$pdf->SetFontSize(24);
		$pdf->SetX(8);
		$pdf->Cell(146,11,$going->gname,0,1,'C',false);
		
		$pdf->setXY(160,5.5);
		$pdf->SetFontSize(16);
		$pdf->Cell(20,16,intval(substr($going->time,4,2)).'月'.intval(substr($going->time,6,2)).'日',0,0,'L');
		$pdf->Cell(21,16,intval(substr($going->time,8,2)).':'.substr($going->time,10,2),0,1,'R');
		
		$pdf->setXY(160,15);
		if($going->waiting_room)
			$placename='候:'.db_select('vl_room','r')->fields('r',array('rname'))->condition('rid',$going->waiting_room)->execute()->fetchField();
		//db_result(db_query('SELECT rname FROM {vl_room} WHERE rid=\'%s\'', $going->waiting_room));
		else
			$placename=$going->rname;
		$pdf->Cell(41,16,$placename,0,0,'R');
		
		$pdf->setXY(8,32);
		$pdf->SetFontSize(22);
		$pdf->SetCellPadding(3);
		$pdf->MultiCell(195,25,"本组所有考生均需在".intval(substr($going->time,8,2)).':'.substr($going->time,10,2)."全部到场，现场抽签决定考试次序。".intval(substr($going->time,8,2)).':'.substr($going->time,10,2)."仍未到场的考生，视为弃考。",1);
		
		$pdf->Line(6,67,204,67);
		
		$pdf->SetFontSize(14);
		$pdf->setXY(6,57);
		$pdf->Cell(40,10,'准考证号',0,0,'C');
		$pdf->Cell(50,10,'姓名',0,0,'C');
		$pdf->setX(106);
		$pdf->Cell(40,10,'准考证号',0,0,'C');
		$pdf->Cell(50,10,'姓名',0,1,'C');
		
		//$students=db_query('SELECT sg.gorder as gorder, s.uid AS uid, s.name as cname FROM {students_going} sg INNER JOIN {students} s ON s.uid=sg.uid WHERE sg.gid=\'%s\' ORDER BY gorder', $gid);
		$query=db_select('students_going','sg')->fields('sg',array('gorder'))->condition('sg.gid',$gid);
		$query->innerJoin('students','s','s.uid=sg.uid');
		$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
		$query=$query->fields('s',array('uid','name'))->fields('p',array('pname'))->orderBy('gorder')->groupBy('s.uid');
		$students=$query->execute();
		$i=0;
		$pdf->SetFontSize(20);
		//while($student=db_fetch_object($students)) {
		foreach($students as $student) {
			$pdf->setX($i*100+6);
			$pdf->Cell(40,10,$student->uid,0,0,'C');
			$pdf->Cell(50,10,$student->name,0,0,'C');
			if($i) $pdf->LN();
			$i=1-$i;
		} //while($student=db_fetch_object($students))
	}
	
	//file_delete($fname);
	$pdf->Output('orderlist.pdf', 'I');
	
	//db_query('UPDATE {vl_going} SET regenerated=1 WHERE gid=\'%s\'', $gid);

}

/*
function going_print_orderlist() {
	$filename='orderlist_report_'.arg(3).'.pdf';
	$url=base_path().file_directory_path().'/'.$filename;
	$realfile=realpath(file_directory_path()).'/'.$filename;
	
	//var_dump($filen);
	//if(db_result(db_query('SELECT regenerated FROM {vl_going} WHERE gid=\'%s\'', arg(3)))) {
	if(0) {
		drupal_goto($url);
	}
	else {
		going_output_orderlist_pdf(arg(3), $realfile);
		drupal_goto($url);
	}
}

function going_output_orderlist_pdf($gid, $fname)
{
	require_once(drupal_get_path('module','going').'/../tcpdf/config/lang/eng.php');
	require_once(drupal_get_path('module','going').'/../tcpdf/tcpdf.php');
	
	$going=db_fetch_object(db_query('SELECT * FROM {vl_going} WHERE gid=\'%s\'', $gid));
	
	set_time_limit(300);

	// create new PDF document
	$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
	$pdf->SetProtection(array('modify','copy','extract'));

	// set document information
	$pdf->SetCreator(PDF_CREATOR);

	// Set font
	// dejavusans is a UTF-8 Unicode font, if you only need to
	// print standard ASCII chars, you can use core fonts like
	// helvetica or times to reduce file size.
	$pdf->SetFont('droidsansfallback', 'B', 14, '', true);
	// set default font subsetting mode
	$pdf->setFontSubsetting(true);

	$pdf->setPrintHeader(false);
	$pdf->setPrintFooter(false);

	$pdf->SetMargins(6, 6, 6);
	$pdf->SetAutoPageBreak(false);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	// ---------------------------------------------------------

	if(strpos($going->gname,'专业复试')===false) {
		// Add a page
		// This method has several options, check the source code documentation for more information.
		$pdf->AddPage();
		$pdf->SetFillColor(216,216,216);
		$pdf->SetDrawColor(0,0,0);
		$pdf->SetLineWidth(0.5);
		
		$pdf->setX(6);
		$pdf->setY(8);
		$pdf->Cell(42,20,'',1,0,'C',false);
		//$pdf->Rect(6,6,40,25,'S',array('all' => $style3));
		
		$pdf->setX(6);
		$pdf->setY(5.5);
		$pdf->SetFontSize(16);
		$pdf->Cell(20,16,intval(substr($going->time,4,2)).'月'.intval(substr($going->time,6,2)).'日',0,0,'L');
		$pdf->Cell(21,16,intval(substr($going->time,8,2)).':'.substr($going->time,10,2),0,1,'R');
		
		$pdf->setX(6);
		$pdf->setY(15);
		if($going->waiting_room)
			$placename='候:'.db_result(db_query('SELECT rname FROM {vl_room} WHERE rid=\'%s\'', $going->waiting_room));
		else
			$placename=db_result(db_query('SELECT rname FROM {vl_room} WHERE rid=\'%s\'', $going->place));
		$pdf->Cell(41,16,$placename,0,0,'R');
		
		$pdf->SetFontSize(20);
		$pdf->Text(50,8,'中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生考试考试次序表');
		$pdf->LN();
		$pdf->SetFontSize(24);
		$pdf->SetX(50);
		$pdf->Cell(146,11,$going->gname,0,1,'C',false);
		
		$pdf->Line(6,39,200,39);
		
		$pdf->SetFontSize(12);
		$pdf->setXY(6,30);
		$pdf->Cell(10,10,'序号',0,0,'C');
		$pdf->Cell(23,10,'准考证号',0,0,'C');
		$pdf->Cell(18,10,'姓名',0,0,'C');
		$pdf->Cell(35,10,'专业',0,1,'C');

		$pdf->SetFillColor(0,0,0);
		$pdf->SetDrawColor(255,255,255);
		
		$students=db_query('SELECT sg.gorder as gorder, s.uid AS uid, s.name as cname, p.pname as profession FROM {students_going} sg INNER JOIN {students} s ON s.uid=sg.uid INNER JOIN {vl_professions} p ON s.profession_major=p.pid WHERE sg.gid=\'%s\' ORDER BY gorder', $gid);
		while($student=db_fetch_object($students)) {
			if($student->gorder>31)
				$pdf->setX(110);
			else if($student->gorder<31)
				$pdf->setX(6);
			else {
				$pdf->setXY(110,30);
				$pdf->Cell(10,10,'序号',0,0,'C');
				$pdf->Cell(23,10,'准考证号',0,0,'C');
				$pdf->Cell(18,10,'姓名',0,0,'C');
				$pdf->Cell(35,10,'专业',0,1,'C');
				$pdf->setXY(110,40);
			}
			
			$pdf->SetTextColor(255,255,255);
			$pdf->Cell(10,8,$student->gorder,1,0,'C',true);
			$pdf->SetTextColor(0,0,0);
			$pdf->Cell(23,8,$student->uid,0,0,'C');
			$pdf->Cell(18,8,$student->cname,0,0,'C');
			$pdf->Cell(35,8,$student->profession,0,1,'C');

		} //while($student=db_fetch_object($students))
	
	} //if(strpos($going->gname,'专业复试')===false)
	else {
		$pdf->SetAutoPageBreak(true);
		// Add a page
		// This method has several options, check the source code documentation for more information.
		$pdf->AddPage();
		$pdf->SetFillColor(216,216,216);
		$pdf->SetDrawColor(0,0,0);
		$pdf->SetLineWidth(0.5);
		
		$pdf->setXY(159,8);
		$pdf->Cell(43,20,'',1,0,'C',false);
		//$pdf->Rect(6,6,40,25,'S',array('all' => $style3));
		
		$pdf->SetFontSize(20);
		$pdf->Text(8,8,'中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生考试考试分组表');
		$pdf->LN();
		$pdf->SetFontSize(24);
		$pdf->SetX(8);
		$pdf->Cell(146,11,$going->gname,0,1,'C',false);
		
		$pdf->setXY(160,5.5);
		$pdf->SetFontSize(16);
		$pdf->Cell(20,16,intval(substr($going->time,4,2)).'月'.intval(substr($going->time,6,2)).'日',0,0,'L');
		$pdf->Cell(21,16,intval(substr($going->time,8,2)).':'.substr($going->time,10,2),0,1,'R');
		
		$pdf->setXY(160,15);
		if($going->waiting_room)
			$placename='候:'.db_result(db_query('SELECT rname FROM {vl_room} WHERE rid=\'%s\'', $going->waiting_room));
		else
			$placename=db_result(db_query('SELECT rname FROM {vl_room} WHERE rid=\'%s\'', $going->place));
		$pdf->Cell(41,16,$placename,0,0,'R');
		
		$pdf->setXY(8,32);
		$pdf->SetFontSize(22);
		$pdf->SetCellPadding(3);
		$pdf->MultiCell(195,25,"本组所有考生均需在".intval(substr($going->time,8,2)).':'.substr($going->time,10,2)."全部到场，现场抽签决定考试次序。".intval(substr($going->time,8,2)).':'.substr($going->time,10,2)."仍未到场的考生，视为弃考。",1);
		
		$pdf->Line(6,67,204,67);
		
		$pdf->SetFontSize(14);
		$pdf->setXY(6,57);
		$pdf->Cell(40,10,'准考证号',0,0,'C');
		$pdf->Cell(50,10,'姓名',0,0,'C');
		$pdf->setX(106);
		$pdf->Cell(40,10,'准考证号',0,0,'C');
		$pdf->Cell(50,10,'姓名',0,1,'C');
		
		$students=db_query('SELECT sg.gorder as gorder, s.uid AS uid, s.name as cname FROM {students_going} sg INNER JOIN {students} s ON s.uid=sg.uid WHERE sg.gid=\'%s\' ORDER BY gorder', $gid);
		$i=0;
		$pdf->SetFontSize(20);
		while($student=db_fetch_object($students)) {
			$pdf->setX($i*100+6);
			$pdf->Cell(40,10,$student->uid,0,0,'C');
			$pdf->Cell(50,10,$student->cname,0,0,'C');
			if($i) $pdf->LN();
			$i=1-$i;
		} //while($student=db_fetch_object($students))
	}
	
	file_delete($fname);
	$pdf->Output($fname, 'F');
	
	db_query('UPDATE {vl_going} SET regenerated=1 WHERE gid=\'%s\'', $gid);

}

function going_cron() {
	$goings=db_query('SELECT gid FROM {vl_going} WHERE regenerated=0');


	while($going=db_fetch_object($goings))
		if(db_result(db_query('SELECT count(*) FROM {students_going} WHERE gid=\'%s\'', $going->gid)))
			going_output_orderlist_pdf($going->gid,realpath(file_directory_path()).'/orderlist_report_'.$going->gid.'.pdf');
}
*/
