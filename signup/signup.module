<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * @file
 * Defines the the progress of signup.
 */
 
include_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'signup') . '/signup.inc');

function signup_init() {
	drupal_add_css(drupal_get_path('module', 'exams') .'/exams.css');
	drupal_add_js(drupal_get_path('module', 'signup') .'/signup.js');
}

/**
 * Implementation of hook_help().
 */
function signup_help($path, $arg) {
	switch ($path) {
		case 'user/register':
			$output = t('Before you signup, it is suggested you must read the registration guide.');
			$output .= l(t('For demo, please click here.'), 'sites/default/files/zhaoban_demo.htm', array('attributes' => array('target' => array('_blank'))));
			$output .= '<br/><br/><span class="error"><b>';
			if(module_exists('onlinecharge')) {
				$output .= t('You will need to pay the fee online, please get it ready before starting signing up.').'<br/>';
			}
			$output .= t('Please make sure you have your digital photo ready, otherwise you cannot proceed.');
			$output .= '</b></span>';
			break;
		case 'signup/overview':
		case 'signup/overview/province':
			$output = t('Get an overview of how many students have signed up as a draft.');
			break;
		case 'signup/validated':
			$output = t('Check how many students who have validated till now.');
			break;
		case 'signup/passround1':
			$output = t('List all the students who have passed round 1.');
			break;
		case 'signup/passround3':
			$output = t('List all the students who have passed round 3.');
			break;
		case 'signup/passroundg':
			$output = t('List all the students who have passed round G.');
			break;
		case 'signup/passthrough':
			$output = t('You may use this feature to preset all the students who should pass through all the exam without attending actual examinations.');
			$output.= t('Those students will be forced to select corresponding profession, and do not need to fulfill all the exams.');
			$output.= t('And, the most important part is, all the scores of those students will be overwritten as 100 automatically by system at all time.');
			break;
		case 'signup/search/%':
			$output = t('Search students by various citera.');
			break;
	}
	if (isset($output))
		return '<p>'.$output.'</p>';
}

/**
 * Implementation of hook_permission
 */
function signup_permission() {
	return array(
		'preset passthrough' => array(
			'title' => t('Preset passthrough students'),
		),
		'view draft' => array(
			'title' => t('View signed-up students'),
		),
		'view validated' => array(
			'title' => t('View validated students'),
		),
		'view passround1' => array(
			'title' => t('View those passed the 1st round examination'),
		),
		'view passround3' => array(
			'title' => t('View those passed the profession examination'),
		),
		'view passroundg' => array(
			'title' => t('View those is marked'),
		),
		'view own draft' => array(
			'title' => t('View owned signed-up students'),
		),
		'view own validated' => array(
			'title' => t('View owned validated students'),
		),
		'view own passround1' => array(
			'title' => t('View owned those passed the 1st round examination'),
		),
		'view own passround3' => array(
			'title' => t('View owned those passed the profession examination'),
		),
		'view own passroundg' => array(
			'title' => t('View owned those marked'),
		),
		'modify students info' => array(
			'title' => t('Modify students info'),
		),
		'print user report' => array(
			'title' => t('Print users report'),
		),
		'print admission ticket' => array(
			'title' => t('Print Admission Ticket'),
		),
	);
}


/**
 * Implementation of hook_menu().
 */
function signup_menu() {
	$items['signup'] = array(
		'title' => 'Students',
		'description' => "Check the progress of students signup",
		'page callback' => 'signup_blocklist',
		'access callback' => 'signup_check_access',
		'expanded' => TRUE,
	);

	$items['signup/schools_autocompletion'] = array(
		'title' => 'School Autocompletion',
		'page callback' => 'signup_schools_autocomplete',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	$items['signup/search/%'] = array(
		'title' => 'Search students',
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
		'page callback' => 'signup_search_students',
		'page arguments' => array(2),
		'access callback' => 'user_access',
		'access arguments'=> array('access user profiles'),
	);

	$items['signup/passthrough'] = array(
		'title' => 'Preset passthrough students',
		'description' => "Preset passthrough students",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('signup_preset_passthrough'),
		'access callback' => 'user_access',
		'access arguments'=> array('preset passthrough'),
	);
	$items['signup/overview'] = array(
		'title' => 'Students overview',
		'description' => "Check the draft of students signup",
		'page callback' => 'signup_overview_by_profession',
		'access callback' => 'signup_access_overview',
		'access arguments'=> array(2),
	);
	$items['signup/overview/profession'] = array(
		'title' => 'By Profession',
		'description' => "Check the draft of students signup",
		'page callback' => 'signup_overview_by_profession',
		'access callback' => 'signup_access_overview',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['signup/overview/profession/%profession'] = array(
		'title' => 'By Profession',
		'description' => "Check the draft of students signup",
		'page callback' => 'signup_overview_by_profession_detail',
		'page arguments' => array(3),
		'access callback' => 'signup_access_overview',
		'access arguments'=> array(2),
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
	);
	$items['signup/overview/province'] = array(
		'title' => 'By Province',
		'page callback' => 'signup_overview_by_province',
		'type' => MENU_LOCAL_TASK,
		'access callback' => 'user_access',
		'access arguments'=> array('view draft'),
	);

	$items['signup/overview/province/%province'] = array(
		'title' => 'By Profession',
		'description' => "Check the draft of students signup",
		'page callback' => 'signup_overview_by_province_detail',
		'page arguments' => array(3),
		'access callback' => 'signup_access_overview',
		'access arguments'=> array(2),
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
	);
	$items['signup/2ndround'] = array(
		'title' => 'View 2nd round students',
		'description' => "Check the students which will be enrolled into 2nd round examination",
		'page callback' => 'signup_2nd_round_by_profession',
		'access callback' => 'signup_2nd_overview',
	);
	$items['signup/2ndround/profession'] = array(
		'title' => 'By Profession',
		'description' => "Check the students which will be enrolled into 2nd round examination",
		'page callback' => 'signup_2nd_round_by_profession',
		'access callback' => 'signup_2nd_overview',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['signup/2ndround/profession/%profession'] = array(
		'title' => 'By Profession',
		'description' => "Check individual profession",
		'page callback' => 'signup_2nd_round_by_profession_detail',
		'page arguments' => array(3),
		'access callback' => 'signup_2nd_overview',
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
	);
	$items['signup/3rdround'] = array(
		'title' => 'View 3rd round students',
		'description' => "Check the students which will be enrolled into 3rd round examination",
		'page callback' => 'signup_3rd_round_by_profession',
		'access callback' => 'signup_3rd_overview',
	);
	$items['signup/3rdround/profession'] = array(
		'title' => 'By Profession',
		'description' => "Check the students which will be enrolled into 3rd round examination",
		'page callback' => 'signup_3rd_round_by_profession',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access callback' => 'signup_3rd_overview',
	);
	$items['signup/3rdround/profession/%profession'] = array(
		'title' => 'By Profession',
		'description' => "Check individual profession",
		'page callback' => 'signup_3rd_round_by_profession_detail',
		'page arguments' => array(3),
		'access callback' => 'signup_3rd_overview',
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
	);
	$items['signup/3rdround/province'] = array(
		'title' => 'By Province',
		'description' => "Check the students which will be enrolled into 3rd round examination",
		'page callback' => 'signup_3rd_round_by_province',
		'type' => MENU_LOCAL_TASK,
		'access callback' => 'signup_3rd_overview',
	);
	$items['signup/3rdround/province/%province'] = array(
		'title' => 'By Province',
		'description' => "Check individual profession",
		'page callback' => 'signup_3rd_round_by_province_detail',
		'page arguments' => array(3),
		'access callback' => 'signup_3rd_overview',
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
	);
	$items['signup/3rdround/province/%province/download'] = array(
		'title' => 'Download database',
		'description' => "Download standard database for this province",
		'page callback' => 'signup_3rd_round_by_province_download',
		'page arguments' => array(3),
		'access callback' => 'signup_3rd_overview',
		'type' => MENU_CALLBACK,
	);
	$items['signup/3rdround/province/%province/report'] = array(
		'title' => 'Print Report',
		'description' => "Download printable report for this province",
		'page callback' => 'signup_3rd_round_by_province_report',
		'page arguments' => array(3),
		'access callback' => 'signup_3rd_overview',
		'type' => MENU_CALLBACK,
	);
	$items['signup/ground'] = array(
		'title' => 'View gaokao round students',
		'description' => "Check the students which will be enrolled into gaokao round examination",
		'page callback' => 'signup_ground_by_profession',
		'access callback' => 'signup_ground_overview',
	);
	$items['signup/ground/profession'] = array(
		'title' => 'By Profession',
		'description' => "Check the students which will be enrolled into gaokao round examination",
		'page callback' => 'signup_ground_by_profession',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access callback' => 'signup_ground_overview',
	);
	$items['signup/ground/profession/%profession'] = array(
		'title' => 'By Profession',
		'description' => "Check individual profession",
		'page callback' => 'signup_ground_by_profession_detail',
		'page arguments' => array(3),
		'access callback' => 'signup_ground_overview',
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
	);
	$items['signup/ground/province'] = array(
		'title' => 'By Province',
		'description' => "Check the students which will be enrolled into gaokao round examination",
		'page callback' => 'signup_ground_by_province',
		'type' => MENU_LOCAL_TASK,
		'access callback' => 'signup_ground_overview',
	);
	$items['signup/ground/province/%province'] = array(
		'title' => 'By Province',
		'description' => "Check individual profession",
		'page callback' => 'signup_ground_by_province_detail',
		'page arguments' => array(3),
		'access callback' => 'signup_ground_overview',
		'type' => MENU_VISIBLE_IN_BREADCRUMB,
	);
	$items['signup/ground/province/%province/report'] = array(
		'title' => 'Print Report',
		'description' => "Download printable report for this province",
		'page callback' => 'signup_ground_by_province_report',
		'page arguments' => array(3),
		'access callback' => 'signup_ground_overview',
		'type' => MENU_CALLBACK,
	);
	$items['user/%user/report'] = array(
		'title' => 'Print Signup Report',
		'page callback' => 'signup_report',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 10,
		'access callback' => 'signup_report_perm',
		'access arguments'=> array(1),
	);
	$items['user/%user/ticket'] = array(
		'title' => 'Print Admission Ticket',
		'page callback' => 'signup_ticket_report',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 11,
		'access callback' => 'signup_ticket_report_perm',
		'access arguments'=> array(1),
	);
	$items['user/%user/%/picture.jpg'] = array(
		'title' => 'Fetch picture of student',
		'page callback' => 'signup_picture',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access callback' => 'signup_picture_perm',
		'access arguments'=> array(1,2),
	);  
	return $items;
}

function signup_access_overview($ar=NULL) {
	if($ar=='province') return user_access('view draft');
	else return user_access('view draft')||user_access('view own draft');
}

function signup_check_access() {
	return user_access('view draft')||user_access('view own draft')||user_access('preset passthrough');
}

function signup_2nd_overview() {
	$r=db_select('students', 's')->fields('s')->condition('pass_round1_major','0','<>')->countQuery()->execute()->fetchField();
	return (user_access('view passround1') || user_access('view own passround1'))&& $r;
}

function signup_3rd_overview() {
	$r=db_select('students', 's')->fields('s')->condition('pass_round3_major','0','<>')->countQuery()->execute()->fetchField();
	return user_access('view passround3') && $r;
}

function signup_ground_overview() {
	$r=db_select('students', 's')->fields('s')->condition('pass_roundg_major','0','<>')->countQuery()->execute()->fetchField();
	return user_access('view passroundg') && $r;
}

function signup_report_perm($uid) {
	return user_access('print user report') && db_select('students', 's')->fields('s')->condition('uid', $uid->name)->countQuery()->execute()->fetchField();
}

function signup_picture_perm($user,$md5=NULL) {
	if(!user_view_access($user)) return FALSE;
	$query=db_select('students','s')->fields('s',array('picture'))->condition('uid', $user->name);
	$img_tmp=$query->execute()->fetchField();
	if(substr(md5($img_tmp), 0,4)!=$md5) return FALSE;
	if($img_tmp)
		$test=imagecreatefromstring(base64_decode($img_tmp));
	else $test=false;
	if($test)
		imagedestroy($test);
	return $test != FALSE;
}

/**
 * Provide a single block from the administration menu as a page.
 * This function is often a destination for these blocks.
 * For example, 'admin/content/types' needs to have a destination to be valid
 * in the Drupal menu system, but too much information there might be
 * hidden, so we supply the contents of the block.
 *
 * @return
 *   The output HTML.
 */
function signup_blocklist() {
	$item = menu_get_item();
	$content = system_admin_menu_block($item);

	return theme('admin_block_content', array('content' => $content));
}

function genRandomString($len) 
{ 
	$chars = array( 
		"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",  
		"l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",  
		"w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G",  
		"H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",  
		"S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2",  
		"3", "4", "5", "6", "7", "8", "9" 
	); 
	$charsLen = count($chars) - 1; 

	shuffle($chars);

	$output = ""; 
	for ($i=0; $i<$len; $i++) 
	{ 
		$output .= $chars[mt_rand(0, $charsLen)]; 
	} 

	return $output; 

}

function signup_get_random_mail_address(){
	return genRandomString(10).'@'.genRandomString(5).'.'.genRandomString(5).".com";
}

function signup_user_load($users) {
	$uids=array_keys($users);
	foreach($uids as $uid) {
		$users[$uid]->ucategory=db_select('students','s')->fields('s',array('ucategory'))->condition('uid',$users[$uid]->name)->execute()->fetchField();
	}
}

function signup_user_delete($account) {
	db_delete('students')
		->condition('uid', $account->name)
		->execute();
	db_delete('students_contact')
		->condition('uid', $account->name)
		->execute();
	db_delete('students_gk')
		->condition('uid', $account->name)
		->execute();
	db_delete('students_going')
		->condition('uid', $account->name)
		->execute();
}

function signup_user_goto($user) {

	if(!array_key_exists('5', $user->roles)) return;

	$r=_signup_determine_period($user);
	drupal_get_messages('error');
	

	$perm = (user_access('administer users') || $user->uid==$GLOBALS['user']->uid) && $GLOBALS['user']->uid !=1;
	if($perm)
	switch($r) {
		case signup_progress_PERSONALINFORMATION:
			drupal_goto('user/'.$user->uid.'/edit');
			return;
		case signup_progress_PROFESSION:
			drupal_goto('user/'.$user->uid.'/edit/'.signup_user_PROFESSION);
			return;
		case signup_progress_EXAM:
			drupal_goto('user/'.$user->uid.'/edit/'.signup_user_EXAM);
			return;
		case signup_progress_CONTACT:
			drupal_goto('user/'.$user->uid.'/edit/'.signup_user_CONTACT);
			return;
		case signup_progress_GAOKAO:
			drupal_goto('user/'.$user->uid.'/edit/'.signup_user_GAOKAO);
			return;
		case signup_progress_PAYMENT:
			drupal_get_messages('status');
			drupal_set_message('<big>'.t('You\'ve finished signing up progress. Now you should pay the fees online.').'</big>');
			drupal_set_message('<big>'.t('Now you should pay the fees online.').'</big>');
			drupal_goto('user/'.$user->uid.'/payment');
			return;
		case signup_progress_FINISH:
			drupal_get_messages('status');
			drupal_set_message('<big>'.t('You\'ve finished signing up progress. Please write down your examination ID and your password, then keep them in a safe place.').'</big>');
			if(arg(2)) drupal_goto('user/'.$user->uid);
	}

}

function signup_form_user_login_alter(&$form, &$form_state) {
	$form['name']['#attributes']['placeholder']=variable_get('zhaoban_current_year',date('Y')).'BXXXX';
}

function signup_form_user_register_form_alter(&$form, &$form_state) {
	
	// we don't need email address for this site
	$form['account']['mail']['#type']='hidden';
	$form['account']['mail']['#value']=signup_get_random_mail_address();
	
	// If guest is about to register as student
	if(!user_access('administer users')) {
		drupal_set_title(t('Sign up for new users'));

		// we are about to rewrite the whole register form
		unset($form['account']['mail']);
		unset($form['account']['name']);
		unset($form['account']['pass']);
		
		$form["actions"]['submit']['#value'] = t('Begin sign up');
		$form['#validate'] = array('signup_form_user_register_form_validate');
		$form['#submit'] = array('signup_form_user_register_form_submit');
		$form['ucategory'] = array(
			'#type' => 'radios',
			'#required' => TRUE,
			'#options' => array(
				'0' => t('I\'m a student of CCOM, and would like to take a secondary profession.'),
				'1' => t('I\'m a student inside China mainland.'),
				'2' => t('I\'m a Chinese student located in Hong Kong, Macau, Taiwan or outside China.'),
				'3' => t('I\'m a foreigner.'),
			),
			'#default_value' => '1',
		);
	}
	
}

function signup_form_user_register_form_validate($form, $form_state) {
}

// Hook functiono to take over the regsiter routine
function signup_form_user_register_form_submit($form, &$form_state) {
	$data=array();
	
	// Generate a radom password at 6 bit
	$data['pass']=user_password(6);
	$data['status']=1;
	$data['ucategory']=$form_state['values']['ucategory'];
	$data['mail']=signup_get_random_mail_address();
	$data['roles']=array( '5' => 'students');
	
	// Now generating the ID number of the student
	do {
		$sid=sprintf('%sB%04d', variable_get('zhaoban_current_year',date('Y')), mt_rand(1,9999));
		$query=db_select('users','u')->condition('u.name', $sid)->fields('u');
		$cancontinue=$query->countQuery()->execute()->fetchField();
	} while ($cancontinue>=1);
	$data['name']=$sid;
	$data['contact']=false;
	
	// Create the user !
	$user=user_save('',$data);
	
	// Affect our own table now
	db_insert('students')->fields(array(
		'uid' => $data['name'],
		'ucategory' => $data['ucategory'],
	))->execute();
	db_insert('students_gk')->fields(array(
		'uid' => $data['name'],
	))->execute();
	
	// Thanks god, we could output the username and password via message
	drupal_set_message(t("<p>Welcome registering at !site. For your convenient, we've assigned you a unique examination ID and the corresponding password. You will need to use the combination of examination ID and the password to access this site. Please write them down and keep them in a safe place. <span class=\"error\">The examination ID and the password are both case sensitive.</span></p><p>Your exam ID: <span class=\"error\">!username</span></p><p>Your current password: <span class=\"error\"><code>!password</code></span></p><p><em>Of course, you could change your password now, by typing the password you want twice.</em></p><p>Now, please fill in the following information, so that we could know who you are. You'll need to provide the correct information when resetting your password.</p>",
		array('!username'=>$data['name'], '!password'=>$data['pass'], '!site'=>variable_get('site_name', ''))));
	
	// We need to fill up more information after login
	$data['uid']=user_authenticate($data['name'], $data['pass']);
	user_login_submit(array(),$data);
	$form_state['redirect']='user/'.$data['uid'].'/edit';
}

function signup_form_user_profile_form_alter(&$form, $form_state) {
	$form['account']['current_pass']['#description']=t('Enter your current password to change the password.').t('If you forgot current password, <a href="@url">please click here</a> to reset password.', array('@url'=>'/user/password'));
	if(isset($form['account']['mail']) && $form['#user']->uid <> 1)
		$form['account']['mail']['#type']='hidden';
	if(in_array('5',array_keys($form['#user']->roles)) && !user_access('administer users'))
		$form['account']['name']['#disabled']=TRUE;
	if(user_access('administer users')) return $form;
	if(in_array('5',array_keys($form['#user']->roles)))
	switch(arg(3)) {
		case signup_user_PROFESSION:
			$form=signup_user_professions_form($form, $form_state); break;
		case signup_user_EXAM:
			$form=signup_user_examinations_form($form, $form_state); break;
		case signup_user_CONTACT:
			$form=signup_user_contact_form($form, $form_state); break;
		case signup_user_GAOKAO:
			$form=signup_user_gaokao_form($form, $form_state); break;
		default:
			$form=signup_user_account_form($form, $form_state);
	}
	return $form;
}

function signup_user_update(&$edit, $account, $category) {
	if($category=='account' && user_access('administer users')) {
		$user=$edit['original'];
		if(isset($edit['name']) && $user->name != $edit['name']) {
			db_update('students')->condition('uid',$user->name)->fields(array(
				'uid' => $edit['name']
			))->execute();
			db_update('students_gk')->condition('uid',$user->name)->fields(array(
				'uid' => $edit['name']
			))->execute();
			db_update('students_contact')->condition('uid',$user->name)->fields(array(
				'uid' => $edit['name']
			))->execute();
			db_update('students_going')->condition('uid',$user->name)->fields(array(
				'uid' => $edit['name']
			))->execute();
			db_update('students_score')->condition('uid',$user->name)->fields(array(
				'uid' => $edit['name']
			))->execute();
		}
	}
}

function signup_user_account_form($form, $form_state) {
	
	$user=$form['#user'];
	
	$form['account']['#type']='fieldset';
	$form['account']['#collapsible']=TRUE;
	$form['account']['#collapsed']=TRUE;
	$form['account']['#title'] = t('Account & Password');

	$form['account']['current_pass']['#description']=t('Enter your current password to change the password.').t('If you forgot current password, <a href="@url">please click here</a> to reset password.', array('@url'=>'/user/password'));
	// we don't need email address for this site
	
	// we don't want the student name to be modified
	if(in_array('5',array_keys($form['#user']->roles))) {
		$form['account']['name']['#required']=FALSE;
		$form['account']['name']['#value']=$form['account']['name']['#default_value'];
		$form['account']['name']['#disabled']=TRUE;
	}
	// Maybe contact is of no use here.
	unset($form['contact']);
	// Only administrators can delete user or modify the status;
	if ($GLOBALS['user']->uid!=1) {
		unset($form['delete']);
		unset($form['account']['status']);
		$form['account']['name']['#required']=FALSE;
		$form['account']['name']['#disabled']=TRUE;
	}
		
		$is_student = array_key_exists('5',$user->roles);
		if(!user_access('modify students info') && $user->uid !== $GLOBALS['user']->uid) return;
		// we don't want the administer do anything, but it's fine if one has such permission.
		if($GLOBALS['user']->uid=='1') return;
		if(!$is_student) return;
			$isvalidated=db_select('students', 's')->fields('s',array('validated'))->condition('s.uid',$user->name)->execute()->fetchField();
			$query=db_select('students','s')->condition('s.uid',$user->name);
			$query->innerjoin('students_gk','sg','s.uid=sg.uid');
			$default_values=$query->fields('s')->fields('sg',array('province','city_district'))->execute()->fetchObject();
			
		$form['personal'] = array(
			'#type' => 'fieldset',
			'#title' => t('Personal information'),
			'#description' => t('You\'ll need to provide these information when reseting password. When typing alphabet, please use upper case.'),
			'#collapsible' => TRUE,
		);
		switch ($user->ucategory) {
			case uc_OWN_STUDENT: // Our own student
			{
				$form['personal']['idnumber'] = array('#type' => 'textfield',
					'#title' => t('Your Student ID'),
					'#default_value' => $default_values->idcard_number,
					'#maxlength' => 6,
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['truename'] = array('#type' => 'textfield',
					'#title' => t('Your Name'),
					'#default_value' => $default_values->name,
					'#maxlength' => 50,
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['province'] = array('#type' => 'hidden',
					'#value' => '000000');
				}
				break;
			case uc_MAINLAND_STUDENT: // China mainland student
			{
				$form['personal']['idnumber'] = array('#type' => 'textfield',
					'#title' => t('Your ID Card Number'),
					'#description' => t('We\'re calculating gender and date of birth based '.
						'on your ID card number. If you will be using military officer card to register, please input them in the format of @format.', array('@format'=>'X字第XXX号')),
					'#default_value' => $default_values->idcard_number,
					'#maxlength' => 18,
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['truename'] = array('#type' => 'textfield',
					'#title' => t('Your Name'),
					'#default_value' => $default_values->name,
					'#maxlength' => 50,
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				if(isset($form_state['rebuild_info']['need_show_genders']) && $form_state['rebuild_info']['need_show_genders']==1) {
					$form['personal']['dateofbirth'] = array('#type' => 'date',
						'#title' => t('Your date of birth'),
						'#default_value' => array(
							'year' => substr($default_values->date_of_birth,0,4),
							'month' => 1*substr($default_values->date_of_birth,4,2),
							'day' => 1*substr($default_values->date_of_birth,6,2)
							),
						'#after_build' => array('__set_year_range'),
						'#required' => !$isvalidated,
						'#disabled' => $isvalidated,
					);
					$form['personal']['gender'] = array('#type' => 'radios',
						'#title' => t('Your Gender'),
						'#default_value' => $default_values->gender,
						'#options' => array('1'=>t('Male'), '2'=>t('Female')),
						'#required' => !$isvalidated,
						'#disabled' => $isvalidated,
					);
				}
				$form['personal']['province'] = array('#type' => 'select',
					'#title' => t('Province you live'),
					'#description' => t('The place you will be attending the exam.'),
					'#default_value' => $default_values->province,
					'#options' => array(),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$dbo = db_select('vl_province','p')->fields('p')->condition('p.ucategory',$user->ucategory)->execute();
				foreach ($dbo as $result)
				{
					$r = array($result->pid => $result->name);
					$form['personal']['province']['#options'] += $r;
				}
				$form['personal']['nationality'] = array('#type' => 'select',
					'#title' => t('Your nationality'),
					'#default_value' => $default_values->nationality,
					'#options' => array(),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$dbo = db_select('vl_nationality', 'n')->fields('n')->execute();
				foreach($dbo as $result)
				{
					$r = array($result->nid => $result->name);
					if ($result->nid != 98)
						$form['personal']['nationality']['#options'] += $r;
				}
				$form['personal']['political'] = array('#type' => 'select',
					'#title' => t('Your Political feature'),
					'#default_value' => $default_values->politics_feature,
					'#options' => array(),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$dbo = db_select('vl_politics_features', 'p')->fields('p')->execute();
				foreach($dbo as $result)
				{
					$r = array($result->pid => $result->name);
						$form['personal']['political']['#options'] += $r;
				}
				break;
			}
				break;
			case uc_HKTW_STUDENT:
			{ 
				$form['personal']['idnumber'] = array('#type' => 'textfield',
					'#title' => t('Your ID Card Number'),
					'#default_value' => $default_values->idcard_number,
					'#maxlength' => 18,
					'#required' => TRUE);
				$form['personal']['truename'] = array('#type' => 'textfield',
					'#title' => t('Your Name'),
					'#default_value' => $default_values->name,
					'#maxlength' => 50,
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['dateofbirth'] = array('#type' => 'date',
					'#title' => t('Your date of birth'),
					'#default_value' => array(
						'year' => substr($default_values->date_of_birth,0,4),
						'month' => 1*substr($default_values->date_of_birth,4,2),
						'day' => 1*substr($default_values->date_of_birth,6,2)
						),
					'#after_build' => array('__set_year_range'),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['gender'] = array('#type' => 'radios',
					'#title' => t('Your Gender'),
					'#default_value' => $default_values->gender,
					'#options' => array('1'=>t('Male'), '2'=>t('Female')),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['province'] = array('#type' => 'select',
					'#title' => t('Place you live'),
					'#default_value' => $default_values->province,
					'#options' => array(),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$dbo = db_select('vl_province', 'p')->fields('p')->condition('p.ucategory',$user->ucategory)->execute();
				foreach ($dbo as $result)
				{
					$r = array($result->pid => $result->name);
					$form['personal']['province']['#options'] += $r;
				}
				$form['personal']['nationality'] = array('#type' => 'select',
					'#title' => t('Your nationality'),
					'#default_value' => $default_values->nationality,
					'#options' => array(),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$dbo = db_select('vl_nationality','n')->fields('n')->execute();
				foreach ($dbo as $result)
				{
					$r = array($result->nid => $result->name);
					if ($result->nid != 98)
						$form['personal']['nationality']['#options'] += $r;
				}
			}
				break;
			case uc_OVERSEA_STUDENT:
			{
				$form['personal']['country'] = array('#type' => 'select',
					'#title' => t('The country you resists'),
					'#default_value' => $default_values->city_district,
					'#options' => array(),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$dbo = db_select('vl_city_district','c')->fields('c')->condition('c.pid','800000')->execute();
				foreach ($dbo as $result)
				{
					$r = array($result->cid => $result->name);
					$form['personal']['country']['#options'] = $form['personal']['country']['#options'] + $r;
				}
				$form['personal']['idnumber'] = array('#type' => 'textfield',
					'#title' => t('Your Passport Number'),
					'#default_value' => $default_values->idcard_number,
					'#maxlength' => 18,
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['truename'] = array('#type' => 'textfield',
					'#title' => t('Your Chinese Name'),
					'#default_value' => $default_values->name,
					'#maxlength' => 50,
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['origname'] = array('#type' => 'textfield',
					'#title' => t('Your Name on your passport'),
					'#default_value' => $default_values->foreign_name,
					'#maxlength' => 50,
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['dateofbirth'] = array('#type' => 'date',
					'#title' => t('Your date of birth'),
					'#default_value' => array(
						'year' => substr($default_values->date_of_birth,0,4),
						'month' => 1*substr($default_values->date_of_birth,4,2),
						'day' => 1*substr($default_values->date_of_birth,6,2)
						),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['gender'] = array('#type' => 'radios',
					'#title' => t('Your Gender'),
					'#default_value' => $default_values->gender,
					'#options' => array('1'=>t('Male'), '2'=>t('Female')),
					'#required' => !$isvalidated,
					'#disabled' => $isvalidated,
				);
				$form['personal']['nationality'] = array('#type' => 'hidden',
					'#value' => '98');
				$form['personal']['province'] = array('#type' => 'hidden',
					'#value' => '800000');
		}
				break;
		}
		if(!empty($default_values->picture)) {
			$form['personal']['current_photo'] = array(
				'#type' => 'item',
				'#title' => t('Current Picture'),
				'#markup' => '<img src="data:image/jpeg;base64,'.$default_values->picture.'" style="padding-right: 10px"/>'
			);
			if(preg_match('/(?i)msie [1-8]/',$_SERVER['HTTP_USER_AGENT'])) {
				$form['personal']['current_photo']['#markup'] = sprintf('<img src="/user/%s/%s/picture.jpg" style="padding-right: 10px"/>', $user->uid, substr(md5($default_values->picture),0,4));
			}
		}
		$form['personal']['photo'] = array(
			'#type' => 'managed_file',
			'#title' => empty($default_values->picture)?t('Photo'):t('Change Photo'),
			'#required' => TRUE,
			'#required' => empty($default_values->picture),
			'#disabled' => $isvalidated,
			'#upload_validators' => array('file_validate_extensions' => array('jpg png jpeg'), 'file_validate_image_resolution' => array('200x200', '150x150')),
			'#description' => t('Only image files are allowed to be uploaded.'),
		);
		if(!empty($default_values->picture)) {
			$form['personal']['photo']['#description'] .= t('If you want to change the picture, please upload it here. Otherwise, just leave it blank.');
		}
		$form['#validate'][]='signup_user_account_form_validate';
		$form['#submit']=array('signup_user_account_form_save');
	return $form;
}

function __set_year_range($form_element, $form_values) {
	$form_element['year']['#options'] = drupal_map_assoc(range(1950, format_date(time(), 'custom', 'Y')-10));
	return $form_element;
}

function signup_user_account_form_validate($form, $form_state) {
	$user=$form_state['user'];
	$edit=$form_state['values'];
	
	$isvalidated=db_select('students','s')->fields('s',array('validated'))->condition('s.uid',$user->name)->execute()->fetchField();
	if($isvalidated) return;
	
	switch($user->ucategory) {
		case uc_OWN_STUDENT:
			if ($edit['idnumber']) {
				$r=db_select('students','s')->fields('s')->condition('s.idcard_number',$edit['idnumber'])->condition('s.uid', $user->name, '<>')->countQuery()->execute()->fetchField();
					if ($r) {
						form_set_error('idnumber', t('The student ID has already been registerd.').' '.
							t('If you\'ve lost your password, please <a href="@url">click here to reset it</a>.', array('@url'=>'/user/logout?destination=user/password')));
						break;
					}
			}
			if(!is_null(Database::getConnectionInfo('xjinfo'))) {
				db_set_active('xjinfo');
				$r=db_select('XS_XJB','xj')->fields('xj')->condition('XH',strtoupper($edit['idnumber']))->condition('XM',trim($edit['truename']))->condition('sfyxj','是')->countQuery()->execute()->fetchField();
				db_set_active('default');
			} else $r=1;
					if (isset($edit['idnumber']) && $r != 1)
							form_set_error('idnumber', t('The Student ID you\'ve entered is not valid.'));
			break;
		case uc_MAINLAND_STUDENT:
			if ($edit['idnumber']) {
				$r=db_select('students','s')->fields('s')->condition('s.idcard_number',$edit['idnumber'])->condition('s.uid', $user->name, '<>')->countQuery()->execute()->fetchField();
				if ($r) {
					form_set_error('idnumber', t('The ID Card number has already been registerd.').' '.
						t('If you\'ve lost your password, please <a href="@url">click here to reset it</a>.', array('@url'=>'/user/logout?destination=user/password')));
					break;
				}
					}
			if (!preg_match('/字第[0-9]+号/', $edit['idnumber']) && !is_idcardn_validate($edit['idnumber']))
				form_set_error('idnumber', t('The ID Card number you\'ve entered is not valid.'));
			
			break;
		case uc_HKTW_STUDENT:
			if ($edit['idnumber']) {
				$r=db_select('students','s')->fields('s')->condition('s.idcard_number',$edit['idnumber'])->condition('s.uid', $user->name, '<>')->countQuery()->execute()->fetchField();
				if ($r) {
					form_set_error('idnumber', t('The ID Card number has already been registerd.').' '.
						t('If you\'ve lost your password, please <a href="@url">click here to reset it</a>.', array('@url'=>'/user/logout?destination=user/password')));
					break;
				}
			}
			switch($edit['province']) {
				case '720000':
					if (!is_hk_idcardn_validate($edit['idnumber']))
						form_set_error('idnumber', t('The ID Card number you\'ve entered is not valid.'));
					break;
				case '710000':
					if (!is_tw_idcardn_validate($edit['idnumber'])) {
						form_set_error('idnumber', t('The ID Card number you\'ve entered is not valid.'));
					break;
					}
					$gender_calculated = substr($edit['idnumber'],1,1);
					if ($gender_calculated != '1' && $gender_calculated != '2') {
						form_set_error('idnumber', t('The ID Card number you\'ve entered is not valid.'));
						break;
					}
					if ($gender_calculated != $edit['gender']) {
						form_set_error('idnumber', t('The ID Card number you\'ve entered does not meet your gender.'));
						form_set_error('gender', t('The ID Card number you\'ve entered does not meet your gender.'));
					}
					break;
			}
			break;
		case uc_OVERSEA_STUDENT:
			if ($edit['idnumber']) {
				$r=db_select('students','s')->fields('s')->condition('s.idcard_number',$edit['idnumber'])->condition('s.uid', $user->name, '<>')->countQuery()->execute()->fetchField();
				if ($r) {
					form_set_error('idnumber', t('The ID Card number has already been registerd.').' '.
						t('If you\'ve lost your password, please <a href="@url">click here to reset it</a>.', array('@url'=>'/user/logout?destination=user/password')));
					break;
				}
			}
			break;
	}
	if($edit['photo']) {
		$file=file_load($edit['photo']);
		$errors=file_validate_is_image($file);
		if(count($errors)!=0) form_set_error('photo', $errors[0]);
	}
}

function signup_user_account_form_save($form, &$form_state) {
	$user=$form_state['user'];
	$edit=$form_state['values'];

	if(!empty($edit['pass']))
		$data['pass']=$edit['pass'];
	user_save($user, $data);

	$isvalidated=db_select('students','s')->fields('s',array('validated'))->condition('s.uid',$user->name)->execute()->fetchField();
	if($isvalidated) return;

	if(isset($edit['dateofbirth'])) $edit['dobtosave']=sprintf("%04d%02d%02d",$edit['dateofbirth']['year'], $edit['dateofbirth']['month'], $edit['dateofbirth']['day']);
	
	switch($user->ucategory) {
		case uc_OWN_STUDENT:
			if(!is_null(Database::getConnectionInfo('xjinfo'))) {
				db_set_active('xjinfo');
				$r=db_select('XS_XJB','xj')->fields('xj')->condition('XH',strtoupper($edit['idnumber']))->condition('XM',trim($edit['truename']))->execute()->fetchAssoc();
				db_set_active('default');
			} else {
				$r=array('xb'=>'男');
			}
			db_update('students')
				->condition('uid',$user->name)
				->fields(array(
					'idcard_number' => strtoupper($edit['idnumber']),
					'name' => trim($edit['truename']),
					'gender' => ($r['xb']=='男')?'1':'2',
				))->execute();
			db_update('students_gk')
				->condition('uid',$user->name)
				->fields(array(
					'province' => $edit['province'],
					'city_district' => $edit['province'],
				))->execute();
			break;
		case uc_MAINLAND_STUDENT:
			if (preg_match('/字第[0-9]+号/', $edit['idnumber']) && !isset($edit['gender'])) {
				$form_state['rebuild']=true;
				$form_state['rebuild_info']['need_show_genders']=1;
				drupal_get_messages('status');
				drupal_set_message(t('It seems that you are registering as a military officer, please fill extra info here.'), 'warning');
				return;
			}
			if(!preg_match('/字第[0-9]+号/', $edit['idnumber'])) {
				$edit['gender']=pim_genderfromidnumber($edit['idnumber']);
				$edit['dobtosave']=pim_dobfromidnumber($edit['idnumber']);
			}
			db_update('students')->condition('uid',$user->name)->fields(array(
				'idcard_number' => strtoupper($edit['idnumber']),
				'name' => trim($edit['truename']),
				'gender' => $edit['gender'],
				'date_of_birth' => $edit['dobtosave'],
				'nationality' => $edit['nationality'],
				'politics_feature' => $edit['political'],
			))->execute();
			// Fetch original province
			$orig_province=db_select('students_gk','sg')
				->condition('sg.uid',$user->name)
				->fields('sg',array('province'))
				->execute()->fetchField();
			// Fetch profession
			$orig_prof=db_select('students','s')
				->condition('uid',$user->name)
				->fields('s',array('profession_major'))
				->execute()->fetchField();
			// Check if the combile of profession and province affects examplaces
			$query=db_select('vl_profession_place','p')
				->condition('p.pid',$orig_prof)
				->condition('p.status','1');
			$query->innerJoin('vl_city_district','cd','p.examplace=cd.cid');
			$citera=db_or()->condition('cd.pid',$orig_province)->condition('cd.pid',$edit['province']);
			$query=$query->condition($citera)->fields('p')->countQuery();
			$test=$query->execute()->fetchField();
			// which means examplace will be affected
			if($test > 0) {
				db_update('students')->condition('uid',$user->name)->fields(array(
					'examplace' => '',
				))->execute();
				drupal_set_message(t('Your changes on your personal information affected your exam place selection. Please review it.'), 'warning');
			}
			db_update('students_gk')
				->condition('uid',$user->name)
				->fields(array(
					'province' => $edit['province'],
				))->execute();
			$city=db_select('students_gk', 'sg')->fields('sg',array('city_district'))->condition('uid', $user->name)->execute()->fetchField();
			if(substr($city,0,2)!==substr($edit['province'],0,2))
				db_update('students_gk')->condition('uid',$user->name)->fields(array(
					'city_district' => $edit['province'],
				))->execute();
			break;
		case uc_HKTW_STUDENT:
			db_update('students')
				->condition('uid',$user->name)
				->fields(array(
					'idcard_number' => strtoupper($edit['idnumber']),
					'name' => trim($edit['truename']),
					'nationality' => $edit['nationality'],
					'gender' => $edit['gender'],
					'date_of_birth' => $edit['dobtosave'],
				))->execute();
			db_update('students_gk')
				->condition('uid',$user->name)
				->fields(array(
					'province' => $edit['province'],
					'city_district' => $edit['province'],
				))->execute();
			break;
		case uc_OVERSEA_STUDENT:
			db_update('students')
				->condition('uid',$user->name)
				->fields(array(
					'idcard_number' => strtoupper($edit['idnumber']),
					'name' => trim($edit['truename']),
					'foreign_name' => trim($edit['origname']),
					'nationality' => $edit['nationality'],
					'gender' => $edit['gender'],
					'date_of_birth' => $edit['dobtosave'],
				))->execute();
			db_update('students_gk')
				->condition('uid',$user->name)
				->fields(array(
					'province' => '800000',
					'city_district' => $edit['country'],
				))->execute();
			break;
	}
	
	if($edit['photo']) {
		$file=file_load($edit['photo']);
		$image=image_load($file->uri);
		image_save($image, $file->uri.'.jpg');
		$fd=fopen($file->uri.'.jpg','rb');
		$data='';
		while (!feof($fd)) {
			$data.=fread($fd, 1024);
		}
		fclose($fd);
		file_unmanaged_delete($file->uri.'.jpg');
		db_update('students')->condition('uid',$user->name)->fields(array(
			'picture' => base64_encode($data),
		))->execute();
	}
	
	$data=array();
	$data['roles']=array( '5' => 'students');
	if(!empty($edit['pass']))
		$data['pass']=$edit['pass'];
	user_save($user, $data);
	signup_user_goto($user);
}

function signup_form_user_pass_alter(&$form, &$form_state) {
	if(user_access('administer users')) return;
	if($GLOBALS['user']->uid>=2) {
		unset($form['name']);
		unset($form['mail']);
		unset($form['actions']);
		$form['mail']=array(
			'#type'=>'item',
			'#markup'=>t('You must be logged out before resetting password.'),
		);
		$form['logout']=array(
			'#type'=>'item',
			'#markup'=>l(t('Logout and request new password'), 'user/logout', array('query' => array('destination' => 'user/password'))),
		);
		unset($form['captcha']);
		
		return;
	}
	
	unset($form['name']);
	unset($form['mail']);
	$form["actions"]['submit']['#value']=t('Reset password');
	$form["actions"]['submit']['#weight']=10;
	
	$form['notice'] = array(
		'#type' => 'markup',
		'#markup' => t('You\'ll have to provide following information when reseting password. ID Card Number is required here.'),
		'#weight'=>'0',
	);
	$form['idnumber'] = array(
		'#title' => t('Your ID Card Number'),
		'#type' => 'textfield',
		'#size' => '60',
		'#maxlength' => 18,
		'#weight' => 1,
		'#required' => TRUE,
	);
	$form['condselect'] = array(
		'#type' => 'radios',
		'#options' => array( '1' => t('I know the ID Number'), '2' => t('I\'ve forgotten the ID Number')),
		'#default_value' => '1',
		'#weight' => 2,
	);
	$form['sid'] = array(
		'#title' => t('Your ID Number'),
		'#type' => 'textfield',
		'#size' => '60',
		'#weight' => 3,
		'#attributes'=>array('placeholder'=>variable_get('zhaoban_current_year',date('Y')).'BXXXX'),
		'#states' => array(
			'visible' => array(
				'input[name="condselect"]' => array('value' =>'1'),
			),
			'required' => array(
				'input[name="condselect"]' => array('value' =>'1'),
			)
		),
	);
	$form['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Your Name'),
		'#size' => '60',
		'#weight' => 3,
		'#states' => array(
			'visible' => array(
				'input[name="condselect"]' => array('value' =>'2'),
			),
			'required' => array(
				'input[name="condselect"]' => array('value' =>'2'),
			)
		),
	);
	$form['#validate']=array('signup_form_user_pass_validate');
	$form['#submit']=array('signup_form_user_pass_submit');
	drupal_set_title(t('Reset password'));
}

function signup_form_user_pass_validate($form, &$form_state) {
	
	if($form_state['values']['condselect']==1) {
		if(trim($form_state['values']['sid']) == '') {
			form_set_error('sid', t('!name field is required.', array('!name'=>$form['sid']['#title'])));
			return;
		}
	} else {
		if(trim($form_state['values']['name']) == '') {
			form_set_error('name', t('!name field is required.', array('!name'=>$form['name']['#title'])));
			return;
		}
	}
	
	if($form_state['values']['condselect']==1) {
		// We will detect users based on ones ExamID and his IDCard number.
		$query = db_select('users', 'u');
		$query->innerjoin('students', 's', 'u.name=s.uid');
		$query = $query
			->fields('u',array('uid'))
			->condition('s.uid', $form_state['values']['sid'])
			->condition('s.idcard_number', $form_state['values']['idnumber']);
		$result=$query->execute()->fetchField();
		if(!$result) {
			form_set_error('sid', t('Sorry, the ExamID and the IDCard number do not meet our records.'));
			return;
		}
	} else {
		// We will detect users based on one's IDCard number and his realname.
		$query = db_select('users', 'u');
		$query->innerjoin('students', 's', 'u.name=s.uid');
		$query = $query
			->fields('u',array('uid'))
			->condition('s.idcard_number', $form_state['values']['idnumber'])
			->condition('s.name', $form_state['values']['name']);
		$result=$query->execute()->fetchField();
		if(!$result) {
					form_set_error('name', t('Sorry, the Name and the IDCard number do not meet our records.'));
					return;
		}
	}
	
	// Let's load the user object.
	$account = user_load($result);
	if($account->status==0)
		form_set_error('idnumber', t('The system cannot fulfill your request at the moment. Please contact the system administrator.'));
}

function signup_form_user_pass_submit($form, &$form_state) {
//	var_dump($form_state);

	// We will detect users based on one's IDCard number and his realname.
	$query = db_select('users', 'u');
	$query->innerjoin('students', 's', 'u.name=s.uid');
	$query = $query
		->fields('u',array('uid'))
		->condition('s.idcard_number', $form_state['values']['idnumber']);
	$uid=$query->execute()->fetchField();
	$account = user_load($query->execute()->fetchField());
	$newpass = user_password(6);

	user_save($account, array('pass'=>$newpass));
	
	db_delete('flood')
		->condition('identifier',$uid.'-%','LIKE')
		->execute();
	//exit;
	
	drupal_set_message(t('Based on your request, we\'ve reset <span class="error">!name</span>\'s password. Your new password is <span class="error"><code>!pass</code></span>. '.
		'Please write it down and keep it in a safe place. Or, you can change it right now.', array('!name' => $account->name, '!pass' => $newpass)));

	// We need to fill up more information after login
	$data['uid']=user_authenticate($account->name, $newpass);
	user_login_submit(array(),$data);

	$form_state['redirect']='user/'.$account->uid.'/edit';
}

function signup_user_categories() {
	return array(
		array(
			'name' => signup_user_PROFESSION,
			'title' => t('Sign up Professions'),
			'weight' => 10,
		),
		array(
			'name' => signup_user_EXAM,
			'title' => t('Examinations'),
			'weight' => 11,
		),
		array(
			'name' => signup_user_CONTACT,
			'title' => t('Contact Detail'),
			'weight' => 12,
		),
		array(
			'name' => signup_user_GAOKAO,
			'title' => t('Gaokao'),
			'weight' => 13,
		),
	);	
	return $data;
}

function signup_menu_alter(&$callbacks) {
	$callbacks['user/%user_category/edit/'.signup_user_PROFESSION]['access callback'] = '_signup_user_tab_access';
	$callbacks['user/%user_category/edit/'.signup_user_PROFESSION]['access arguments'] = array(1, signup_user_PROFESSION);

	$callbacks['user/%user_category/edit/'.signup_user_EXAM]['access callback'] = '_signup_user_tab_access';
	$callbacks['user/%user_category/edit/'.signup_user_EXAM]['access arguments'] = array(1, signup_user_EXAM);

	$callbacks['user/%user_category/edit/'.signup_user_CONTACT]['access callback'] = '_signup_user_tab_access';
	$callbacks['user/%user_category/edit/'.signup_user_CONTACT]['access arguments'] = array(1, signup_user_CONTACT);

	$callbacks['user/%user_category/edit/'.signup_user_GAOKAO]['access callback'] = '_signup_user_tab_access';
	$callbacks['user/%user_category/edit/'.signup_user_GAOKAO]['access arguments'] = array(1, signup_user_GAOKAO);
}

function _signup_user_tab_access($user=NULL, $sec=NULL) {
	//$user=$GLOBALS['user'];
	$is_student = array_key_exists('5',$user->roles);
	if($GLOBALS['user']->uid == 1) return FALSE;
	if(is_null($user)) return FALSE;
	if(!$is_student = array_key_exists('5',$user->roles)) return FALSE;
	switch($sec) {
		case 'profession':
			$result = db_select('students','s')
				->fields('s',array('idcard_number', 'name'))
				->condition('s.uid',$user->name)
				->execute()->fetchObject();
					if(!($result->idcard_number) || !($result->name)) return FALSE;
						else return TRUE;
				case 'exam':
					$result = db_select('students','s')
						->fields('s',array('profession_major','examplace'))
						->condition('s.uid',$user->name)
						->execute()->fetchObject();
			if($result->profession_major == '0' || $result->examplace == '') return FALSE;
			else return TRUE;
		case 'contact':
			$query=db_select('students_going','sg');
			$query->addExpression('MAX(sg.opus)');
			$result = $query
				->condition('sg.uid',$user->name)
				->execute()->fetchField();
			if(!$result) return FALSE;
			else return TRUE;
		case 'gaokao':
			$ucategory=db_select('students','s')
				->fields('s',array('ucategory'))
				->condition('s.uid',$user->name)
				->execute()->fetchField();
			if(($ucategory == 0 ) || ($ucategory == 3)) return FALSE;
			$result=db_select('students_contact','sc')
				->fields('sc',array('contact_phone'))
				->condition('sc.uid',$user->name)
				->execute()->fetchField();
					if(!$result) return FALSE;
					else if(_signup_user_tab_access($user, 'contact')) return TRUE;
					else return FALSE;
		default: return FALSE;
	}
	return TRUE;
}

function signup_user_view($user, $view_mode, $langcode) {

	if(!array_key_exists('5', $user->roles)) return;

	// Personal information section
	$result = db_select('students','s')->fields('s')->condition('s.uid', $user->name)->execute()->fetchObject();
	$user->content['pi'] = array(
		'#type' => 'user_profile_category',
		'#title' => t('Personal information'),
		'#weight' => '8',
	);
	$user->content['pi']['name'] = array(
		'#type' => 'user_profile_item',
		'#title' => t('Real Name'),
		'#markup' => isset($result->name)?$result->name:'',
		'#weight' => 1,
	);

	if(db_table_exists('users_weixin') && module_exists('weixin')) {
		$r=db_select('users_weixin','u')->fields('u')->condition('u.uid',$user->uid)->condition('u.status',1)->countQuery()->execute()->fetchField();
		if($r)
			$user->content['pi']['name']['#markup'].='<img src="/'.drupal_get_path('module', 'weixin') . '/weixin_16.png" title="'.t('Bound with weixin').'"/>';
	}
	if(!empty($result->picture)) {
		if(preg_match('/(?i)msie [1-8]/',$_SERVER['HTTP_USER_AGENT'])) {
			$img=sprintf('<img src="/user/%s/%s/picture.jpg" style="padding-right: 10px" align="left" height="100"/>', $user->uid, substr(md5($result->picture),0,4));
		} else {
			$img=sprintf('<img src="data:image/jpeg;base64,%s" style="padding-right: 10px" align="left" height="100"/>', $result->picture);
		}
		$user->content['pi']['name']['#title'] = $img.$user->content['pi']['name']['#title'];
	}
	$user->content['pi']['gender'] = array(
		'#type' => 'user_profile_item',
		'#title' => t('Gender'),
		'#markup' => $result->gender ==1 ? t('Male'): t('Female'),
		'#weight' => 2,
	);
	
	// Contact
	$r = db_select('students_contact','sc')->fields('sc')->condition('sc.uid',$user->name)->execute()->fetchObject();
	if($r) {
		$item = array('title' => t('Phone number during examination'), 'value'=> isset($r->contact_phone)?$r->contact_phone:'');
		$user->content['contact']=array(
			'#type'=>'user_profile_category',
			'#title'=>t('Contacts'),
			'#weight'=>9,
		);
		$user->content['contact']['contact_phone'] = array(
			'#type' => 'user_profile_item',
			'#title' => t('Phone number during examination'),
			'#markup' => isset($r->contact_phone)?$r->contact_phone:'',
			'#weight' => '-10',
		);
		$user->content['contact']['phone_roundg'] = array(
			'#type' => 'user_profile_item',
			'#title' => t('Phone nubmer off examination'),
			'#markup' => isset($r->phone_roundg)?$r->phone_roundg:'',
			'#weight' => '0',
		);
		$user->content['contact']['address_round3'] = array(
			'#type' => 'user_profile_item',
			'#title' => t('Address of Round 3'),
			'#markup' => (isset($r->address_round3)?$r->address_round3:'').' / '.(isset($r->zip_round3)?$r->zip_round3:'').' / '.t('To !rec',array('!rec'=>isset($r->recipient_round3)?$r->recipient_round3:'')),
			'#weight' => '1',
		);
		$user->content['contact']['address_roundg'] = array(
			'#type' => 'user_profile_item',
			'#title' => t('Address of Round Goakao'),
			'#markup' => (isset($r->address_roundg)?$r->address_roundg:'').' / '.(isset($r->zip_roundg)?$r->zip_roundg:'').' / '.t('To !rec',array('!rec'=>isset($r->recipient_roundg)?$r->recipient_roundg:'')),
			'#weight' => '2',
		);

		}
	// Professions
	$query = db_select('vl_professions', 'p');
	$query->innerJoin('vl_department', 'd', 'p.did = d.did');
	$query = $query->fields('d',array('dname'))->fields('p',array('pname'))->condition('p.pid', $result->profession_major);
	$rdbo = $query->execute()->fetchObject();

	if($rdbo)
		$r = t('Department !dname Profession !pname', array('!dname'=>$rdbo->dname, '!pname'=>$rdbo->pname));

	if(user_access('view passround3')) {
		$query=db_select('students','s')->fields('s',array('pass_round1_major','pass_round3_major','pass_roundg_major'))->condition('s.uid',$user->name);
		$query->innerJoin('students_total_score','ts','s.uid=ts.uid AND s.profession_major=ts.pid');
		$query->fields('ts',array('outrank'));
		$q=$query->execute()->fetchObject();
		if($q)
			switch($q->pass_round3_major) {
				case 10: $r .= ' ('.t('Determined').')'; break;
				case 1: $r .= ' ('.t('To be determined').$q->outrank.')'; break;
				case 0:
					if($q->pass_round1_major=='1')
						$r .= ' ('.t('Passed 1st round exam but not qualified').')';
					else
						$r .= ' ('.t('Failed in 1st round exam').')';
					break;
			}
	}

	$user->content['pr'] = array(
		'#type' => 'user_profile_category',
		'#title' => t('Profession and Examinations'),
		'#weight' => 10,
	);
	$query = db_select('students','s')->condition('s.uid',$user->name);
	$query->innerJoin('vl_city_district','cd','s.examplace=cd.cid');
	$query = $query->fields('cd',array('name_simp'));
	$examplace = $query->execute()->fetchField();
	if($r)
		if(!empty($examplace))
			$proftext = $r.' / '.$examplace;
		else
			$proftext = $r;
	else
		$proftext = t('N/A');

	$user->content['pr']['name'] = array(
		'#type' => 'user_profile_item',
		'#title' => t('Profession'),
		'#markup' => $proftext,
		'#weight' => '-10',
	);
	

	// Examinations
	$ex_section = t('Examinations');
	$query = db_select('students_going','sg');
	$query->innerJoin('vl_exam','e', 'sg.eid=e.eid');
	$query = $query->fields('e',array('eid','ename','elevel'))->fields('sg',array('opus'))->condition('sg.uid',$user->name)->orderBy('sg.eid');
	$rdbo = $query->execute();
	foreach ($rdbo as $r) {
		$item = array('title' => $r->ename.$r->elevel, 'class'=>'exam', 'value' => '');
		if($r->opus) {
			$org_opus = unserialize($r->opus);
			if(isset($org_opus['eadditional']) ) {
				if($org_opus['eadditional'] <> '')
					$item['value'] .= t($org_opus['eadditional']).": ";
				unset($org_opus['eadditional']);
			}
			$item['value'] .= implode($org_opus, ' / ');
		}
		$user->content['pr'][] = array(
			'#type' => 'user_profile_item',
			'#title' => $r->ename.$r->elevel,
			'#markup' => isset($item['value'])?$item['value']:'',
			'#weight' => $r->eid,
		);
	}
	
}

function signup_user_professions_form($form, $form_state) {
	if(!isset($form_state['rebuild_info']['need_rebuild']))
		$form_state['rebuild_info']['need_rebuild']=0;
	
	$user=$form['#user'];

	$user->isvalidated=db_select('students','s')->fields('s',array('validated'))->condition('s.uid',$user->name)->execute()->fetchField();

	$default_values=array();

	if($default_profession=db_select('students','s')->fields('s',array('profession_major'))->condition('s.uid',$user->name)->execute()->fetchField()) {
		$default_values['did_1'] = substr($default_profession,0,2);
		$default_values['pid_1'] = $default_profession;
	}
	else {
		// We 'll calculate the most hot professions.
		$default_values['pid_1'] = db_query(
			'SELECT s.profession_major FROM {students} s WHERE NOT s.profession_major = \'0\' '.
			'GROUP BY s.profession_major ORDER BY count(*) DESC LIMIT 0 , 1')->fetchField();
		$default_values['did_1'] = substr($default_values['pid_1'],0,2);
	}
	

	// Check if the student is marked as passthrough.
	$query=db_select('students','s')->condition('s.uid',$user->name);
	$query->innerJoin('students_passthrough','sp','s.idcard_number=sp.idcard_number');
	$query=$query->fields('sp');
	$r=$query->execute()->fetchObject();
	if($r)
		$passthroughcondition="p.pid='".$r->pid."'";
	else
		$passthroughcondition='1';

	$query=db_select('vl_department','d')->fields('d')->orderBy('d.did')->condition('p.enabled',1)->where($passthroughcondition);
	$query->innerJoin('vl_professions','p','p.did=d.did');
	$dbo = $query->execute();
	$departments = array();
	foreach($dbo as $r) {
		$departments += array(($r->did) => ($r->dname));
	}
	
	
	// Construct the professions list
	$dbo = db_select('vl_professions','p')->fields('p')->condition('p.enabled',1)->where($passthroughcondition)->orderBy('p.pid')->execute();
	$professions = array();
	$professions_plain = '';
	foreach($dbo as $r) {
		$c=1;
		if($r->extracondition) {
			$query=db_select('students','s')->fields('s')->condition('s.uid',$user->name);
			$query->innerjoin('students_gk','sg','s.uid=sg.uid');
			$query=$query->where($r->extracondition)->fields('s')->countQuery();
			$c=$query->execute()->fetchField();
		}
		if($c) {
			$professions += array(($r->pid) => $r->pname);
			$professions_plain .= $r->pid.$r->pname.',';
		}
	}
	
	$form['professionlist'] = array(
		'#type'=>'hidden',
		'#value'=> $professions_plain,
		'#weight'=>1,
	);

	$form['pframe'] = array(
		'#type' => 'fieldset',
		'#title' => t('The wanted profession'),
		'#collapsible' => TRUE,
		'#weight'=>2,
	);
	if($default_profession) {
		$form['pframe']['#title'] = t('Change my profession'); 
		$form['pframe']['#collapsible']=TRUE;
		$form['pframe']['#collapsed']=FALSE;
	}
	// Let's build the department select and profession select
	$form['pframe']['did'] = array(
		'#type' => 'select',
		'#title' => t('The department you like'),
		'#required' => TRUE,
		'#options' => $departments,
		'#multiple' => FALSE,
		'#attributes' => array('onChange'=>"profs=form.professionlist.value.split(','); form.pid.length=0; ".
			"for(i=0,p=0;i<profs.length;i++) { if (profs[i].substring(0,2) == this.options[this.selectedIndex].value) form.pid.options[p++] = new Option(profs[i].substring(4), profs[i].substring(0,4));}".
			"jQuery('#edit-pid').change();".
			'return true;'),
		'#default_value' => isset($form_state['values']['did']) ? $form_state['values']['did'] : $default_values['did_1'],
		'#disabled' => ($user->isvalidated) || $form_state['rebuild_info']['need_rebuild'],
		'#weight' => 1,
	);
	$dep = isset($form_state['values']['did'])?$form_state['values']['did']:$default_values['did_1'];
	$form['pframe']['pid'] = array(
		'#type' => 'select',
		'#title' => t('The profession you like'),
		'#required' => TRUE,
		'#multiple' => FALSE,
		'#prefix' => '<div id="dropdown_pid_replace">',
		'#suffix' => '</div>',
		'#options' => $professions,
		'#default_value' => isset($form_state['values']['pid']) ? $form_state['values']['pid'] : $default_values['pid_1'],
		'#disabled' => ($user->isvalidated) || $form_state['rebuild_info']['need_rebuild'],
		'#weight' => 2,
	);
	
	unset($form['actions']['submit']);
	$form['save'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#weight' => 5,
	);
	if(isset($form_state['rebuild_info']['need_rebuild'])&&$form_state['rebuild_info']['need_rebuild']==1) {
		$form['pframe']['#collapsed']=TRUE;
		$form['pframe']['#title']=t('My profession');
		$form['extrainfo'] = array(
			'#type' => 'fieldset',
			'#title' => t('Extra Info'),
			'#weight'=> 3,
		);
		$places=_signup_user_professions_examplace_alter($form_state['values']['pid'], $user->name);
		if(count($places) ==1) {
			$cityids=array_keys($places);
			$citynames=array_values($places);
			$form['extrainfo']['examplacedesc'] = array(
				'#type' => 'item',
				'#title' => t('Exam Place'),
				'#markup' => $citynames[0],
				'#description' => t('You can only participate exam at here.'),
			);
			$form['extrainfo']['examplace'] = array(
				'#type' => 'hidden',
				'#value' => $cityids[0],
			);
		} else {
			$default_values['examplace']=db_select('students','s')
				->condition('s.uid',$user->name)
				->fields('s',array('examplace'))
				->execute()->fetchField();
			$form['extrainfo']['examplace'] = array(
				'#type' => 'select',
				'#title' => t('Exam Place'),
				'#description' => '<span id="infodesc">'.t('Please note that you could select various examing place here.').'</span>',
				'#options' => $places,
				'#default_value' => isset($form_state['values']['examplace']) ? $form_state['values']['examplace'] : $default_values['examplace'],
				'#attributes' => array('onChange' => ''.
					'jQuery("#infodesc").html(jQuery("#placedesc"+jQuery("#edit-examplace").val()).val());'.
				''),
				'#weight'=> 3,
			);
			foreach($places as $cid => $cname) {
				$query=db_select('vl_profession_place','pp')
					->fields('pp')
					->condition('pp.examplace',$cid)
					->condition('pp.pid',$form_state['values']['pid']);
				if($query->countQuery()->execute()->fetchField()>0) {
					$r=$query->execute()->fetchObject();
					$form['extrainfo']['placedesc'.$cid] = array(
						'#attributes' => array('id' => 'placedesc'.$cid),
						'#type' => 'hidden',
						'#value' => ($r->memo)?($r->memo):'',
					);
				} else {
					$form['extrainfo']['placedesc'.$cid] = array(
						'#attributes' => array('id' => 'placedesc'.$cid),
						'#type' => 'hidden',
						'#value' => '',
					);
				}
			}
		}
		$prof=$form_state['values']['pid'];
		if($prof == 'D716' || $prof == 'D717' || $prof == 'D603' || $prof == 'D604')
			$form['extrainfo']['secondary_profession'] = array(
				'#type' => 'radios',
				'#title' => t('Secondary profession'),
				'#description' => t('Please note that if you select to signup a secondary profession, you will need to take part in all the exams. We may enroll you under the secondary profession.'),
				'#options' => array(
					'1' => t('I DO NOT want to signup a secondary profession listed in registration guide'),
					'2' => t('I DO  want to signup a secondary profession listed in registration guide'),
				),
				'#default_value' => NULL,
				'#weight' => 5,
			);
	} else {
		$form['save']['#submit'] = array('_signup_user_professions_fake_save');
	}
	
	drupal_add_js(
		'jQuery(document).ready(function(){'.
			's=jQuery("#edit-pid").val();'.
			'jQuery("#edit-did").change();'.
			'jQuery("#edit-pid").val(s);'.
			'jQuery("#edit-pid").change();'.
			"if(jQuery('#edit-did').val() == 'D4') ".
				"jQuery('#edit-descnote').show(); ".
			"else ".
				"jQuery('#edit-descnote').hide(); ".
			'});'.
			'',
		'inline'
	);
	
	$form['#validate'][]='signup_user_professions_form_validate';
	$form['#submit'][]='signup_user_professions_form_save';
	
		return $form;
}

function _signup_professions_department_onchange(&$form, $form_state) {
	$user=$form['#user'];
	$query=db_select('students','s')->condition('s.uid',$user->name);
	$query->innerJoin('vl_professions', 'p', 's.profession_major=p.pid');
	$query=$query->fields('p',array('did','pid'));
	$r=$query->execute()->fetchObject();
	if (!is_null($form_state['values']['pid']) && $r && $form_state['values']['did'] == $r->did)
		$form['pframe']['pid']['#default_value']=$r->pid;
	else
		$form['pframe']['pid']['#default_value']=NULL;
	return $form['pframe']['pid'];
}

function _signup_professions_profession_onchange($form, $form_state) {
	return $form['pframe']['examplace'];
}

function _signup_user_professions_profession_alter($dep='') {
	$dbo = db_select('vl_professions','p')->fields('p')->condition('p.enabled',1)->orderBy('p.pid')->execute();
	$professions=array();
	foreach($dbo as $r) {
		if(!isset($professions[$r->did])) $professions[$r->did]=array();
		$professions[$r->did] += array($r->pid => $r->pname);
	}
	return $professions[$dep];
}

function _signup_user_professions_examplace_alter($pid='', $uid=NULL) {
	$query=db_select('vl_profession_place','pp')->condition('pp.status','1')->condition('pp.pid',$pid);
	$query->innerJoin('vl_professions','p','p.pid=pp.pid');
	$query->innerJoin('vl_city_district','cd','cd.cid=pp.examplace');
	$query=$query->fields('cd',array('cid','name'))->groupBy('cd.cid')->distinct();
	$dbo=$query->execute();

	$r=db_select('vl_city_district','cd')->fields('cd',array('cid','name'))->condition('cd.cid','110000')->execute()->fetchObject();
	$options=array($r->cid=>$r->name);
	foreach($dbo as $r) {
		unset($options[$r->cid]);
		
		$query=db_select('students','s')->condition('s.uid',$uid)->fields('s');
		$query->leftJoin('students_gk','sg','s.uid=sg.uid');
		$condition=db_select('vl_profession_place','pp')->fields('pp',array('cond'))
			->condition('pp.pid',$pid)->condition('pp.examplace',$r->cid)
			->execute()->fetchField();
		$query=$query->where($condition?$condition:'1')->countQuery();
		$q=$query->execute()->fetchField();
		if($q)
			$options[$r->cid] = $r->name;
	}
	return $options;
}

function signup_user_professions_form_validate($form, $form_state) {
	
	$prof=$form_state['values']['pid'];
	// Check if the profession devote to the department
	if(substr($prof,0,2) != $form_state['values']['did'])
		form_set_error('pid', t('The major profession you\'ve selected does not comform the department.'));
	if(isset($form['extrainfo']['secondary_profession']))
		if($prof == 'D716' || $prof == 'D717' || $prof == 'D603' || $prof == 'D604')
			if(!$form_state['values']['secondary_profession'])
				form_set_error('secondary_profession', t('You must select if you want sign up a secondary profession.'));
	
}

function _signup_user_professions_fake_save($form, &$form_state) {
	$form_state['rebuild_info']['need_rebuild']=1;
	$form_state['rebuild']=TRUE;
}
function signup_user_professions_form_save($form, $form_state) {
	$user=$form['#user'];
	$edit=$form_state['values'];
	$profession_major=$edit['pid'];
	
	$r=db_select('students','s')->fields('s')->condition('s.uid',$user->name)->execute()->fetchObject();
	if($r->validated) return;
	
	$old_profession=$r->profession_major;
	// Only if user has change his profession
	
	db_update('students')
		->condition('uid',$user->name)
		->fields(array(
			'examplace' => $form_state['values']['examplace'],
		))->execute();
	
	if($old_profession!=$profession_major) {
		db_update('students')
			->condition('uid',$user->name)
			->fields(array(
				'profession_major' => $profession_major,
			))->execute();
		
	}
	
	// Now, let's compute the exam.
	
	$exams_major = unserialize(db_select('vl_professions','p')->fields('p',array('exams'))->condition('p.pid',$profession_major)->execute()->fetchField());
	
	$exams_student = array();
	// Seperate sofa to so and fa
	foreach($exams_major as $eid=>$eweight) {
		// Compute sofa to so and fa
		if(substr($eid,0,2)=='32') {
			$exams_student[] = preg_replace('/32/','30',$eid);
			$exams_student[] = preg_replace('/32/','31',$eid);
		}
		else $exams_student[] = $eid;
	}
	
	// FIXME: HACKAGE for secondary profesion
	if($profession_major == 'D716' || $profession_major == 'D717' || $profession_major == 'D603' || $profession_major == 'D604')
		if($form_state['values']['secondary_profession']=='2') {
			$query=db_select('vl_professions','p1');
			$query->innerJoin('vl_professions','p2','p1.pname=p2.pname');
			$query=$query->fields('p2',array('exams'))->condition('p1.pid',$profession_major)->condition('p2.pid',$profession_major,'<>');
			$exams_minor=unserialize($query->execute()->fetchField());
			foreach($exams_minor as $eid=>$eweight) {
				if(substr($eid,0,1)<>'3')
					$exams_student[] = $eid;
			}
		}
			
	// FIXME: HACKAGE END
	
	// $exams_student now stores the newly created exams.
	// Now, let's compare the exisiting exams one by one.
	$rdbo=db_select('students_going','sg')->fields('sg',array('eid'))->condition('sg.uid',$user->name)->orderBy('sg.eid')->execute();
	$exams_student_existing=array();
	foreach($rdbo as $r) {
		$exams_student_existing[]=$r->eid;
	}
	
	$l=count($exams_student);
	for($i=0;$i<$l;) {
		if(!isset($exams_student[$i])) {
			$i++;
			continue;
		}
		$eid=$exams_student[$i];
		// Case 1: The newly added exams are found in existing exams. Just keep it.
		if(in_array($eid, $exams_student_existing)) {
			unset($exams_student[$i]);
			unset($exams_student_existing[array_search($eid, $exams_student_existing)]);
		}
		// Case 2: The piano exams
		else if($eid !='250' &&(substr($eid,0,2) == '25' || substr($eid,0,2) == '26')) {
			if(in_array('251', $exams_student_existing) && ($eid=='251' || $eid=='261')) { // Piano A
				db_update('students_going')->fields(array('eid'=>$eid))->condition('uid',$user->name)->condition('eid', 251);
				unset($exams_student[$i]);
				unset($exams_student_existing[array_search('251', $exams_student_existing)]);
			} else
			if(in_array('252', $exams_student_existing) && ($eid=='252' || $eid=='262')) { // Piano B
				db_update('students_going')->fields(array('eid'=>$eid))->condition('uid',$user->name)->condition('eid', 252);
				unset($exams_student[$i]);
				unset($exams_student_existing[array_search('252', $exams_student_existing)]);
			} else
			if(in_array('261', $exams_student_existing) && ($eid=='251' || $eid=='261')) { // Instrument A
				db_update('students_going')->fields(array('eid'=>$eid))->condition('uid',$user->name)->condition('eid', 261);
				unset($exams_student[$i]);
				unset($exams_student_existing[array_search('261', $exams_student_existing)]);
			} else
			if(in_array('262', $exams_student_existing) && ($eid=='252' || $eid=='262')) { // Instrument B
				db_update('students_going')->fields(array('eid'=>$eid))->condition('uid',$user->name)->condition('eid', 262);
				unset($exams_student[$i]);
				unset($exams_student_existing[array_search('262', $exams_student_existing)]);
			} else {
				
			}
			$i++;
		}
		// Case 3: There is no use of keeping other exams.
		else {
			$i++;
		}
	}
	
	// We should delete all the exams for current students at first.
	if(count($exams_student_existing))
		foreach($exams_student_existing as $ex) {
			db_delete('students_going')->condition('uid',$user->name)->condition('eid',$ex)->execute();
		}
	
	// Then, insert the exams we calculated here.
	if(count($exams_student)) {
		sort($exams_student);
		foreach($exams_student as $ex) {
			db_insert('students_going')
				->fields(array(
					'uid' => $user->name,
					'eid' => $ex,
				))->execute();
		}
	}
	signup_user_goto($user);
	return;
}

function signup_user_examinations_form($form, $form_state) {
		$user=$form['#user'];
	$r = _signup_determine_period($user);

	if($r==0)
		drupal_goto('user/'.$user->uid.'/edit');
	else if($r==1)
		drupal_goto('user/'.$user->uid.'/edit/profession');

	// Check if the student is marked as passthrough.
	$query=db_select('students','s')->condition('s.uid',$user->name);
	$query->innerJoin('students_passthrough','sp','s.idcard_number=sp.idcard_number');
	$query=$query->fields('sp');
	$r=$query->execute()->fetchObject();
	$ispassthrough=$r?TRUE:FALSE;

	$isvalidated=db_select('students','s')->fields('s',array('validated'))->condition('s.uid',$user->name)->execute()->fetchField();
	if(!$isvalidated)
		$isvalidated=$ispassthrough;
	// Let's fetch the examinations of the user at first
	$rdbo = db_select('students_going','sg')->fields('sg',array('eid'))->condition('sg.uid',$user->name)->execute();
	$exams = array();
	foreach($rdbo as $r)
		$exams[] = $r->eid * 1;
	
	$form['explain'] = array(
		'#value' => t('The examinations you should take, which are computed based on your professions. '.
			'Please fill required information below, such as the opus of individual examiniation.'),
		'#weight' => -10,
	);
	// Draw every exam as a seperated frameset
	sort($exams);
	$page_weight = 0;
	$should_disabled=$isvalidated;
	
	$query=db_select('students_going','sg')->condition('sg.uid',$user->name);
	$query->innerJoin('vl_going','g','sg.gid=g.gid');
	$query->fields('g',array('time'))->orderBy('g.time')->condition('g.time','2013022200000000','>');
	$starttime=$query->execute()->fetchField();
	if($isvalidated)
		if(!$starttime) $should_disabled=FALSE;
		else if(date('YmdHi0000',time()+3600*24)<$starttime)
			$should_disabled=FALSE;
	foreach($exams as $eid) {
		// Lets fetch the start time of specific going
		$r = db_select('vl_exam','e')->fields('e')->condition('e.eid',$eid)->execute()->fetchObject();
		$form[$eid] = array(
			'#type' => 'fieldset',
			'#title' => $r->ename . $r->elevel,
			'#collapsible' => !empty($r->opus) || !empty($r->eadditonal) || $should_disabled,
			'#collapsed' => $should_disabled,
			'#weight'=> $page_weight++,
		);
		$form[$eid]['etype'] = array(
			'#type' => 'markup',
			'#markup' => '<div><b>'.t('Testing mode') .':</b> '. ($r->etype == 1 ? t('Writing') : (module_exists('onlinetests')&&$r->etype ==3 ? t('Online Tests'):t('Interviewing'))) .'</div>',
		);

		// Let's fetch the original value
		if($r->eadditional || $r->opus) {
			$q=db_select('students_going','sg')->fields('sg',array('opus'))->condition('uid',$user->name)->condition('eid',$eid)->execute()->fetchField();
			if($q) {
				$default_values=unserialize($q);
			}
			else $default_values=array();
		}
		if($r->eadditional) {
			$form[$eid]['eadditional'.$eid] = unserialize($r->eadditional);
			$form[$eid]['eadditional'.$eid]['#default_value']=isset($default_values['eadditional'])?$default_values['eadditional']:NULL;
			$form[$eid]['eadditional'.$eid]['#disabled']=$should_disabled;
			$form[$eid]['eadditional'.$eid]['#title'] = isset($form[$eid]['eadditional'.$eid]['#title'])?t($form[$eid]['eadditional'.$eid]['#title']):NULL;
			if(!isset($form[$eid]['eadditional'.$eid]['#type'])||$form[$eid]['eadditional'.$eid]['#type']=='markup')
				$form[$eid]['eadditional'.$eid]['#markup'] = t($form[$eid]['eadditional'.$eid]['#value']);
			if(isset($form[$eid]['eadditional'.$eid]['#type'])&&($form[$eid]['eadditional'.$eid]['#type'] == 'select' || $form[$eid]['eadditional'.$eid]['#type'] == 'radios')) {
				$form[$eid]['eadditional'.$eid]['#required'] = TRUE;
				foreach($form[$eid]['eadditional'.$eid]['#options'] as $v => $t) {
					$form[$eid]['eadditional'.$eid]['#options'][$v] = t($t);
				}
			}
		}
		for($i=1;$i<=$r->opus;$i++) {
			$form[$eid]['#description'] = t(
				'<p>For details on the range of opus you could select for this examination, please check '.
				'our registration guide.<br/>'.
				'The suggested format of opus is "Author: Opus Name".</p>');
			$form[$eid][$eid.'opus'.$i] = array(
				'#type' => 'textfield',
				'#maxlength' => 30,
				'#required' => !$should_disabled,
				'#title' => t('Opus No.!i', array('!i' => $i)),
				'#default_value' => isset($default_values['opus'.$i])?$default_values['opus'.$i]:NULL,
				'#disabled' => $should_disabled,
			);
			if($ispassthrough) {
				$form[$eid][$eid.'opus'.$i]['#value'] = isset($default_values['opus'.$i])?$default_values['opus'.$i]:t('Not needed for passthrough students');
			}
		}
	}

	$form['#submit'][]='signup_user_examinations_form_save';
	return $form;
}

function signup_user_examinations_form_save($form, $form_state) {
	$user=$form['#user'];
	$isvalidated=db_select('students','s')->fields('s',array('validated'))->condition('s.uid',$user->name)->execute()->fetchField();
	$should_disabled=$isvalidated;
	
	$query=db_select('students_going','sg')->condition('sg.uid',$user->name);
	$query->innerJoin('vl_going','g','sg.gid=g.gid');
	$query->fields('g',array('time'))->orderBy('g.time');
	$starttime=$query->execute()->fetchField();
	if($isvalidated)
		if(!$starttime) $should_disabled=FALSE;
		else if(date('YmdHi0000')<$starttime)
			$should_disabled=FALSE;
	if($should_disabled) return;

		$opus_to_save = array();

	$edit=$form_state['values'];
	foreach($edit as $fid => $fvalue) {
		if(strpos($fid, 'additional')) {
			$eid=substr($fid,11);
			$opus_to_save[$eid]['eadditional'] = $fvalue;
			$edit[$fid]=NULL;
		}
		else if(strpos($fid,'opus')) {
			$eid=substr($fid,0,3);
			$oid=substr($fid,7);
			$opus_to_save[$eid]['opus'.$oid] = $fvalue;
			$edit[$fid]=NULL;
		}
	}
	foreach($opus_to_save as $eid=>$edata) {
		db_update('students_going')
			->fields(array(
				'opus' => serialize($edata)
			))
			->condition('uid', $user->name)
			->condition('eid', $eid)
			->execute();
	}
	signup_user_goto($user);
}

function signup_user_contact_form($form, $form_state) {
	$user=$form['#user'];
	
	// Fetch default values
	$default_values=array();
	$query=db_select('students_contact','sc')->fields('sc')->condition('sc.uid', $user->name);
	if($query->countQuery()->execute()->fetchField()==0) {
		$default_values['contact_phone'] = '';
		$default_values['address_round3'] = '';
		$default_values['zip_round3'] = '';
		$default_values['recipient_round3'] = '';
		$default_values['address_roundg'] = '';
		$default_values['zip_roundg'] = '';
		$default_values['phone_roundg'] = '';
		$default_values['personnel_record_at'] = '';
		$default_values['address_of_home'] = '';
		$default_values['terminus_of_train'] = '';
		$default_values['recipient_roundg'] = '';
		$default_values['address_school'] = '';
		$default_values['zip_school'] = '';
		$default_values['recipient_school'] = '';
		$r=db_select('students_gk','sg')->fields('sg',array('province'))->condition('sg.uid',$user->name)->condition('sg.province','110000','<>')->execute()->fetchField();
		$default_values['needroom']=($r)?1:0;
	}
	else {
		$default_values=$query->execute()->fetchAssoc();
		if($default_values['address_of_home']!=='') {
			$ad_of_home = unserialize($default_values['address_of_home']);
			$default_values += $ad_of_home;
		}
	}
	// Paint form
	$form['contact_phone'] = array(
		'#type' => 'textfield',
		'#title' => t('The phone number we could contact you during the period of examination'),
		'#default_value' => $default_values['contact_phone'],
		'#required' => 'true',
		'#maxlength' => 30,
		'#size' => 30,
		'#weight' => -10,
		'#default_value' => $default_values['contact_phone'],
	);
	
	$form['contact_round3'] = array(
		'#type' => 'fieldset',
		'#title' => t('Passing professional exam mailing address'),
		'#description' => t('The message will be sent registered.'),
		'#collapsible' => 'true',
		'#collapsed' => 0,
		'#weight' => 0,
	);
	$form['contact_round3']['address_round3'] = array(
		'#type' => 'textfield',
		'#title' => t('Address'),
		'#maxlength' => 80,
		'#required' => 'true',
		'#default_value' => $default_values['address_round3'],
	);
	$form['contact_round3']['zip_round3'] = array(
		'#type' => 'textfield',
		'#title' => t('Postcode'),
		'#maxlength' => ($user->ucategory==1)?6:20,
		'#required' => 'true',
		'#default_value' => $default_values['zip_round3'],
	);
	$form['contact_round3']['recipient_round3'] = array(
		'#type' => 'textfield',
		'#title' => t('Recipient'),
		'#maxlength' => 20,
		'#required' => 'true',
		'#default_value' => $default_values['recipient_round3'],
	);

	$form['contact_roundg'] = array(
		'#type' => 'fieldset',
		'#title' => t('Letter of admission mailing address'),
		'#description' => t('The message will be sent via EMS, so a phone number is required.'),
		'#collapsible' => 'true',
		'#collapsed' => 0,
		'#weight' => 1,
	);
	$form['contact_roundg']['address_roundg'] = array(
		'#type' => 'textfield',
		'#title' => t('Address'),
		'#maxlength' => 80,
		'#required' => 'true',
		'#default_value' => $default_values['address_roundg'],
	);
	$form['contact_roundg']['zip_roundg'] = array(
		'#type' => 'textfield',
		'#title' => t('Postcode'),
		'#maxlength' => ($user->ucategory==1)?6:20,
		'#required' => 'true',
		'#default_value' => $default_values['zip_roundg'],
	);
	$form['contact_roundg']['recipient_roundg'] = array(
		'#type' => 'textfield',
		'#title' => t('Recipient'),
		'#maxlength' => 20,
		'#required' => 'true',
		'#default_value' => $default_values['recipient_roundg'],
	);
	$form['contact_roundg']['phone_roundg'] = array(
		'#type' => 'textfield',
		'#title' => t('Phone number'),
		'#maxlength' => 20,
		'#required' => 'true',
		'#default_value' => $default_values['phone_roundg'],
	);

	$form['contact_school'] = array(
		'#type' => 'fieldset',
		'#title' => t('The address of your home'),
		'#description' => t('The address will be used by the academic administration department after admission.'),
		'#collapsible' => 'true',
		'#collapsed' => 0,
		'#weight' => 2,
	);
	$form['contact_school']['address_school'] = array(
		'#type' => 'textfield',
		'#title' => t('Address'),
		'#maxlength' => 80,
		'#required' => 'true',
		'#default_value' => $default_values['address_school'],
	);
	$form['contact_school']['zip_school'] = array(
		'#type' => 'textfield',
		'#title' => t('Postcode'),
		'#maxlength' => ($user->ucategory==1)?6:20,
		'#required' => 'true',
		'#default_value' => $default_values['zip_school'],
	);
	$form['contact_school']['recipient_school'] = array(
		'#type' => 'textfield',
		'#title' => t('Recipient'),
		'#maxlength' => 20,
		'#required' => 'true',
		'#default_value' => $default_values['recipient_school'],
	);
	
	$form['other'] = array(
		'#type' => 'fieldset',
		'#title' => t('Other information'),
		'#collapsible' => 'true',
		'#collapsed' => 0,
		'#weight' => 3,
	);
	$form['other']['terminus_of_train'] = array(
		'#type' => 'textfield',
		'#title' => t('The terminus of train'),
		'#description' => t('The terminus when you take the trains going home.'),
		'#maxlength' => 20,
		'#required' => 'true',
		'#default_value' => $default_values['terminus_of_train'],
	);
	$form['other']['needroom'] = array(
		'#type' => 'checkbox',
		'#title' => t('I need dorm in my university life.'),
		'#description' => t('You will need to provide additional information after enrollment.'),
		'#default_value' => $default_values['needroom'],
	);
	$form['other']['personnel_record_at'] = array(
		'#type' => 'textfield',
		'#title' => t('The organization which holds your personal record'),
		'#description' => t('This should be high school for students.'),
//		'#autocomplete_path' => 'signup/schools_autocompletion',
		'#maxlength' => 20,
		'#required' => 'true',
		'#default_value' => $default_values['personnel_record_at'],
	);
	
	$ucategory=$user->ucategory;
	if($ucategory == '3' || $ucategory == '0') unset($form['other']);
	if($ucategory == '0') {
		unset($form['contact_round3']);
		unset($form['contact_roundg']);
		unset($form['contact_school']);
	}
	$form['#submit'][]='signup_user_contact_form_save';
	return $form;
}

function signup_user_contact_form_save($form, $form_state) {
	$user=$form['#user'];
	$edit=$form_state['values'];
	
	// If is our own students, lets fill in some more information automatically
	if($user->ucategory==0) {
		$sid=db_select('students','s')->fields('s',array('idcard_number'))->condition('uid',$user->name)->execute()->fetchField();
		if(!is_null(Database::getConnectionInfo('xjinfo'))) {
			db_set_active('xjinfo');
			$r=db_select('XS_XJB','xj')->fields('xj')->condition('XH',$sid)->execute()->fetchObject();
			db_set_active('default');
		} else $r='';
		$depname=db_select('vl_department','d')->fields('d',array('dname'))->condition('did_exchange',$r->xsh)->execute()->fetchField();

		$edit['address_round3'] = '中央音乐学院'.$depname;
		$edit['zip_round3'] = '100031';
		$edit['recipient_round3'] = $r->xm;
		$edit['address_roundg'] = $edit['address_round3'];
		$edit['zip_roundg'] = $edit['zip_round3'];
		$edit['recipient_roundg'] = $edit['recipient_round3'];
		$edit['personnel_record_at'] = $depname;
	}
	
	$r=db_select('students_contact','sc')->fields('sc')->condition('uid',$user->name)->countQuery()->execute()->fetchField();
	if($r)
		db_delete('students_contact')->condition('uid',$user->name)->execute();
	db_insert('students_contact')
		->fields(array(
			'uid' => $user->name, 
			'contact_phone' => $edit['contact_phone'],
			'address_round3' => isset($edit['address_round3'])?$edit['address_round3']:'',
			'zip_round3' => isset($edit['zip_round3'])?$edit['zip_round3']:'',
			'recipient_round3' => isset($edit['recipient_round3'])?$edit['recipient_round3']:'',
			'address_roundg' => isset($edit['address_roundg'])?$edit['address_roundg']:'',
			'zip_roundg' => isset($edit['zip_roundg'])?$edit['zip_roundg']:'',
			'recipient_roundg' => isset($edit['recipient_roundg'])?$edit['recipient_roundg']:'',
			'phone_roundg' => isset($edit['phone_roundg'])?$edit['phone_roundg']:'',
			'address_of_home' => serialize(array(
					'address_school'=>isset($edit['address_school'])?$edit['address_school']:'',
					'zip_school'=>isset($edit['zip_school'])?$edit['zip_school']:'',
					'recipient_school'=>isset($edit['recipient_school'])?$edit['recipient_school']:'',
					)),
			'terminus_of_train' => isset($edit['terminus_of_train'])?$edit['terminus_of_train']:'',
			'personnel_record_at' => isset($edit['personnel_record_at'])?$edit['personnel_record_at']:'',
			'needroom' => isset($edit['needroom'])?$edit['needroom']:'0',
		))->execute();
	signup_user_goto($user);
}

function signup_user_gaokao_form($form, $form_state) {
	$user=$form['#user'];
	$ucategory=$user->ucategory;

	// Genereates default values.
	$default_values = array();
	$query=db_select('students_gk','sg')->fields('sg')->condition('sg.uid', $user->name);
	if($query->countQuery()->execute()->fetchField()>0) {
		$default_values = $query->execute()->fetchAssoc();
	}
	
	// city/district list
	$citylist = array();
	$query=db_select('vl_city_district', 'cd');
	$query->innerJoin('students_gk', 'sg', 'cd.pid=sg.province');
	$query=$query->fields('cd')->condition('sg.uid', $user->name)->where("cd.cid <> cd.pid")->orderBy('cd.cid');
	$rdbo=$query->execute();
	
	foreach($rdbo as $r) {
		$citylist += array($r->cid => $r->name);
	}

	$query=db_select('vl_province','p');
	$query->innerJoin('students_gk', 'sg', 'p.pid=sg.province');
	$is_gk_enabled=$query->fields('p',array('isgkenabled'))->condition('sg.uid',$user->name)->execute()->fetchField();
	
	// Gaokao frameset
	$form['gkinfo'] = array(
		'#type' => 'fieldset',
		'#title' => t('Exam info'),
		'#collapsible' => 'true',
	);

	$form['gkinfo']['sid'] = array(
		'#type' => 'textfield',
		'#title' => t('The student ID given by your exam organizer'),
		'#description' => $ucategory == 1? t('It should be a 14-digit number, beginning with @year.',array('@year'=>substr(variable_get('zhaoban_current_year',date('Y')),-2))) : '',
		'#maxlength' => 14,
		'#default_value' => $default_values['sid'],
		'#required' => TRUE,
		'#attributes' => array('placeholder'=>substr(variable_get('zhaoban_current_year',date('Y')),-2).substr($default_values['province'],0,2).'XXXXXXXXXX'),
	);
	$form['gkinfo']['city_district'] = array(
		'#type' => 'select',
		'#title' => t('The city/district you live in'),
		'#description' => t('To change your province, please <a href="@url">click the link here</a>.',
			array('@url'=>'/user/'.$user->uid.'/edit#edit-province')),
		'#required' => true,
		'#options' => $citylist,
		'#default_value' => $default_values['city_district'],
	);
	// Is one a science student?
	$form['gkinfo']['is_math_subjects'] = array(
		'#type' => 'radios',
		'#title' => t('The subject I take'),
		'#options' => array('0' => t('Liberal'), '1' => t('Science')),
		'#default_value' => $default_values['is_math_subjects'],
		'#required' => true,
	);

	$form['score'] = array(
		'#type' => 'fieldset',
		'#title' => t('Scores'),
		'#collapsible' => 'true',
	);
	
	$form['score']['score_chinese'] = array(
		'#type' => 'textfield',
		'#title' => t('Chinese'),
		'#default_value' => $default_values['score_chinese'],
		'#required' => TRUE,
	);
	$form['score']['score_languages'] = array(
		'#type' => 'textfield',
		'#title' => t('Foreign language'),
		'#default_value' => $default_values['score_languages'],
		'#required' => TRUE,
	);
	$form['score']['score_math'] = array(
		'#type' => 'textfield',
		'#title' => t('Math'),
		'#description' => t('The score of Mathematics has been counted in since 2006.'),
		'#default_value' => $default_values['score_math'],
		'#required' => TRUE,
	);
	$form['score']['score_synthesis'] = array(
		'#type' => 'textfield',
		'#title' => t('Synthesis subject'),
		'#default_value' => $default_values['score_synthesis'],
		'#description' => t('If you are from Shandong province, please add your testing score into synthesis subject.'),
		'#required' => TRUE,
	);
	// Computes visibility of score section.
	if(!$is_gk_enabled) {
		$form['score']['#description'] = t('The score uploading feature of your provice is banned by the administrator.');
		unset($form['score']['score_chinese']);
		unset($form['score']['score_languages']);
		unset($form['score']['score_math']);
		unset($form['score']['score_synthesis']);
	}
	
	$form['#validate'][]='signup_user_gaokao_form_validate';
	$form['#submit'][]='signup_user_gaokao_form_save';
	return $form;
}

function signup_user_gaokao_form_save($form, $form_state) {
	$user=$form['#user'];
	$edit=$form_state['values'];
	$isvalidated=db_select('students','s')->fields('s',array('validated'))->condition('s.uid',$user->name)->execute()->fetchField();
	
	db_update('students_gk')
		->fields(array(
			'city_district' => $edit['city_district'],
			'is_math_subjects' => $edit['is_math_subjects'],
			'sid' => $edit['sid'],
		))
		->condition('uid', $user->name)
		->execute();
	
	$query=db_select('vl_province','p');
	$query->innerJoin('students_gk', 'sg', 'p.pid=sg.province');
	$is_gk_enabled=$query->fields('p',array('isgkenabled'))->condition('sg.uid',$user->name)->execute()->fetchField();
	
	if($is_gk_enabled) {
		db_update('students_gk')
			->fields(array(
				'score_chinese' => $edit['score_chinese'],
				'score_languages' => $edit['score_languages'],
				'score_math' => $edit['score_math'],
				'score_synthesis' => $edit['score_synthesis'],
			))
			->condition('uid', $user->name)
			->execute();
	}
	signup_user_goto($user);
	return;
}

function signup_user_gaokao_form_validate($form, $form_state) {
	$user=$form['#user'];
	$edit=$form_state['values'];

	$is_gid_invalid = FALSE;
	$ucategory=$user->ucategory;
	if($ucategory == 1)
		if($edit['sid']) {
			$province=db_select('students_gk','sg')->condition('sg.uid',$user->name)->fields('sg',array('province'))->execute()->fetchField();
			if(!preg_match('/'.substr(variable_get('zhaoban_current_year',date('Y')),-2).substr($province,0,2).'\d{10}/', $edit['sid'])) $is_gid_invalid = TRUE;
			if($is_gid_invalid) form_set_error('sid', t('The student gaokao ID you\'ve entered is not valid.'));
		}
		if(isset($edit['score_chinese']) && !is_numeric($edit['score_chinese']))
			form_set_error('score_chinese', t('The score you\'ve entered is not valid.'));
		if(isset($edit['score_languages']) && !is_numeric($edit['score_languages']))
			form_set_error('score_languages', t('The score you\'ve entered is not valid.'));
		if(isset($edit['score_math']) && !is_numeric($edit['score_math']))
			form_set_error('score_math', t('The score you\'ve entered is not valid.'));
		if(isset($edit['score_synthesis']) && !is_numeric($edit['score_synthesis']))
			form_set_error('score_synthesis', t('The score you\'ve entered is not valid.'));
}

function signup_user_login_block($form) {
	$form['#action'] = url($_GET['q'], array('query' => drupal_get_destination()));
	$form['#validate'] = user_login_default_validators();
	$form['#id'] = 'user-login-form';
	$form['#submit'][] = 'user_login_submit';
	$form['name'] = array('#type' => 'textfield',
		'#title' => t('Username/ID Number'),
		'#maxlength' => USERNAME_MAX_LENGTH,
		'#size' => 15,
		'#required' => TRUE,
		'#attributes' => array('placeholder'=>variable_get('zhaoban_current_year',date('Y')).'BXXXX'),
	);
	$form['pass'] = array('#type' => 'password',
		'#title' => t('Password'),
		'#maxlength' => 60,
		'#size' => 15,
		'#required' => TRUE,
	);
	$form['actions'] = array('#type' => 'actions');
	$form['actions']['submit'] = array('#type' => 'submit',
		'#value' => t('Log in'),
	);
	$items = array();
	if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
		$items[] = l(t('Begin signup'), 'user/register');
	}
	$items[] = l(t('Request new password'), 'user/password');
	$form['links'] = array('#markup' => theme('item_list', array('items' => $items)));
	return $form;
}

/**
 * Implements hook_block_info().
 */
function signup_block_info() {
	$result=array();
	
	$result['loginlocal'] = array(
		'info' => t('User login (Local version)'),
		'cache' => DRUPAL_CACHE_GLOBAL,
	);

	$result['progress'] = array(
		'info' => t('Signup Progress'),
		'cache' => DRUPAL_NO_CACHE
	);
	$result['hotprof'] = array(
		'info' => t('Hot professions'),
		'cache' => DRUPAL_CACHE_GLOBAL,
	);
	$result['searchstu'] = array(
		'info' => t('Search students'),
		'cache' => DRUPAL_CACHE_GLOBAL,
	);
	//var_dump($result);
	return $result;
}

/**
 * Implements hook_block_view().
 */
function signup_block_view($delta = '') {
	global $user;
	$block = array();
	switch ($delta) {
		case 'loginlocal':
			// For usability's sake, avoid showing two login forms on one page.
			if (!$user->uid && !(arg(0) == 'user' && !is_numeric(arg(1)))) {
				$block['subject'] = t('User login');
				$block['content'] = drupal_get_form('signup_user_login_block');
			}
			return $block;
			break;
		case 'progress':
			if($user->uid && db_select('students','s')->fields('s')->condition('s.uid',$user->name)->countQuery()->execute()->fetchField()>0)
				return signup_block_content_PROGRESS();
			else
				return $block;
			break;
		case 'hotprof':
			if(db_select('students','s')->fields('s')->condition('profession_major','0','<>')->countQuery()->execute()->fetchField()>0)
				return signup_block_content_HOTPROF();
			else
				return $block;
			break;
		case 'searchstu':
			if(user_access('access user profiles')) {
				$block['subject']='';
				$block['content']=drupal_get_form('signup_search_student');
				return $block;
			}
			else
				return $block;
			break;
	}
}

function signup_block_content_PROGRESS() {
	$result=array();
	
	$result['subject']=t('Signup Progress');
	$result['content']='<p></p><p style="vertical-align: middle">';

	// If the user has filled up personal detail?
	if(db_select('students','s')->fields('s',array('name'))->condition('s.uid', $GLOBALS['user']->name)->execute()->fetchField()=='')
		if(arg(0)=='user'&&arg(2)=='edit'&&is_null(arg(3)))
			$status[0]='warning';
		else
			$status[0]='error';
	else $status[0]='ok';
	$result['content'] .= sprintf('<img src="/misc/watchdog-%s.png" align="middle">&nbsp;&nbsp;', $status[0]);
	$result['content'] .= l(t('Personal Detail'), 'user/'.$GLOBALS['user']->uid.'/edit');
	$result['content'] .='</p><p></p><p>';

	// If user has filled up a profession?
	if(!_signup_user_tab_access($GLOBALS['user'],'exam'))
		if(arg(0)=='user'&&arg(2)=='edit'&& arg(3)=='profession')
			$status[1]='warning';
		else
			$status[1]='error';
	else $status[1]='ok';
	$result['content'] .= sprintf('<img src="/misc/watchdog-%s.png" align="middle">&nbsp;&nbsp;', $status[1]);
	$result['content'] .= !_signup_user_tab_access($GLOBALS['user'],'profession')?t('Choose a Profession'):l(t('Choose a Profession'),'user/'.$GLOBALS['user']->uid.'/edit/profession');
	$result['content'] .='</p><p></p><p>';
	
	// If user has filled exams?
	if(!_signup_user_tab_access($GLOBALS['user'],'contact'))
		if(arg(0)=='user'&&arg(2)=='edit'&& arg(3)=='exam')
			$status[2]='warning';
		else
			$status[2]='error';
	else $status[2]='ok';
	$result['content'] .= sprintf('<img src="/misc/watchdog-%s.png" align="middle">&nbsp;&nbsp;', $status[2]);
	$result['content'] .= !_signup_user_tab_access($GLOBALS['user'],'exam')?t('Fill up Examninations'):l(t('Fill up Examninations'),'user/'.$GLOBALS['user']->uid.'/edit/exam');
	$result['content'] .='</p><p></p><p>';

	// If user has filled contact info?
	$r = db_select('students_contact','sc')->fields('sc',array('contact_phone'))->condition('uid',$GLOBALS['user']->name)->execute()->fetchField();
	if($r=='')
		if(arg(0)=='user'&&arg(2)=='edit'&& arg(3)=='contact')
			$status[3]='warning';
		else
			$status[3]='error';
	else $status[3]='ok';
	$result['content'] .= sprintf('<img src="/misc/watchdog-%s.png" align="middle">&nbsp;&nbsp;', $status[3]);
	$result['content'] .= !_signup_user_tab_access($GLOBALS['user'],'contact')?t('Leave Contact Details'):l(t('Leave Contact Details'),'user/'.$GLOBALS['user']->uid.'/edit/contact');
	$result['content'] .='</p><p></p><p>';

	// If user has filled gaokao info?
	$ucategory=db_select('students','s')->fields('s',array('ucategory'))->condition('uid',$GLOBALS['user']->name)->execute()->fetchField();
	
	if($ucategory==1 || $ucategory==2) {
		$r=db_select('students_gk','sg')->fields('sg')->condition('sg.uid',$GLOBALS['user']->name)->isNotNull('sg.sid')->countQuery()->execute()->fetchField();
		if($r==0)
			if(arg(0)=='user'&&arg(2)=='edit'&& arg(3)=='gaokao')
				$status[3]='warning';
			else
				$status[3]='error';
		else if($status[2]=='warning'||$status[2]=='error')
			$status[3]='error';
		else
			$status[3]='ok';
		$result['content'] .= sprintf('<img src="/misc/watchdog-%s.png" align="middle">&nbsp;&nbsp;', $status[3]);
		$result['content'] .= $status[3]!='ok'?t('Gaokao Info'):l(t('Gaokao Info'),'user/'.$GLOBALS['user']->uid.'/edit/gaokao');
	}
	$result['content'] .='</p><p></p><p>';
	
	// If the user has finished payment?
	if(module_exists('onlinecharge')) {
		$total_orders=db_select('orders','o')->condition('o.uid',$GLOBALS['user']->uid)->fields('o')->countQuery()->execute()->fetchField();
		$unfinished_orders=db_select('orders','o')->condition('o.uid',$GLOBALS['user']->uid)->condition('status',100,'<>')->fields('o')->countQuery()->execute()->fetchField();
		if($unfinished_orders > 0 || $total_orders == 0)
			$status[4]='error';
		else $status[4]='ok';
		$result['content'] .= sprintf('<img src="/misc/watchdog-%s.png" align="middle">&nbsp;&nbsp;', $status[4]);
		$result['content'] .= onlinecharge_user_access($GLOBALS['user'])?l(t('Online Charging'),'user/'.$GLOBALS['user']->uid.'/payment'):t('Online Charging');
	}
	
	// If the user could print ticket report
	$result['content'] .='</p><p></p><p>';
	$result['content'] .= sprintf('<img src="/misc/watchdog-warning.png" align="middle">&nbsp;&nbsp;');
	$result['content'] .= signup_ticket_report_perm($GLOBALS['user'])?l(t('Print Admission Ticket'),'user/'.$GLOBALS['user']->uid.'/ticket'):'<span title="'.t('You are not allowed to print the ticket now.').'">'.t('Print Admission Ticket').'</span>';
	
	return $result;
}

function signup_block_content_HOTPROF() {
	$result=array();
	$numofprofess = db_select('vl_professions','p')->fields('p')->condition('p.enabled','1')->countQuery()->execute()->fetchField();
	$r=t('There are !url opening for signing up this year.<br />'.
		'!users students have been registered till now.',
		array(
			'!num' => $numofprofess,
			'!url' => $GLOBALS['user']->uid?t('!num professions',array('!num' => $numofprofess)):l(t('!num professions',array('!num' => $numofprofess)),'http://www.ccom.edu.cn/news/zsks/201112/t20111219_20041.html'),
			'!users' => db_select('students','s')->fields('s')->condition('s.idcard_number','','<>')->condition('s.profession_major','0','<>')->countQuery()->execute()->fetchField(),
	));
	$r.='<br/>';
	$num=db_select('students','s')->fields('s')->condition('s.validated','1')->countQuery()->execute()->fetchField();
	if($num>0)
		$r.=t('!num of which has been confirmed.', array('!num'=>$num));

	$result['content']=$r;
	$result['subject']=t('Hot professions');
	return $result;
}


function signup_search_student($form, $form_state) {
	$form['prefix']=array(
		'#markup' => '<div class="container-inline">',
	);
	if(isset($form_state['rebuild_info']['haserror']) && $form_state['rebuild_info']['haserror']==1) {
		$form['errmsg'] = array(
			'#type' => 'markup',
			'#markup' => '<span class="container-inline messages error" style="display: inline" id="errmsg">'.t('Invalid Student ID').'</span>',
			);
		drupal_add_js(
			'jQuery(document).ready(function(){'.
				'jQuery("#edit-uid").focus();'.
				'window.setTimeout("jQuery(\"#errmsg\").hide();",3000)});',
			'inline'
		);
	}
	$form['uid'] = array(
		'#type' => 'textfield',
		'#maxlength' => 18,
		'#size' => 20,
		'#attributes' => array(
			'title' => t('Enter the Student ID, his name or his idcard number'),
		),
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Search'),
		'#attributes' => array(
			'style' => 'vertical-align: baseline;',
		),
		'#suffix' => '</div>',
	);
	
	return $form;
}

function signup_search_student_submit($form, &$form_state) {
	$valins="1";
	
	unset($form_state['rebuild_info']['haserror']);
	
	$query=db_select('users','u')->fields('u',array('uid'))->condition('u.name','%'.$form_state['values']['uid'].'%', 'LIKE')->where($valins)->orderBy('u.name');
	$query->innerJoin('students','s','u.name=s.uid');
	$uid=$query->execute()->fetchField();
	if(!$uid) {
		$query=db_select('users','u')->fields('u',array('uid'))->condition('s.name','%'.$form_state['values']['uid'].'%', 'LIKE')->where($valins)->orderBy('u.name');
		$query->innerJoin('students','s','u.name=s.uid');
		$uid=$query->execute()->fetchField();
		if(!$uid) {
			$query=db_select('users','u')->fields('u',array('uid'))->condition('s.idcard_number',$form_state['values']['uid'])->where($valins)->orderBy('u.name');
			$query->innerJoin('students','s','u.name=s.uid');
			$uid=$query->execute()->fetchField();
			if(!$uid) {
				$query=db_select('users','u')->fields('u',array('uid'))->condition('sg.sid','%'.$form_state['values']['uid'], 'LIKE')->where($valins)->orderBy('u.name');
				$query->innerJoin('students','s','u.name=s.uid');
				$query->innerJoin('students_gk','sg','s.uid=sg.uid');
				$uid=$query->execute()->fetchField();
				if(!$uid) {
					$form_state['rebuild_info']['haserror']=1;
					$form_state['rebuild']=TRUE;
				}
				else
					$form_state['rebuild']=FALSE;
			} else
				$form_state['rebuild']=FALSE;
		} else
			$form_state['rebuild']=FALSE;
	} else 
		$form_state['rebuild']=FALSE;

	if(!$form_state['rebuild'])
		drupal_goto('signup/search/'.$form_state['values']['uid']);
}

function signup_form_contact_site_form_alter(&$form, &$form_state) {
	// we don't need email address for this site
	$form['mail']['#default_value']='';
	$form['copy']['#type']='hidden';
	if(isset($GLOBALS['user']->name)) {
		$r=db_select('students','s')->fields('s',array('name'))->condition('s.uid',$GLOBALS['user']->name)->execute()->fetchField();
		if($r)
			$form['name']['#default_value']=$r;
		else
			$form['name']['#default_value']='';
	}
}

function signup_overview_by_profession() {
	$output = '<div id="baoming_user_stat" class="baoming_view_section node">';
	
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";
		
	// Compute total number of registered students.
	$total_students=db_select('students','s')
		->fields('s')
		->condition('s.idcard_number','','<>')
		->condition('s.profession_major','0','<>')
		->where($valins)
		->countQuery()->execute()->fetchField();
	
	$output .= '<p>'.t('There are @number valid students who have signed up.', array('@number'=>$total_students)).'</p>';
	$header = array(
		array('data'=>t('Profession'), 'field'=>'pid', 'sort'=>'asc'),
		array('data'=>t('Number of students (%)'), 'field'=>'num'),
	);
	
	if(user_access('view validated') && module_exists('onlinecharge')) {
		$output .= '<p>'.drupal_render(drupal_get_form('signup_overview_set_validated')).'</p>';
	}

	$query = db_select('students','s')->condition('s.idcard_number','','<>');
	$query->innerJoin('vl_professions','p','s.profession_major = p.pid');
	$query->addExpression('COUNT(*)', 'num');
	$query = $query->where($valins)
		->fields('p',array('pid','uid','pname','pnamememo'))
		->groupBy('s.profession_major')
		->extend('TableSort')->orderByHeader($header);
	
	$rdbo = $query->execute();
	$rows=array();
	
	foreach($rdbo as $r) {
		if($r->pid) {
				// Determine whether you are plain department
				if(user_access('view own draft') && !user_access('view draft'))
						if($GLOBALS['user']->name !== $r->uid) continue;
			$rows[] = array(
			'<nobr>'.l($r->pname, 'signup/overview/profession/'.$r->pid, array(
				'title' => t('Click to view the details of @prof profession', array('@prof'=>$r->pname)),
				)
			).'</nobr>',
			sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		}
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output .= '</div>';
	
	setcookie('examplace', NULL, 0, '/');
	return $output;
}

function signup_overview_by_profession_detail($prof) {
	$cookie_examplace='1';
	
	if(isset($_COOKIE["examplace"])) {
		$query=db_select('vl_profession_place','pp')
			->condition('pp.examplace',$_COOKIE["examplace"])
			->condition('pp.pid',$prof)
			->countQuery();
		if(($query->execute()->fetchField()>0) || ($_COOKIE['examplace']=='110000'))
			$cookie_examplace="s.examplace='".$_COOKIE['examplace']."'";
		else
			setcookie('examplace', NULL);
	}
	
	drupal_add_js(drupal_get_path('module', 'signup') .'/signup.js');

	drupal_set_title(t('By Profession').' - '.$prof->pname);

	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";

	if($prof)
		$sql_department_insert = "p.pid='".$prof->pid."'";
	else
		$sql_department_insert = '1';

	$output = '<div id="baoming_user_list" class="baoming_view_section node">';
	
	$r=db_select('vl_city_district','cd')->fields('cd',array('cid','name'))->condition('cd.cid','110000')->execute()->fetchObject();
	$options=array('000000'=>t('All students'));
	$options+=array((string)($r->cid)=>$r->name);

	$query=db_select('vl_profession_place','p')->condition('p.pid',$prof->pid);
	$query->innerJoin('vl_city_district','cd','p.examplace=cd.cid');
	$query=$query->fields('cd',array('cid','name'))->orderBy('cd.cid');
	$rdbo=$query->execute();
	foreach($rdbo as $r) {
			$a=(string)($r->cid);
			$options += array((string)$r->cid=>$r->name);
	}
	$options=array_unique($options);
	if(count($rdbo)) {
			$placeselect = array(
					'#id' => 'placeselect',
					'#type' => 'select',
					'#title' => t('Exam Place'),
					'#options' => $options,
					'#prefix' => '<div class="inline-element-div">',
					'#attributes' => array('onChange' => ''.
						'jQuery.cookie("examplace", jQuery("#placeselect").val(), 0, "/");'.
						'window.location.reload();'.
					''),
					'#suffix' => '</div>',
			);
			if(isset($_COOKIE['examplace']))
		drupal_add_js(
			'jQuery(document).ready(function(){'.
				'jQuery("#placeselect").val('.$_COOKIE['examplace'].');'.
				'});'.
				'',
			'inline'
		);
		if(count(array_keys($options))>2)
				$output .= drupal_render($placeselect);
	}
	$rows = array();
	$header = array(
		array('data' =>t('Student ID'), 'field'=>'s.uid', 'sort'=>'desc'),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Province'), 'field'=>'gk.province'),
		array('data' =>t('Personnel record'), 'field'=>'personnel_record_at'),
	);
	
	$query=db_select('students','s')->condition('s.idcard_number','','<>')->fields('s');
	$query->leftJoin('students_gk','gk','s.uid=gk.uid');
	$query->leftJoin('students_contact','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->addExpression('u.uid', 'sys_uid');
	$query = $query->fields('c', array('personnel_record_at'))
					->fields('gk')
					->where($sql_department_insert)->where($valins)->where($cookie_examplace)
			->extend('TableSort')->orderByHeader($header)
			->extend('PagerDefault')->limit(20);
	$rdbo=$query->execute();
	if($rdbo->rowCount()==0) {
			return MENU_NOT_FOUND;
	}
	else
	foreach($rdbo as $r) {
			switch($r->ucategory) {
					case uc_OWN_STUDENT:
							$province = t('Our own student');
							$per = t('Our own student');
							$plink = '000000';
							break;
					case uc_MAINLAND_STUDENT:
					case uc_HKTW_STUDENT:
							$province = $r->province ? db_select('vl_province','p')->fields('p',array('simplified_name'))->condition('p.pid',$r->province)->execute()->fetchField() : t('N/A');
							$per = $r->personnel_record_at;
							if(!$per) $per=t('N/A');
							$plink = $r->province;
							break;
					case uc_OVERSEA_STUDENT:
							$province = db_select('vl_city_district','cd')->fields('cd',array('name'))->condition('cd.cid',$r->city_district)->execute()->fetchField();
							$per = t('N/A');
							$plink = $r->province;
							break;
			}
			
			
			$rows[] = array(
				'<nobr>'.l($r->uid, 'user/'.$r->sys_uid).'</nobr>',
				'<nobr>'.$r->name.'</nobr>',
				$r->gender == 1 ? t('Male'): t('Female'),
				(user_access('view draft'))?l($province, 'signup/overview/province/'.$plink):($province),
				$per,
			);
	}
	
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No suitable students.')));
	$output .= theme('pager');
	$output .= "</div>";
	
	return $output;
}

function signup_overview_by_province() {
	$output = '<div id="baoming_user_stat" class="baoming_view_section node">';

	$prof=arg(3);
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";

	// Compute total number of registered students.
	$total_students=db_select('students','s')
		->fields('s')
		->condition('s.idcard_number','','<>')
		->condition('s.profession_major','0','<>')
		->where($valins)
		->countQuery()->execute()->fetchField();
	
	$output .= '<p>'.t('There are @number valid students who have signed up.', array('@number'=>$total_students)).'</p>';

	if(user_access('view validated') && module_exists('onlinecharge')) {
		$output .= '<p>'.drupal_render(drupal_get_form('signup_overview_set_validated')).'</p>';
	}

	$header = array(
		array('data'=>t('Province'), 'field'=>'pname'),
		array('data'=>t('Number of students'), 'field'=>'num', 'sort'=>'desc'),
	);
	$query = db_select('students','s')->condition('s.idcard_number','','<>')->condition('s.profession_major','0', '<>');
	$query->leftJoin('students_gk','sg','s.uid=sg.uid');
	$query->leftJoin('vl_province','p','sg.province=p.pid');
	$query = $query->fields('s',array('ucategory','uid'))
		->fields('p',array('pid','name'));
	$query->addExpression('COUNT(s.uid)', 'num');
	$query->addExpression('CONVERT(CONCAT(CONVERT(p.ucategory, char), p.name) USING gbk )', 'pname');
	$query = $query->where($valins)
		->groupBy('p.pid')
		->groupBy('s.ucategory')
		->extend('TableSort')->orderByHeader($header);
	
	$rdbo = $query->execute();
	$rows=array();
	
	foreach($rdbo as $r) {
		if($r->pid) {
			// Determine whether you are plain department
			if(user_access('view own draft') && !user_access('view draft'))
			if($GLOBALS['user']->name !== $r->uid) continue;
			$rows[] = array(
			'<nobr>'.l($r->name, 'signup/overview/province/'.$r->pid, array(
				'title' => t('Click to view the details of @prov province', array('@prov'=>$r->name)),
				)
			).'</nobr>',
			sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		} else if($r->ucategory==='0') {
			$rows[] = array(
				l(t('Our own student'), 'signup/overview/province/000000', array(
					'title' => t('Click to view the details of students from @province', array('@province'=>t('Our own student'))),
					)),
				sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		}

	}
	
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	$output .= '</div>';

	return $output;
	
}

function signup_overview_by_province_detail($prov) {
	drupal_set_title(t('By Province').' - '.$prov->name);
	
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";
	
	$output = '';
	
	$output = '<div id="baoming_user_list" class="baoming_view_section node">';
	
	$rows = array();
	$header = array(
		array('data' =>t('Student ID'), 'field'=>'s.uid', 'sort'=>'desc'),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Profession'), 'field'=>'s.profession_major'),
		array('data' =>t('Personnel record'), 'field'=>'personnel_record_at'),
	);

	if($prov=='000000')
	$provcondition='s.ucategory = 0';
	else
	$provcondition="gk.province='".$prov->pid."'";
	
	//$tablesort = tablesort_sql($header);
	$query=db_select('students','s')->condition('s.idcard_number','','<>')->fields('s');
	$query->leftJoin('students_gk','gk','s.uid=gk.uid');
	$query->leftJoin('students_contact','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->addExpression('u.uid', 'sys_uid');
	$query = $query->fields('c', array('personnel_record_at'))
		->fields('gk')
		->fields('p',array('pname'))
		->where($provcondition)->where($valins)
		->extend('TableSort')->orderByHeader($header)
		->extend('PagerDefault')->limit(20);
	$rdbo=$query->execute();
	if($rdbo->rowCount()==0) {
		return MENU_NOT_FOUND;
	}
	else
	foreach($rdbo as $r) {
		switch($r->ucategory) {
			case uc_OWN_STUDENT:
				$province = t('Our own student');
				$per = t('Our own student');
				$plink = '000000';
				break;
			case uc_MAINLAND_STUDENT:
			case uc_HKTW_STUDENT:
				$province = $r->province ? db_select('vl_province','p')->fields('p',array('simplified_name'))->condition('p.pid',$r->province)->execute()->fetchField() : t('N/A');
				$per = $r->personnel_record_at;
				if(!$per) $per=t('N/A');
				$plink = $r->province;
				break;
			case uc_OVERSEA_STUDENT:
				$province = db_select('vl_city_district','cd')->fields('cd',array('name'))->condition('cd.cid',$r->city_district)->execute()->fetchField();
				$per = t('N/A');
				$plink = $r->province;
				break;
		}

		$rows[] = array(
			'<nobr>'.l($r->uid, 'user/'.$r->sys_uid).'</nobr>',
			'<nobr>'.$r->name.'</nobr>',
			$r->gender == 1 ? t('Male'): t('Female'),
			l($r->pname, 'signup/overview/profession/'.$r->profession_major, array(
				'title' => t('Click to view the details of @prof', array('@prof' => $r->pname)))
			),
			$per,
		);
	}
	
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output .= theme('pager');
	$output .= "</div>";
	
	return $output;
}

function signup_overview_set_validated() {
	if(module_exists('onlinecharge')) {
		$form=array();
		$query=db_select('students','s');
		$query->innerJoin('users','u','u.name=s.uid');
		$query->innerJoin('orders','o','u.uid=o.uid');
		$query->innerJoin('vl_charging_standard','sc','sc.scid=o.standard');
		$query->condition('sc.period',1)->condition('o.status',100)->condition('s.validated',0)->fields('s');
		$count=$query->countQuery()->execute()->fetchField();
		if($count) {
			$form['setvalidate'] = array(
				'#type' => 'submit',
				'#name' => 'setvalidate',
				'#value' => t('Set all paid students as validated'),
			);
		}
		$query=db_select('students','s')->condition('validated',0);
		$query->innerJoin('users','u','u.name=s.uid');
		$query->condition('u.status',1)->fields('s');
		$count=$query->countQuery()->execute()->fetchField();
		if($count) {
			$form['setinactive'] = array(
				'#type' => 'submit',
				'#name' => 'setinactive',
				'#value' => t('Set all unconfirmed students as inactive'),
			);
		}
		if(count($form))
			return $form;
		else return NULL;
	} else
		return NULL;
}

function signup_overview_set_validated_submit($form, $form_state) {
	if(module_exists('onlinecharge')) {
		if($form_state['clicked_button']['#name']=='setvalidate') {
			$students=db_select('users','u')->where('u.name={students}.uid')->fields('u',array('uid'));
			$students->innerJoin('orders','o','u.uid=o.uid');
			$students->innerJoin('vl_charging_standard','sc','sc.scid=o.standard');
			$students->condition('sc.period',1)->condition('o.status',100);
			$query=db_update('students')->fields(array('validated' => 1))->exists($students);
			$result=$query->execute();
			$students=db_select('students','s')->fields('s',array('uid'))->condition('s.validated',1)->where('{users}.name=s.uid');
			$query=db_update('users')->fields(array('status'=>1))->exists($students);
			$query->execute();
			
			if($result) {
				drupal_set_message(t('!num students have been marked as validated.', array('!num'=>$result)));
				watchdog('onlinecharge',
					'!user set !num students as validated.', array(
						'!user'=>$GLOBALS['user']->name,
						'!num'=>$result),
					WATCHDOG_INFO
				);
			}
		}
		
		if($form_state['clicked_button']['#name']=='setinactive') {
			$students=db_select('students','s')->where('{users}.name=s.uid')->condition('s.validated',0)->fields('s',array('uid'));
			$query=db_update('users')->fields(array('status'=>0))->exists($students);
			//var_dump($query->__toString()); exit;
			$result=$query->execute();
			if($result) {
				drupal_set_message(t('!num students have been marked as inactive.', array('!num'=>$result)));
				watchdog('onlinecharge',
					'!user set !num students as inactive.', array(
						'!user'=>$GLOBALS['user']->name,
						'!num'=>$result),
					WATCHDOG_INFO
				);
			}
		}
	}
}

function signup_2nd_round_by_profession() {
	$output = '<div id="baoming_user_stat" class="baoming_view_section node">';
	
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";
		
	// Compute total number of registered students.
	$total_students=db_select('students','s')
		->fields('s')
		->condition('s.idcard_number','','<>')
		->condition('s.profession_major','0','<>')
		->condition('s.pass_round1_major','0','<>')
		->where($valins)
		->countQuery()->execute()->fetchField();
	
	$output .= '<p>'.t('There are !num students which have been marked as enrolled into 2nd round examination.', array('!num'=>$total_students)).'</p>';
	$header = array(
		array('data'=>t('Profession'), 'field'=>'pid', 'sort'=>'asc'),
		array('data'=>t('Number of students (%)'), 'field'=>'num'),
	);

	$query = db_select('students','s')->condition('s.idcard_number','','<>')->condition('s.pass_round1_major','0','<>');
	$query->innerJoin('vl_professions','p','s.profession_major = p.pid');
	$query->addExpression('COUNT(*)', 'num');
	$query = $query->where($valins)
		->fields('p',array('pid','uid','pname','pnamememo'))
		->groupBy('s.profession_major')
		->extend('TableSort')->orderByHeader($header);
	
	$rdbo = $query->execute();
	$rows=array();
	
	foreach($rdbo as $r) {
		if($r->pid) {
			// Determine whether you are plain department
			if(user_access('view own draft') && !user_access('view draft'))
				if($GLOBALS['user']->name !== $r->uid) continue;
			$rows[] = array(
			'<nobr>'.l($r->pname, 'signup/2ndround/profession/'.$r->pid, array(
				'title' => t('Click to view the details of @prof profession', array('@prof'=>$r->pname)),
				)
				).'</nobr>',
			sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		}
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	$output .= '</div>';
	
	setcookie('examplace', NULL, 0, '/');
	return $output;
}

function signup_2nd_round_by_profession_detail($prof) {
	drupal_set_title(t('By Profession').' - '.$prof->pname);
	
	if($prof)
		$sql_department_insert = "p.pid='".$prof->pid."'";
	else
		$sql_department_insert = '1';
	$output = '<div id="baoming_user_list" class="baoming_view_section node">';
	
	$r=db_select('vl_city_district','cd')->fields('cd',array('cid','name'))->condition('cd.cid','110000')->execute()->fetchObject();
	$options=array('000000'=>t('All students'));
	$options+=array((string)($r->cid)=>$r->name);

	$rows = array();
	$header = array(
		array('data' =>t('Student ID'), 'field'=>'s.uid', 'sort'=>'desc'),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Province'), 'field'=>'gk.province'),
		array('data' =>t('Personnel record'), 'field'=>'personnel_record_at'),
	);
	
	$query=db_select('students','s')->condition('s.idcard_number','','<>')->fields('s')->condition('p.pid',$prof->pid);
	$query->leftJoin('students_gk','gk','s.uid=gk.uid');
	$query->leftJoin('students_contact','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->addExpression('u.uid', 'sys_uid');
	$query = $query->fields('c', array('personnel_record_at'))
		->fields('gk')
		->where($sql_department_insert)->condition('s.pass_round1_major','0','<>')
		->extend('TableSort')->orderByHeader($header)
		->extend('PagerDefault')->limit(20);
	$rdbo=$query->execute();
	if($rdbo->rowCount()==0) {
			return MENU_NOT_FOUND;
	}
	else
	foreach($rdbo as $r) {
		switch($r->ucategory) {
			case uc_OWN_STUDENT:
				$province = t('Our own student');
				$per = t('Our own student');
				$plink = '000000';
				break;
			case uc_MAINLAND_STUDENT:
			case uc_HKTW_STUDENT:
				$province = $r->province ? db_select('vl_province','p')->fields('p',array('simplified_name'))->condition('p.pid',$r->province)->execute()->fetchField() : t('N/A');
				$per = $r->personnel_record_at;
				if(!$per) $per=t('N/A');
				$plink = $r->province;
				break;
			case uc_OVERSEA_STUDENT:
				$province = db_select('vl_city_district','cd')->fields('cd',array('name'))->condition('cd.cid',$r->city_district)->execute()->fetchField();
				$per = t('N/A');
				$plink = $r->province;
				break;
		}
		
		
		$rows[] = array(
			'<nobr>'.l($r->uid, 'user/'.$r->sys_uid).'</nobr>',
			'<nobr>'.$r->name.'</nobr>',
			$r->gender == 1 ? t('Male'): t('Female'),
			$province,
			$per,
		);
	}
	
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output .= theme('pager');
	$output .= "</div>";
	
	return $output;
}

function signup_3rd_round_by_profession() {
	$output = '<div id="baoming_user_stat" class="baoming_view_section node">';
	
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";
		
	// Compute total number of registered students.
	$total_students=db_select('students','s')
		->fields('s')
		->condition('s.idcard_number','','<>')
		->condition('s.profession_major','0','<>')
		->condition('s.pass_round3_major','0','<>')
		->where($valins)
		->countQuery()->execute()->fetchField();
	
	$output .= '<p>'.t('There are currently !num students marked as being enrolled into the 3rd round examination.', array('!num'=>$total_students)).'</p>';
	$students_mainland=db_select('students','s')->fields('s')->condition('s.pass_round3_major','0','<>')->condition('s.ucategory',1)->countQuery()->execute()->fetchField();
	$students_determined=db_select('students','s')->fields('s')->condition('s.pass_round3_major','10')->condition('s.ucategory',1)->countQuery()->execute()->fetchField();
	$students_tobe_determined=db_select('students','s')->fields('s')->condition('s.pass_round3_major','1')->condition('s.ucategory',1)->countQuery()->execute()->fetchField();
	$output .= '<p>'.t('Out of !total mainland students, there are !determ determined students, !tobedeterm to-be-determined students.', array('!total'=>$students_mainland, '!determ'=>$students_determined, '!tobedeterm'=>$students_tobe_determined)).'</p>';
	$header = array(
		array('data'=>t('Profession'), 'field'=>'pid', 'sort'=>'asc'),
		array('data'=>t('Number of students (%)'), 'field'=>'num'),
	);

	$query = db_select('students','s')->condition('s.idcard_number','','<>')->condition('s.pass_round3_major','0','<>');
	$query->innerJoin('vl_professions','p','s.profession_major = p.pid');
	$query->addExpression('COUNT(*)', 'num');
	$query = $query->where($valins)
		->fields('p',array('pid','uid','pname','pnamememo'))
		->groupBy('s.profession_major')
		->extend('TableSort')->orderByHeader($header);
	
	$rdbo = $query->execute();
	$rows=array();
	
	foreach($rdbo as $r) {
		if($r->pid) {
			// Determine whether you are plain department
			if(user_access('view own draft') && !user_access('view draft'))
				if($GLOBALS['user']->name !== $r->uid) continue;
			$rows[] = array(
				'<nobr>'.l($r->pname, 'signup/3rdround/profession/'.$r->pid, array('title' => t('Click to view the details of @prof profession', array('@prof'=>$r->pname)),)).'</nobr>',
				sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		}
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	$output .= '</div>';
	
	setcookie('examplace', NULL, 0, '/');
	return $output;
}

function signup_3rd_round_by_profession_detail($prof) {
	
	drupal_set_title(t('By Profession').' - '.$prof->pname);
	
	if($prof)
		$sql_department_insert = "p.pid='".$prof->pid."'";
	else
		$sql_department_insert = '1';
	$output = '<div id="baoming_user_list" class="baoming_view_section node">';
	
	$r=db_select('vl_city_district','cd')->fields('cd',array('cid','name'))->condition('cd.cid','110000')->execute()->fetchObject();
	$options=array('000000'=>t('All students'));
	$options+=array((string)($r->cid)=>$r->name);

	$rows = array();
	$header = array(
		array('data' =>t('Student ID'), 'field'=>'s.uid'),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Status'), 'field'=>'s.pass_round3_major', 'sort'=>'desc'),
		array('data' =>t('Province'), 'field'=>'gk.province'),
	);
	
	$query=db_select('students','s')->condition('s.idcard_number','','<>')->fields('s')->condition('p.pid',$prof->pid);
	$query->leftJoin('students_gk','gk','s.uid=gk.uid');
	$query->leftJoin('students_contact','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->innerJoin('students_total_score','ts','ts.uid=s.uid');
	$query->condition('ts.pid',$prof->pid);
	$query->addExpression('u.uid', 'sys_uid');
	$query = $query->fields('c', array('personnel_record_at'))
		->fields('gk')
		->fields('ts',array('outrank'))
		->where($sql_department_insert)->condition('s.pass_round3_major','0','<>')
		->extend('TableSort')->orderByHeader($header)->orderBy('ts.outrank')
		->extend('PagerDefault')->limit(20);
	if(in_array(substr($prof->pid,0,2),array('D5','D6','D7','D8'))) {
		$query->orderBy('ts.total_rank');
	} else {
		$query->orderBy('ts.total_score', 'desc');
	}
	$query->orderBy('s.uid');
	$rdbo=$query->execute();
	if($rdbo->rowCount()==0) {
			return MENU_NOT_FOUND;
	}
	else
	foreach($rdbo as $r) {
		switch($r->ucategory) {
			case uc_OWN_STUDENT:
				$province = t('Our own student');
				$per = t('Our own student');
				$plink = '000000';
				break;
			case uc_MAINLAND_STUDENT:
			case uc_HKTW_STUDENT:
				$province = $r->province ? db_select('vl_province','p')->fields('p',array('simplified_name'))->condition('p.pid',$r->province)->execute()->fetchField() : t('N/A');
				$per = $r->personnel_record_at;
				if(!$per) $per=t('N/A');
				$plink = $r->province;
				break;
			case uc_OVERSEA_STUDENT:
				$province = db_select('vl_city_district','cd')->fields('cd',array('name'))->condition('cd.cid',$r->city_district)->execute()->fetchField();
				$per = t('N/A');
				$plink = $r->province;
				break;
		}
		
		
		$rows[] = array(
			'<nobr>'.l($r->uid, 'user/'.$r->sys_uid).'</nobr>',
			'<nobr>'.$r->name.'</nobr>',
			$r->gender == 1 ? t('Male'): t('Female'),
			$r->pass_round3_major==1?t('To be determined').'/'.$r->outrank:t('Determined'),
			(user_access('signup_3rd_overview'))?l($province, 'signup/3rdround/province/'.$plink):($province),
		);
	}
	
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output .= theme('pager');
	$output .= "</div>";
	
	return $output;
}

function signup_3rd_round_by_province() {

	$prof=arg(3);
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";

	// Compute total number of registered students.
	$total_students=db_select('students','s')
		->fields('s')
		->condition('s.idcard_number','','<>')
		->condition('s.profession_major','0','<>')
		->condition('s.pass_round3_major','0','<>')
		->where($valins)
		->countQuery()->execute()->fetchField();
	
	$output = '<p>'.t('There are currently !num students marked as being enrolled into the 3rd round examination.', array('!num'=>$total_students)).'</p>';
	$header = array(
		array('data'=>t('Province'), 'field'=>'pname', 'sort'=>'asc'),
		array('data'=>t('Number of students'), 'field'=>'num'),
	);
	$query = db_select('students','s')->condition('s.idcard_number','','<>')->condition('s.profession_major','0', '<>')->condition('s.pass_round3_major','0','<>');
	$query->leftJoin('students_gk','sg','s.uid=sg.uid');
	$query->leftJoin('vl_province','p','sg.province=p.pid');
	$query = $query->fields('s',array('ucategory','uid'))
		->fields('p',array('pid','name'));
	$query->addExpression('COUNT(s.uid)', 'num');
	$query->addExpression('CONVERT(CONCAT(CONVERT(p.ucategory, char), p.name) USING gbk )', 'pname');
	$query = $query->where($valins)
		->groupBy('p.pid')
		->groupBy('s.ucategory')
		->extend('TableSort')->orderByHeader($header);
	
	$rdbo = $query->execute();
	$rows=array();
	
	foreach($rdbo as $r) {
		if($r->pid && $r->ucategory>0) {
			// Determine whether you are plain department
			if(user_access('view own draft') && !user_access('view draft'))
				if($GLOBALS['user']->name !== $r->uid) continue;
			$rows[] = array(
				'<nobr>'.l('<img src="/'.drupal_get_path('module','signup').'/download.png">', 'signup/3rdround/province/'.$r->pid.'/download', array('html'=>TRUE,'attributes'=>array('title'=>t('Download standard database for this province')))).' '.
				l('<img src="/'.drupal_get_path('module','signup').'/printer.png">', 'signup/3rdround/province/'.$r->pid.'/report', array('html'=>TRUE,'attributes'=>array('title'=>t('Download printable report for this province')))).' '.
				l($r->name, 'signup/3rdround/province/'.$r->pid, array(
					'title' => t('Click to view the details of @prov province', array('@prov'=>$r->name)),
					)
				).'</nobr>',
				sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		} else if($r->ucategory==='0') {
			$rows[] = array(
				l(t('Our own student'), 'signup/3rdround/province/000000', array(
					'title' => t('Click to view the details of students from @province', array('@province'=>t('Our own student'))),
				)),
				sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		}

	}
	
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));

	return $output;
	
}

function signup_3rd_round_by_province_detail($prov) {
	drupal_set_title(t('By Province').' - '.$prov->name);
	
	$output = '<div id="baoming_user_list" class="baoming_view_section node">';
	
	$rows = array();
	$header = array(
		array('data' =>t('IDCard number'), 'field'=>'s.idcard_number', 'sort'=>'asc'),
		array('data' =>t('Student ID number'), 'field'=>'gk.sid'),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Profession'), 'field'=>'ppid'),
		array('data' =>t('Status'), 'field'=>'s.pass_round3_major'),
	);

	if($prov->pid=='000000')
		unset($header[1]);
	if($prov->pid=='800000')
		$header[1]=array('data'=>t('Country / Region'), 'field'=>'gk.city_district');
	$query=db_select('students','s')->condition('s.idcard_number','','<>')->fields('s');
	$query->leftJoin('students_gk','gk','s.uid=gk.uid');
	$query->leftJoin('students_contact','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->addExpression('u.uid', 'sys_uid');
	$query->addExpression('CONCAT(p.gb_scode,p.gb_pid,p.pid)', 'ppid');
	$query = $query->fields('c', array('personnel_record_at'))
		->fields('gk')
		->fields('p',array('pname','gb_pid','gb_pname'))
		->condition('gk.province',$prov->pid)
		->condition('s.pass_round3_major','0','<>')
		->extend('TableSort')->orderByHeader($header)
		->extend('PagerDefault')->limit(40);
	$rdbo=$query->execute();
	if($rdbo->rowCount()==0)
		return MENU_NOT_FOUND;
	foreach($rdbo as $r) {
		switch($r->ucategory) {
			case uc_OWN_STUDENT:
				$province = t('Our own student');
				$per = t('Our own student');
				$plink = '000000';
				break;
			case uc_MAINLAND_STUDENT:
			case uc_HKTW_STUDENT:
				$province = $r->province ? db_select('vl_province','p')->fields('p',array('simplified_name'))->condition('p.pid',$r->province)->execute()->fetchField() : t('N/A');
				$per = $r->personnel_record_at;
				if(!$per) $per=t('N/A');
				$plink = $r->province;
				break;
			case uc_OVERSEA_STUDENT:
				$province = db_select('vl_city_district','cd')->fields('cd',array('name'))->condition('cd.cid',$r->city_district)->execute()->fetchField();
				$per = t('N/A');
				$plink = $r->province;
				break;
		}
		$rows[] = array(
			'<nobr>'.$r->idcard_number.'</nobr>',
			'<nobr>'.$r->sid.'</nobr>',
			'<nobr>'.l($r->name, 'user/'.$r->sys_uid).'</nobr>',
			$r->gender == 1 ? t('Male'): t('Female'),
			l(sprintf("%s(%s)",$r->gb_pname,$r->pname), 'signup/3rdround/profession/'.$r->profession_major, array(
				'title' => t('Click to view the details of @prof', array('@prof' => $r->pname)))
			),
			$r->pass_round3_major==1?t('To be determined'):t('Determined'),
		);
		if($prov->pid=='000000')
			unset($rows[count($rows)-1][1]);
		if($prov->pid=='800000')
			$rows[count($rows)-1][1]=$province;
	}
	if($r->ucategory) {
		$output .= l('<img src="/'.drupal_get_path('module','signup').'/download.png" style="vertical-align: bottom">'.t('Download database'), 'signup/3rdround/province/'.$prov->pid.'/download', array('html'=>TRUE,'attributes'=>array('title'=>t('Download standard database for this province'))));
		$output .= '&nbsp;';
		$output .= l('<img src="/'.drupal_get_path('module','signup').'/printer.png" style="vertical-align: bottom">'.t('Print Report'), 'signup/3rdround/province/'.$prov->pid.'/report', array('html'=>TRUE,'attributes'=>array('title'=>t('Download printable report for this province'))));
		$output .= '<p/>';
		if(module_exists('kuaidi100'))
			if($r->ucategory==uc_MAINLAND_STUDENT || $r->ucategory==uc_HKTW_STUDENT) {
				$output .= '<div class="container-inline">';
				$output .= drupal_render(drupal_get_form('signup_3rd_round_province_delivery', $prov->pid));
				$output .= '</div>';
			}
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'empty'=>t('No suitable students.')));
	$output .= theme('pager');
	$output .= "</div>";
	
	return $output;
}

function signup_3rd_round_by_province_download($prov) {
	$provname=$prov->simplified_name;
	
	$def = array(
		array("KSH",		"C",	14),
		array("XM",		"C",	24),
		array("XBDM",		"C",	1),
		array("SFZH",		"C",	18),
		array("BYXXMC",	"C",	20),
		array("YXDM",		"C",	5),
		array("YXMC",		"C",	40),
		array("CCDM",		"C",	1),
		array("ZYDM",		"C",	6),
		array("ZYMC",		"C",	30),
		array("STKKM",	"C",	30),
		array("STKCSF",	"N",	7,3),
		array("YXKSKM",	"C",	30),
		array("YXSKCSF",	"N",	7,3),
		array("YXZYMC",	"N",	4,0),
		array("YXKSDD",	"C",	30),
		array("BZ",		"C",	60),
	);

	// creation
	$fname=tempnam(sys_get_temp_dir(),'3rd').'.dbf';
	if(is_file($fname)) unlink($fname);
	$fhandle=dbase_create($fname, $def);
	if (!$fhandle) {
		return NULL;
	}
	$query=db_select('students','s')->condition('s.pass_round3_major','0','<>');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->leftJoin('students_contact','sc','s.uid=sc.uid');
	$query->leftJoin('students_gk','sg','s.uid=sg.uid');
	if(db_table_exists('students_total_score')) {
		$query->innerJoin('students_total_score','ss','s.uid=ss.uid and s.profession_major=ss.pid');
		$query=$query->fields('ss',array('total_score','total_rank','rank'));
	}
	$query=$query->condition('sg.province',$prov->pid)
		->fields('s',array('name','idcard_number','gender'))
		->fields('sc',array('personnel_record_at'))
		->fields('sg',array('sid'))
		->fields('p',array('did','pname','gb_pid','gb_pname'))
		->orderBy('s.idcard_number');
	$result=$query->execute();
	
	// If there is no any record, output 404 error.
	if($result->rowCount()==0) {
		return MENU_NOT_FOUND;
	}
		
	foreach($result as $r) {
		$t=dbase_add_record ($fhandle, array(
			($r->sid)?$r->sid:'',
			mb_convert_encoding($r->name, 'GBK', 'UTF-8'),
			$r->gender,
			$r->idcard_number,
			mb_substr(mb_convert_encoding($r->personnel_record_at, 'GBK', 'UTF-8'),0,20,'GBK'),
			'10045',
			mb_convert_encoding('中央音乐学院', 'GBK', 'UTF-8'),
			'1',
			$r->gb_pid,
			mb_convert_encoding($r->gb_pname, 'GBK', 'UTF-8'),
			'',
			sprintf("%.3f",0),
			mb_convert_encoding($r->pname, 'GBK', 'UTF-8'),
			in_array($r->did,array('D5','D6','D7','D8'))?sprintf("%.3f",$r->total_rank):sprintf("%.3f",$r->total_score),
			isset($r->rank)?$r->rank:0,
			mb_convert_encoding('中央音乐学院', 'GBK', 'UTF-8'),
			isset($r->total_rank)?mb_convert_encoding('校考成绩为平均排序，非直接成绩。', 'GBK', 'UTF-8'):'',
		));
		if(!$t) return NULL;
	}
	dbase_close($fhandle);

	drupal_add_http_header('Content-type', 'application/x-dbase; charset=utf-8', TRUE);
	drupal_add_http_header('Content-Transfer-Encoding', 'binary', TRUE);

	$ua = $_SERVER["HTTP_USER_AGENT"];

	$filename = '10045-'.$provname.".dbf";
	$encoded_filename = urlencode($filename);

	if (preg_match("/MSIE/", $ua) || preg_match("/Chrome/", $ua)) {
		drupal_add_http_header('Content-Disposition', 'attachment; filename="' . $encoded_filename . '"');
	} else if (preg_match("/Firefox/", $ua)) {
		drupal_add_http_header('Content-Disposition', 'attachment; filename*="utf8\'\'' . $filename . '"');
	} else {
		drupal_add_http_header('Content-Disposition', 'attachment; filename="' . $filename . '"');
	}

	drupal_add_http_header('Content-Length', filesize($fname));
	readfile($fname);
	unlink($fname);
	exit;
}

function signup_3rd_round_by_province_report($prov) {
	$provname=$prov->name;
	
	$query=db_select('students','s')->condition('s.pass_round3_major','0','<>');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->leftJoin('students_contact','sc','s.uid=sc.uid');
	$query->leftJoin('students_gk','sg','s.uid=sg.uid');
	$query->leftJoin('vl_city_district','c','sg.city_district=c.cid');
	if(db_table_exists('students_total_score')) {
		$query->innerJoin('students_total_score','ss','s.uid=ss.uid and ss.pid=s.profession_major');
		$query=$query->fields('ss',array('total_score','total_rank','rank'));
	}
	$query=$query->condition('sg.province',$prov->pid)
		->fields('s',array('name','idcard_number','gender'))
		->fields('sc',array('personnel_record_at'))
		->fields('sg',array('sid'))
		->fields('c',array('name_simp'))
		->fields('p',array('did','pname','gb_pid','gb_pname','years'))
		->orderBy('s.idcard_number');
	$result=$query->execute();
	
	// If there is no any record, output 404 error.
	if($result->rowCount()==0) {
		return MENU_NOT_FOUND;
	}
	
	require_once(drupal_get_path('module','signup').'/../tcpdf/config/lang/eng.php');
	require_once(drupal_get_path('module','signup').'/../tcpdf/tcpdf.php');
	
	ini_set('max_execution_time','300');

	// Extend the TCPDF class to create custom Header and Footer
	class MYPDF extends TCPDF {
		//Page header
		public function Header() {
			$this->setHeaderMargin(30);
			$this->SetX(10);
			$this->SetY(8);
			// Set font
			$this->SetFont('droidsansfallbackfull', 'B', 24, '', true);
			// Title
			$this->Cell(0, 10, $this->header_title, 0, false, 'C', 0, '', 0, false, 'M', 'M');
			$this->SetFont('droidsansfallbackfull', 'B', 10, '', true);
			$this->SetX(1);
			$this->SetY(18);
			$this->Cell(10, 2, '序号',0, false, 'C');
			$this->Cell(40, 2, '身份证号码',0, false, 'C');
			$this->Cell(30, 2, '考生号',0, false, 'C');
			$this->Cell(20, 2, '姓名',0, false, 'C');
			$this->Cell(5, 2, '性别',0, false, 'C');
			$this->Cell(60, 2, '所在学校',0, false, 'C');
			$this->Cell(13, 2, '专业代码',0, false, 'C');
			$this->Cell(33, 2, '专业名称',0, false, 'C');
			$this->Cell(22, 2, '专业方向',0, false, 'C');
			$this->Cell(12, 2, '术科成绩',0, false, 'C');
			$this->Cell(10, 2, '排名',0, false, 'C');
			$this->Cell(20, 2, '户口所在地',0, false, 'C');
			$this->Line(5,24,292,24,array('width'=>0.5));
		}

		// Page footer
		public function Footer() {
			// Position at 15 mm from bottom
			$this->SetY(-13);
			$this->SetX(5);
			$this->Line(5,198,292,198,array('width'=>0.5));
			// Set font
			// Page number
			$this->SetFont('droidsansfallbackfull', 'B', 11, '', true);
			$this->Cell(30, 12, date('Y年n月j日'));
			$this->Cell(220,12, '院校名称:10045中央音乐学院    注:我院面向全国招生，文理兼收，不做分省计划。校考成绩加括号者为平均排序，非直接成绩。', 0, false, 'C');
			$this->Cell(52, 12, '第'.$this->getAliasNumPage().'页，共'.$this->getAliasNbPages().'页', 0, false, 'R', 0, '', 0, false, 'T', 'M');
		}
	}
	// create new PDF document
	$pdf = new MYPDF('L', PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

	// set document information
	$pdf->SetAuthor(variable_get('site_name', ''));

	// Set font
	// dejavusans is a UTF-8 Unicode font, if you only need to
	// print standard ASCII chars, you can use core fonts like
	// helvetica or times to reduce file size.
	$pdf->SetFont('droidsansfallbackfull', 'B', 14, '', true);
	// set default font subsetting mode
	$pdf->setFontSubsetting(false);
	$pdf->setHeaderMargin(30);
	$pdf->SetMargins(5, 27, 5);
	$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
	$pdf->SetFooterMargin(15);
	$pdf->setHeaderData('',0,variable_get('zhaoban_current_year',date('Y')).'年中央音乐学院本科招生考试合格考生名册 '.$provname,'');
	$pdf->setTitle(variable_get('zhaoban_current_year',date('Y')).'年中央音乐学院本科招生考试合格考生名册 '.$provname,'');
	$pdf->SetAutoPageBreak(true, 12);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	// ---------------------------------------------------------

	// Add a page
	// This method has several options, check the source code documentation for more information.
	$pdf->AddPage();
	$pdf->SetFillColor(216,216,216);
	$pdf->SetDrawColor(255,255,255);
	$pdf->SetLineWidth(0.5);
	
	$pdf->SetFontSize(10);
	
	$pdf->SetFillColor(0,0,0);
	$pdf->SetTextColor(255,255,255);
	//$pdf->Cell(10,2,'1',0, false, 'C',true);
	$i=1;
	foreach($result as $r) {
		$pdf->SetFillColor(0,0,0);
		$pdf->SetTextColor(255,255,255);
		$pdf->Cell(10,2,$i++, 0, false, 'C',true);
		
		$pdf->SetTextColor(0,0,0);
		$pdf->Cell(40,2,$r->idcard_number, 0, false, 'C');
		$pdf->Cell(30,2,$r->sid, 0, false, 'C');
		$pdf->MultiCell(20,2,$r->name, 0, 'L', false, false);
		$pdf->Cell(5,2,$r->gender==1?'男':'女', 0, false, 'C');
		$pdf->Cell(60,2,mb_substr($r->personnel_record_at,0,16,'UTF-8'), 0, false, 'L');
		$pdf->Cell(13,2,$r->gb_pid, 0, false, 'L');
		$pdf->Cell(33,2,$r->gb_pname, 0, false, 'L');
		$pdf->Cell(22,2,$r->pname, 0, false, 'L');
		$pdf->Cell(12,2,in_array($r->did,array('D5','D6','D7','D8'))?sprintf('[%s]',round($r->total_rank,2)):sprintf('%.2f',$r->total_score));
		$pdf->Cell(10,2,$r->rank, 0, false, 'C');
		$pdf->Cell(20,2,mb_substr($r->name_simp,0,9,'UTF-8'));
		$pdf->LN();
		$pdf->setY($pdf->getY()+3);
	}
	$pdf->SetFontSize(20);
	$pdf->Cell(0,15,'·   以下无正文   ·   以下无正文   ·   以下无正文   ·   以下无正文   ·   以下无正文   ·   以下无正文   ·',0, false, 'C');
	$pdf->SetDisplayMode('fullwidth');
	$pdf->Output('3rd_round_report.pdf', 'I');
}

function signup_3rd_round_province_delivery($form, $form_state, $prov) {
	if(!isset($prov)) return FALSE;
	$form=array();
	$form['deliver']=array(
		'#type' => 'fieldset',
		'#title' => t('Paper deliver track'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	if($_SERVER['REQUEST_METHOD']=='POST' && isset($form_state['clicked_button']) && $form_state['clicked_button']['#name'] == 'refresh') {
		$r=kuaidi100_get_status('signup','3rdround,'.$prov); 
		if($r) {
			kuaidi100_update_status($r->com, $r->orderno);
			drupal_set_message(t('Status updated.'));
		}
	}
	$r=kuaidi100_get_status('signup','3rdround,'.$prov);
	if($r!==FALSE) {
		$form['deliver']['#collapsed'] = FALSE;
		$form['deliver']['status']=array(
			'#type' => 'item',
			'#title' => t('Current status'),
		);
		$form['deliver']['status']['#markup'] = sprintf('<span title="%s">%s</span>', format_date($r->timestamp).' '.$r->statustext, kuaidi100_resolve_state_code($r->status));
		if($r->status==3)
			$form['deliver']['status']['#markup'] .= sprintf('(%s %s)', t($r->com), $r->orderno);
		else
			$form['deliver']['refresh']=array(
				'#type' => 'button',
				'#name' => 'refresh',
				'#value' => t('Refresh'),
			);
	}
	if($r===FALSE || $r->status !=3) {
		if($r)
			$form['deliver']['split']=array(
				'#type' => 'markup',
				'#markup' => ' | ',
			);
		$form['deliver']['prov']=array(
			'#type' => 'hidden',
			'#value' => $prov,
		);
		$form['deliver']['com']=array(
			'#type' => 'select',
			'#title' => t('Deliver by'),
			'#options' => array(
				'shunfeng' => t('SF-Express'),
				'ems' => t('EMS'),
			),
		);
		if($r) $form['deliver']['com']['#default_value'] = $r->com;
		$form['deliver']['orderno']=array(
			'#type' => 'textfield',
			'#default_value' => isset($r->orderno)?$r->orderno:'',
			'#maxlength' => 15,
			'#size' => 15,
			'#title' => t('Deliver order no'),
			'#title_display' => 'invisible',
			'#required' => TRUE,
		);
		$form['deliver']['save']=array(
			'#type' => 'submit',
			'#name' => 'save',
			'#value' => t('Save'),
		);
	}
	return $form;
}

function signup_3rd_round_province_delivery_submit($form, $form_state) {
	kuaidi100_save('signup', sprintf('%s,%s', '3rdround', $form_state['values']['prov']), $form_state['values']['com'], $form_state['values']['orderno']);
	drupal_set_message(t('Configuration saved.'));
}

function signup_ground_by_profession() {
	$output = '<div id="baoming_user_stat" class="baoming_view_section node">';
	
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";
		
	// Compute total number of registered students.
	$total_students=db_select('students','s')
		->fields('s')
		->condition('s.idcard_number','','<>')
		->condition('s.profession_major','0','<>')
		->condition('s.pass_roundg_major','0','<>')
		->where($valins)
		->countQuery()->execute()->fetchField();
	
	$output .= '<p>'.t('There are currently !num students marked as being enrolled into the gaokao round examination.', array('!num'=>$total_students)).'</p>';
	$header = array(
		array('data'=>t('Profession'), 'field'=>'pid', 'sort'=>'asc'),
		array('data'=>t('Number of students (%)'), 'field'=>'num'),
	);

	$query = db_select('students','s')->condition('s.idcard_number','','<>')->condition('s.pass_roundg_major','0','<>');
	$query->innerJoin('vl_professions','p','s.profession_major = p.pid');
	$query->addExpression('COUNT(*)', 'num');
	$query = $query->where($valins)
		->fields('p',array('pid','uid','pname','pnamememo'))
		->groupBy('s.profession_major')
		->extend('TableSort')->orderByHeader($header);
	
	$rdbo = $query->execute();
	$rows=array();
	
	foreach($rdbo as $r) {
		if($r->pid) {
			// Determine whether you are plain department
			if(user_access('view own draft') && !user_access('view draft'))
					if($GLOBALS['user']->name !== $r->uid) continue;
			$rows[] = array(
			'<nobr>'.l($r->pname, 'signup/ground/profession/'.$r->pid, array(
				'title' => t('Click to view the details of @prof profession', array('@prof'=>$r->pname)),
				)
			).'</nobr>',
			sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		}
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	
	$output .= '</div>';
	
	return $output;
}

function signup_ground_by_profession_detail($prof) {
	drupal_set_title(t('By Profession').' - '.$prof->pname);
	
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->condition('s.pass_roundg_major','0','<>')->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";

	if($prof)
		$sql_department_insert = "p.pid='".$prof->pid."'";
	else
		$sql_department_insert = '1';
	$output = '<div id="baoming_user_list" class="baoming_view_section node">';
	
	$r=db_select('vl_city_district','cd')->fields('cd',array('cid','name'))->condition('cd.cid','110000')->execute()->fetchObject();
	$options=array('000000'=>t('All students'));
	$options+=array((string)($r->cid)=>$r->name);

	$rows = array();
	$header = array(
		array('data' =>t('Student ID'), 'field'=>'s.uid'),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Province'), 'field'=>'gk.province'),
	);
	
	$query=db_select('students','s')->condition('s.idcard_number','','<>')->fields('s')->condition('p.pid',$prof->pid);
	$query->leftJoin('students_gk','gk','s.uid=gk.uid');
	$query->leftJoin('students_contact','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->innerJoin('students_total_score','ts','ts.uid=s.uid');
	$query->addExpression('u.uid', 'sys_uid');
	$query = $query->fields('c', array('personnel_record_at'))
		->fields('gk')
		->fields('ts',array('outrank'))
		->where($sql_department_insert)->condition('s.pass_roundg_major','0','<>')
		->extend('TableSort')->orderByHeader($header)->orderBy('ts.outrank')
		->extend('PagerDefault')->limit(20);
	$rdbo=$query->execute();
	if($rdbo->rowCount()==0) {
			return MENU_NOT_FOUND;
	}
	else
	foreach($rdbo as $r) {
		switch($r->ucategory) {
			case uc_OWN_STUDENT:
				$province = t('Our own student');
				$per = t('Our own student');
				$plink = '000000';
				break;
			case uc_MAINLAND_STUDENT:
			case uc_HKTW_STUDENT:
				$province = $r->province ? db_select('vl_province','p')->fields('p',array('simplified_name'))->condition('p.pid',$r->province)->execute()->fetchField() : t('N/A');
				$per = $r->personnel_record_at;
				if(!$per) $per=t('N/A');
				$plink = $r->province;
				break;
			case uc_OVERSEA_STUDENT:
				$province = db_select('vl_city_district','cd')->fields('cd',array('name'))->condition('cd.cid',$r->city_district)->execute()->fetchField();
				$per = t('N/A');
				$plink = $r->province;
				break;
		}
		
		
		$rows[] = array(
			'<nobr>'.l($r->uid, 'user/'.$r->sys_uid).'</nobr>',
			'<nobr>'.$r->name.'</nobr>',
			$r->gender == 1 ? t('Male'): t('Female'),
			(user_access('signup_3rd_overview'))?l($province, 'signup/ground/province/'.$plink):($province),
		);
	}
	
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output .= theme('pager');
	$output .= "</div>";
	
	return $output;
}

function signup_ground_by_province() {

	$prof=arg(3);
	if(db_select('students','s')->fields('s')->condition('s.validated',1)->countQuery()->execute()->fetchField() >0)
		$valins="s.validated=1 ";
	else 
		$valins="1";
	
	$output='';

	// Compute total number of registered students.
	$total_students=db_select('students','s')
		->fields('s')
		->condition('s.idcard_number','','<>')
		->condition('s.profession_major','0','<>')
		->condition('s.pass_roundg_major','0','<>')
		->where($valins)
		->countQuery()->execute()->fetchField();
	
	$output .= '<p>'.t('There are currently !num students marked as being enrolled into the gaokao round examination.', array('!num'=>$total_students)).'</p>';
	$header = array(
		array('data'=>t('Province'), 'field'=>'pname', 'sort'=>'asc'),
		array('data'=>t('Number of students'), 'field'=>'num'),
	);
	$query = db_select('students','s')->condition('s.idcard_number','','<>')->condition('s.profession_major','0', '<>')->condition('s.pass_roundg_major','0','<>');
	$query->leftJoin('students_gk','sg','s.uid=sg.uid');
	$query->leftJoin('vl_province','p','sg.province=p.pid');
	$query = $query->fields('s',array('ucategory','uid'))
		->fields('p',array('pid','name','ucategory'));
	$query->addExpression('COUNT(s.uid)', 'num');
	$query->addExpression('CONVERT(CONCAT(CONVERT(p.ucategory, char), p.name) USING gbk )', 'pname');
	$query = $query->where($valins)
		->groupBy('p.pid')
		->groupBy('s.ucategory')
		->extend('TableSort')->orderByHeader($header);
	
	$rdbo = $query->execute();
	$rows=array();
	
	foreach($rdbo as $r) {
		if($r->pid) {
			// Determine whether you are plain department
			if(user_access('view own draft') && !user_access('view draft'))
				if($GLOBALS['user']->name !== $r->uid) continue;
			$rows[] = array(
				'<nobr>'.
				l('<img src="/'.drupal_get_path('module','signup').'/printer.png">', 'signup/ground/province/'.$r->pid.'/report', array('html'=>TRUE,'attributes'=>array('title'=>t('Download printable report for this province')))).' '.
				l($r->name, 'signup/ground/province/'.$r->pid, array(
					'title' => t('Click to view the details of @prov province', array('@prov'=>$r->name)),
					)
					).'</nobr>',
				sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		} else if($r->ucategory==='0') {
			$rows[] = array(
				l(t('Our own student'), 'signup/ground/province/000000', array(
					'title' => t('Click to view the details of students from @province', array('@province'=>t('Our own student'))),
				)),
				sprintf('<img src="/%s/red-dot.png" style="width:%dpx; height:10px;"/> %d (%.1f%%)', drupal_get_path('module','signup'), $r->num, $r->num, $r->num/$total_students*100),
			);
		}
	}
	
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));

	return $output;
	
}

function signup_ground_by_province_detail($prov) {
	drupal_set_title(t('By Province').' - '.$prov->name);
	
	$output = '<div id="baoming_user_list" class="baoming_view_section node">';
	
	$rows = array();
	$header = array(
		array('data' =>t('Student ID number'), 'field'=>'gk.sid', 'sort'=>'asc'),
		array('data' =>t('IDCard number')),
		array('data' =>t('Real Name')),
		array('data' =>t('Gender'), 'field'=>'s.gender'),
		array('data' =>t('Guobiao Profession'), 'field'=>'gb_scode'),
		array('data' =>t('Profession'), 'field'=>'s.profession_major'),
	);

	$query=db_select('students','s')->condition('s.idcard_number','','<>')->fields('s');
	$query->leftJoin('students_gk','gk','s.uid=gk.uid');
	$query->leftJoin('students_contact','c','s.uid=c.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('users','u','s.uid=u.name');
	$query->addExpression('u.uid', 'sys_uid');
	$query = $query->fields('c', array('personnel_record_at'))
					->fields('gk')
					->fields('p',array('gb_pid','gb_pname','gb_scode','pname'))
					->condition('gk.province',$prov->pid)
					->condition('s.pass_roundg_major','0','<>')
			->extend('TableSort')->orderByHeader($header)->orderBy('gk.sid')
			->extend('PagerDefault')->limit(40);
	$rdbo=$query->execute();
	if($rdbo->rowCount()==0) {
		return MENU_NOT_FOUND;
	}
	else
	foreach($rdbo as $r) {
		switch($r->ucategory) {
			case uc_OWN_STUDENT:
				$province = t('Our own student');
				$per = t('Our own student');
				$plink = '000000';
				break;
			case uc_MAINLAND_STUDENT:
			case uc_HKTW_STUDENT:
				$province = $r->province ? db_select('vl_province','p')->fields('p',array('simplified_name'))->condition('p.pid',$r->province)->execute()->fetchField() : t('N/A');
				$per = $r->personnel_record_at;
				if(!$per) $per=t('N/A');
				$plink = $r->province;
				break;
			case uc_OVERSEA_STUDENT:
				$province = db_select('vl_city_district','cd')->fields('cd',array('name'))->condition('cd.cid',$r->city_district)->execute()->fetchField();
				$per = t('N/A');
				$plink = $r->province;
				break;
		}
		$rows[] = array(
			'<nobr>'.$r->sid.'</nobr>',
			'<nobr>'.$r->idcard_number.'</nobr>',
			'<nobr>'.l($r->name, 'user/'.$r->sys_uid).'</nobr>',
			$r->gender == 1 ? t('Male'): t('Female'),
			$r->gb_pname.'('.$r->gb_scode.')',
			l($r->pname, 'signup/ground/profession/'.$r->profession_major, array(
				'title' => t(
					'Click to view the details of @prof', array(
					'@prof' => $r->pname)
				))
			),
		);
	}
	if($r->ucategory) {
		$output .= l('<img src="/'.drupal_get_path('module','signup').'/printer.png" style="vertical-align: bottom">'.t('Print Report'), 'signup/ground/province/'.$prov->pid.'/report', array('html'=>TRUE,'attributes'=>array('title'=>t('Download printable report for this province'))));
		$output .= '<p/>';
	}
	$output .= theme('table', array('header'=>$header, 'rows'=>$rows));
	$output .= theme('pager');
	$output .= "</div>";
	
	return $output;
}

function signup_ground_by_province_report($prov) {
	$provname=$prov->name;
	
	$query=db_select('students','s')->condition('s.pass_roundg_major','0','<>');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->leftJoin('students_contact','sc','s.uid=sc.uid');
	$query->leftJoin('students_gk','sg','s.uid=sg.uid');
	$query->leftJoin('vl_city_district','c','sg.city_district=c.cid');
	if(db_table_exists('students_total_score')) {
		$query->innerJoin('students_total_score','ss','s.uid=ss.uid');
		$query=$query->fields('ss',array('total_score','rank'));
	}
	$query=$query->condition('sg.province',$prov->pid)
		->fields('s',array('name','idcard_number','gender'))
		->fields('sc',array('personnel_record_at'))
		->fields('sg',array('sid','score_total','is_math_subjects'))
		->fields('c',array('name_simp'))
		->fields('p',array('pname','gb_pid','gb_pname','years'))
		->orderBy('sg.sid')->orderBy('s.idcard_number');
	$result=$query->execute();
	
	// If there is no any record, output 404 error.
	if($result->rowCount()==0) {
		return MENU_NOT_FOUND;
	}
	
	require_once(drupal_get_path('module','signup').'/../tcpdf/config/lang/eng.php');
	require_once(drupal_get_path('module','signup').'/../tcpdf/tcpdf.php');
	
	ini_set('max_execution_time','300');

	// Extend the TCPDF class to create custom Header and Footer
	class MYPDF extends TCPDF {
		//Page header
		public function Header() {
			$this->setHeaderMargin(30);
			$this->SetX(10);
			$this->SetY(8);
			// Set font
			$this->SetFont('droidsansfallbackfull', 'B', 24, '', true);
			// Title
			$this->Cell(0, 10, $this->header_title, 0, false, 'C', 0, '', 0, false, 'M', 'M');
			$this->SetFont('droidsansfallbackfull', 'B', 10, '', true);
			$this->SetX(1);
			$this->SetY(18);
			$this->Cell(10, 2, '序号',0, false, 'C');
			$this->Cell(30, 2, '考生号',0, false, 'C');
			$this->Cell(40, 2, '身份证号码',0, false, 'C');
			$this->Cell(20, 2, '姓名',0, false, 'C');
			$this->Cell(5, 2, '性别',0, false, 'C');
			$this->Cell(60, 2, '所在学校',0, false, 'C');
			$this->Cell(13, 2, '专业代码',0, false, 'C');
			$this->Cell(33, 2, '专业名称',0, false, 'C');
			$this->Cell(22, 2, '专业方向',0, false, 'C');
			$this->Cell(25, 2, '文考总分',0, false, 'C');
			$this->Cell(12, 2, '术科成绩',0, false, 'C');
			$this->Line(5,24,292,24,array('width'=>0.5));
		}

		// Page footer
		public function Footer() {
			// Position at 15 mm from bottom
			$this->SetY(-13);
			$this->SetX(5);
			$this->Line(5,198,292,198,array('width'=>0.5));
			// Set font
			// Page number
			$this->SetFont('droidsansfallbackfull', 'B', 11, '', true);
			$this->Cell(30, 12, date('Y年n月j日'));
			$this->Cell(220,12, '院校名称:10045中央音乐学院    注:高考成绩未标明者为文科。校考成绩带括号者为其平均序，非成绩。', 0, false, 'C');
			$this->Cell(52, 12, '第'.$this->getAliasNumPage().'页，共'.$this->getAliasNbPages().'页', 0, false, 'R', 0, '', 0, false, 'T', 'M');
		}
	}
	// create new PDF document
	$pdf = new MYPDF('L', PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

	// set document information
	$pdf->SetAuthor(variable_get('site_name', ''));

	// Set font
	// dejavusans is a UTF-8 Unicode font, if you only need to
	// print standard ASCII chars, you can use core fonts like
	// helvetica or times to reduce file size.
	$pdf->SetFont('droidsansfallbackfull', 'B', 14, '', true);
	// set default font subsetting mode
	$pdf->setFontSubsetting(false);
	$pdf->setHeaderMargin(30);
	$pdf->SetMargins(5, 27, 5);
	$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
	$pdf->SetFooterMargin(15);
	$pdf->setHeaderData('',0,variable_get('zhaoban_current_year',date('Y')).'年中央音乐学院本科招生考试拟录取考生名册 '.$provname,'');
	$pdf->setTitle(variable_get('zhaoban_current_year',date('Y')).'年中央音乐学院本科招生考试拟录取考生名册 '.$provname);
	
	//$pdf->SetMargins(6, 6, 6);
	$pdf->SetAutoPageBreak(true, 12);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	// ---------------------------------------------------------

	// Add a page
	// This method has several options, check the source code documentation for more information.
	$pdf->AddPage();
	$pdf->SetFillColor(216,216,216);
	$pdf->SetDrawColor(255,255,255);
	$pdf->SetLineWidth(0.5);
	
	$pdf->SetFontSize(10);
	
	$pdf->SetFillColor(0,0,0);
	$pdf->SetTextColor(255,255,255);
	//$pdf->Cell(10,2,'1',0, false, 'C',true);
	$i=1;
	foreach($result as $r) {
		settype($r->score_total,'float');
		$pdf->SetFillColor(0,0,0);
		$pdf->SetTextColor(255,255,255);
		$pdf->Cell(10,2,$i++, 0, false, 'C',true);
		
		$pdf->SetTextColor(0,0,0);
		$pdf->Cell(30,2,$r->sid, 0, false, 'C');
		$pdf->Cell(40,2,$r->idcard_number, 0, false, 'C');
		$pdf->Cell(20,2,$r->name, 0, false, 'L');
		$pdf->Cell(5,2,$r->gender==1?'男':'女', 0, false, 'C');
		$pdf->Cell(60,2,$r->personnel_record_at, 0, false, 'L');
		$pdf->Cell(13,2,$r->gb_pid, 0, false, 'L');
		$pdf->Cell(33,2,$r->gb_pname, 0, false, 'L');
		$pdf->Cell(22,2,$r->pname, 0, false, 'L');
		$pdf->Cell(25,2,$r->score_total.($r->is_math_subjects?'/理':''), 0, false, 'C');
		$pdf->Cell(12,2,$r->total_score<=0?('['.abs(round($r->total_score,2)).']'):number_format($r->total_score,2));
		$pdf->LN();
		$pdf->setY($pdf->getY()+3);
	}
	$pdf->SetFontSize(20);
	$pdf->Cell(0,15,'·   以下无正文   ·   以下无正文   ·   以下无正文   ·   以下无正文   ·   以下无正文   ·   以下无正文   ·',0, false, 'C');
	$pdf->SetDisplayMode('fullwidth');
	$pdf->Output('ground_report.pdf', 'I');
}

function signup_preset_passthrough() {
	$rows = array();
	$form = array();
	$header = array(
		'idnumber' => array('data' =>t('IDCard number'), 'field'=>'s.idcard_number'),
		'profession' => array('data' =>t('Profession'), 'field'=>'s.pid', 'sort'=>'asc'),
		'status' => array('data' =>t('Status')),
	);
	$options=array();
	$query=db_select('students_passthrough','s')->fields('s')->extend('TableSort')->orderByHeader($header);
	$query->innerJoin('vl_professions','p','s.pid=p.pid');
	$query=$query->fields('p');
	$result=$query->execute();
	foreach($result as $r) {
		$n='';
		$n=db_select('students','s')->fields('s',array('name'))->condition('s.idcard_number',$r->idcard_number)->execute()->fetchField();
		$query=db_select('students','s')->condition('s.idcard_number',$r->idcard_number);
		$query->innerJoin('users','u','s.uid=u.name');
		$query->fields('u',array('uid'));
		$u=$query->execute()->fetchField();
		$v=db_select('students','s')->fields('s',array('validated'))->condition('s.idcard_number',$r->idcard_number)->execute()->fetchField();
		$options[$r->idcard_number]=array(
			'idnumber' => ($n)?l($r->idcard_number.' ('.$n.')', 'user/'.$u):$r->idcard_number,
			'profession' => $r->pname,
			'status' => ($n)?(($v)?t('Confirmed'):t('Signed Up, but not confirmed')):t('Not yet signed up'),
		);
	}
	$form['deletenotify']=array(
		'#type' => 'item',
		'#title' => t('Select to delete students'),
		'#description' => t('There are !num students marked as passthrough now.',array('!num'=>count($options))),
	);
	$form['students']=array(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $options,
		'#attributes' => array('class'=>array('assign_students')),
		'#empty' => t('No suitable students.'),
	);
	
	$form['add']=array(
		'#type'=>'fieldset',
		'#title'=>t('Add student'),
		'#description'=>t(''),
		'#prefix'=>'<p/>',
	);
	$form['add']['idcardnumber']=array(
		'#type' => 'textfield',
		'#title' => t('IDCard number'),
		'#required' => false,
		'#maxlength'=>18,
		'#size'=>18,
		'#prefix' => '<div class="container-inline">',
	);
	$profs=array();
	$query=db_select('vl_professions','p')->fields('p')->condition('p.enabled',1)->orderBy('pid');
	$query->innerJoin('vl_department','d','p.did=d.did');
	$query=$query->fields('d');
	$result=$query->execute();
	foreach($result as $r) {
		$profs[$r->pid]=$r->dname.' / '.$r->pname;
	}
	$form['add']['profession']=array(
		'#type' => 'select',
		'#title' => t('Profession'),
		'#required' => false,
		'#default_value'=>NULL,
		'#options'=>$profs,
		'#suffix' => '</div>',
	);
	$form['save']=array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#attributes' => array('title'=>t('Delete selected students and save newly added student')),
		'#prefix'=>'<p/>',
	);
	return $form;
}

function signup_preset_passthrough_validate($form, &$form_state) {
	// Check if specific students could be deleted, as we only allow removing students which is not signed up.
	$form_values = array_filter($form_state['values']['students']);
	if(count($form_values)>0) {
		$students=array_keys($form_values);
		if(db_select('students','s')->fields('s')->condition('s.idcard_number',$students,'IN')->countQuery()->execute()->fetchField()>0) {
			form_set_error('students', t('You have selected a signed up student, which cannot be deleted.'));
			return;
		}
	}
	
	$new_idnumber=strtoupper(trim($form_state['values']['idcardnumber']));
	
	if(!is_idcardn_validate($new_idnumber)) {
		form_set_error('idcardnumber',t('The ID Card number you\'ve entered is not valid.'));
		return;
	}
	$new_prof=$form_state['values']['profession'];
	// Check if the corresponding idnumber has been used.
	if(db_select('students_passthrough','s')->fields('s')->condition('s.idcard_number',$new_idnumber)->countQuery()->execute()->fetchField()>0) {
		form_set_error('idcardnumber', t('You have inputed an IDCard number which is already exists.'));
		return;
	}
	// Check if the profession we selected be same as what the student has selected.
	if(db_select('students','s')->fields('s')->condition('s.idcard_number',$new_idnumber)->condition('s.profession_major',$new_prof,'<>')->countQuery()->execute()->fetchField()>0) {
		form_set_error('profession', t('The profession you have selected is different from the profession student selected himself.'));
	}
}

function signup_preset_passthrough_submit($form, &$form_state) {
	$students=array_keys(array_filter($form_state['values']['students']));
	if(count($students)>0) {
		db_delete('students_passthrough')
			->condition('idcard_number', $students, 'IN')
			->execute();
		drupal_set_message(t('!num passthrough students have been deleted.', array('!num'=>count($students))));
	}
	$new_idnumber=strtoupper(trim($form_state['values']['idcardnumber']));
	$new_prof=$form_state['values']['profession'];
	if($new_idnumber) {
		db_insert('students_passthrough')
			->fields(array(
				'idcard_number' => $new_idnumber,
				'pid' => $new_prof,
			))->execute();
		$n=db_select('students','s')->fields('s',array('name'))->condition('s.idcard_number',$new_idnumber)->execute()->fetchField();
		drupal_set_message(t('!idnum has been marked as passthrough student.', array('!idnum'=>$new_idnumber.($n?' ('.$n.')':''))));
	}
}

function signup_picture($account) {
	$query=db_select('students','s')->fields('s',array('picture'))->condition('s.uid',$account->name);
	$img_tmp=$query->execute()->fetchField();
	if(!$img_tmp) return NULL;
	$img=imagecreatefromstring(base64_decode($img_tmp));
	$newheight=200;
	$newwidth=imagesx($img)*200/imagesy($img);

	$newimg=imagecreatetruecolor($newwidth, $newheight);
	imagecopyresampled($newimg, $img, 0, 0, 0, 0, $newwidth, $newheight, imagesx($img), imagesy($img));

	drupal_add_http_header('Content-type', 'image/jpg; charset=binary', TRUE);
	drupal_add_http_header('Content-Transfer-Encoding', 'binary', TRUE);

	// Do not expire image file, because it causes overload of server :(
	// seconds, minutes, hours, days
	$expires = 60*60*24*300;
	drupal_add_http_header("Pragma", "public", TRUE);
	drupal_add_http_header("Cache-Control", "maxage=".$expires, TRUE);
	drupal_add_http_header('Expires', gmdate('D, d M Y H:i:s', time()+$expires) . ' GMT', TRUE);
	imagejpeg($newimg, NULL, 100);
	imagedestroy($img);
	imagedestroy($newimg);
}

function signup_report($account) {

	$result = db_select('students','s')->fields('s')->condition('s.uid',$account->name)->execute()->fetchObject();
	$result_gk = db_select('students_gk','s')->fields('s')->condition('s.uid',$account->name)->execute()->fetchObject();
	$result_contact = db_select('students_contact','s')->fields('s')->condition('s.uid',$account->name)->execute()->fetchObject();
	require_once(drupal_get_path('module','signup').'/../tcpdf/config/lang/eng.php');
	require_once(drupal_get_path('module','signup').'/../tcpdf/tcpdf.php');
	
	ini_set('max_execution_time','500');

	// create new PDF document
	$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

	// set document information
	$pdf->SetCreator(PDF_CREATOR);
	$pdf->SetTitle('中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生专业考试报名表');
	$pdf->SetAuthor(variable_get('site_name', ''));
	$pdf->SetSubject($result->uid.' '.$result->name);

	// Set font
	// dejavusans is a UTF-8 Unicode font, if you only need to
	// print standard ASCII chars, you can use core fonts like
	// helvetica or times to reduce file size.
	$pdf->SetFont('droidsansfallbackfull', 'B', 14, '', true);
	// set default font subsetting mode
	$pdf->setFontSubsetting(false);
	
	$pdf->setPrintHeader(false);
	$pdf->setPrintFooter(false);

	$pdf->SetMargins(6, 6, 6);
	$pdf->SetAutoPageBreak(false);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	// ---------------------------------------------------------

	// Add a page
	// This method has several options, check the source code documentation for more information.
	$pdf->AddPage();
	$pdf->SetFillColor(216,216,216);
	$pdf->SetDrawColor(255,255,255);
	$pdf->SetLineWidth(0.5);


	// Header
	$pdf->SetFontSize(27);
	$pdf->Text(6,6,'中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生专业考试报名表');
	$pdf->LN();
	
	$pdf->SetFontSize(18);
	$pdf->Cell(165,7.5,'个人信息',1,1,'C',true);

	$pdf->SetFontSize(10);
	$pdf->Cell(10,6,'姓名',1,0,'C',true);
	$pdf->Cell(80,6,$result->foreign_name==''?$result->name:$result->foreign_name.' / '.$result->name,0,0,'L',false);
	$pdf->Cell(20,6,'证件号码',1,0,'C',true);
	$pdf->Cell(30,6,$result->idcard_number,0,1,'L',false);
	
	
	$pdf->SetX(6);
	$pdf->Cell(10,6,'性别',1,0,'C',true);
	$pdf->Cell(10,6,$result->gender==2?'女':'男',0,0,'L',false);
	$pdf->Cell(20,6,'出生日期',1,0,'C',true);
	$pdf->Cell(20,6,$result->date_of_birth,0,0,'L',false);
	$pdf->Cell(10,6,'民族',1,0,'C',true);
	$pdf->Cell(20,6,db_select('vl_nationality','n')->fields('n',array('name'))->condition('n.nid',$result->nationality)->execute()->fetchField(),0,0,'L',false);
	$pdf->Cell(15,6,'生源地',1,0,'C',true);
	$pdf->Cell(60,6,db_select('vl_city_district','cd')->fields('cd',array('name_simp'))->condition('cd.cid',$result_gk->city_district)->execute()->fetchField(),0,1,'L',false);
	
	$pdf->SetX(6);
	$pdf->Cell(20,6,'档案所在地',1,0,'C',true);
	$pdf->Cell(90,6,isset($result_contact->personnel_record_at)?$result_contact->personnel_record_at:'',0,0,'L',false);
	$pdf->Cell(20,6,'政治面貌',1,0,'C',true);
	$pdf->Cell(30,6,db_select('vl_politics_features','p')->fields('p',array('name'))->condition('p.pid',$result->politics_feature)->execute()->fetchField(),0,1,'L',false);
	
	if($result->picture)
		$pdf->Image('@'.base64_decode($result->picture), 175, 18.5, 0, 25);


	$pdf->SetX(6);
	$pdf->SetFontSize(18);
	
	$pdf->Cell(115,7.5,'报考专业信息',1,0,'C',true);
	$pdf->Cell(79,7.5,'高考考生信息',1,1,'C',true);

	$pdf->SetX(6);
	$pdf->SetFontSize(10);
	$pdf->Cell(20,6,'报考专业',1,0,'C',true);
	$pdf->Cell(95,6,db_select('vl_professions','p')->fields('p',array('pname'))->condition('p.pid',$result->profession_major)->execute()->fetchField(),0,0,'L',false);
	$pdf->Cell(20,6,'高考报名号',1,0,'C',true);
	$pdf->Cell(50,6,$result_gk->sid==''?'暂无':$result_gk->sid,0,0,'L',false);
	$pdf->Cell(8.3,6,$result_gk->is_math_subjects?'理科':'',0,1,'C',$result_gk->is_math_subjects);
	
	$pdf->SetX(6);
	$pdf->SetFontSize(18);
	$pdf->LN();

	$pdf->Cell(194,7.5,'考试科目及曲目',1,1,'C',true);

	$pdf->SetFontSize(10);
	$pdf->Cell(60,7,'考试科目',1,0,'C',true);
	$pdf->Cell(20,7,'考试形式',1,0,'C',true);
	$pdf->Cell(114,7,'考试曲目',1,1,'C',true);

	//$rdbo = db_query("SELECT sg.eid, sg.opus, e.ename, e.elevel, e.etype FROM {students_going} sg INNER JOIN {vl_exam} e ON sg.eid=e.eid WHERE sg.uid='".$account->name."' ORDER BY e.eid");
	$query = db_select('students_going','sg');
	$query->innerJoin('vl_exam','e','sg.eid=e.eid');
	$rdbo=$query->fields('sg',array('eid','opus'))->fields('e',array('ename','elevel','etype'))->condition('sg.uid',$account->name)->orderBy('e.eid')->execute();
	//$rdbo=$query->execute();
	foreach($rdbo as $r) {
		$exams =unserialize($r->opus);
		$pdf->SetX(6);
		$pdf->Cell(60, 7, $r->ename.($r->elevel?$r->elevel:''));
		$pdf->Cell(20, 7, ($r->etype == 1 ? t('Writing') : (module_exists('onlinetests')&&$r->etype ==3 ? t('Online Tests'):t('Interviewing'))),1,0,'C');
		if(is_null($r->opus)) $pdf->LN();
		else
		foreach($exams as $enum => $evalue) {
			$pdf->setX(86);
			if($enum=='eadditional') {
				if($evalue!=='')
					$t='主试乐器: '.t($evalue);
				else
					$t='主试乐器: 钢琴';
			}
			else
				$t=$pdf->unhtmlentities('&#x'.(2459+substr($enum,-1)).';').$evalue;
			$pdf->Cell(114, 7, $t, 0,1,'L',false);
		}
	}
	$pdf->LN();

	$pdf->SetX(6);
	$pdf->SetFontSize(18);
	$pdf->Cell(194,7.5,'联系方式',1,1,'C',true);
	
	$pdf->SetFontSize(10);
	$pdf->Cell(35,7,'考试期间联系电话',1,0,'C',true);
	$pdf->Cell(120,7,isset($result_contact->contact_phone)?$result_contact->contact_phone:'',1,0,'L',false);
	$pdf->Cell(20,7,'乘车区间',1,0,'C',true);
	$pdf->Cell(25,7,isset($result_contact->terminus_of_train)?$result_contact->terminus_of_train:'',1,1,'L',false);
	
	$pdf->Cell(35,7,'文考通知书邮寄地址',1,0,'C',true);
	$pdf->Cell(150,7,isset($result_contact->address_round3)?$result_contact->address_round3:'',1,1,'L',false);
	$pdf->Cell(10,7,'邮编',1,0,'C',true);
	$pdf->Cell(25,7,isset($result_contact->zip_round3)?$result_contact->zip_round3:'',1,0,'L',false);
	$pdf->Cell(15,7,'收件人',1,0,'C',true);
	$pdf->Cell(100,7,isset($result_contact->recipient_round3)?$result_contact->recipient_round3:'',1,1,'L',false);
	
	$pdf->Cell(35,7,'录取通知书邮寄地址',1,0,'C',true);
	$pdf->Cell(150,7,isset($result_contact->address_roundg)?$result_contact->address_roundg:'',1,1,'L',false);
	$pdf->Cell(10,7,'邮编',1,0,'C',true);
	$pdf->Cell(25,7,isset($result_contact->zip_roundg)?$result_contact->zip_roundg:'',1,0,'L',false);
	$pdf->Cell(15,7,'收件人',1,0,'C',true);
	$pdf->Cell(80,7,isset($result_contact->recipient_roundg)?$result_contact->recipient_roundg:'',1,0,'L',false);
	$pdf->Cell(20,7,'收件人电话',1,0,'C',true);
	$pdf->Cell(25,7,isset($result_contact->phone_roundg)?$result_contact->phone_roundg:'',1,1,'L',false);
	
	if(isset($result_contact->address_of_home))
		$address_of_home=unserialize($result_contact->address_of_home);
	else {
		$address_of_home=array(
			'address_school'=>'',
			'zip_school'=>'',
			'recipient_school'=>'',
		);
	}
	
	$pdf->Cell(35,7,'家庭通讯地址',1,0,'C',true);
	$pdf->Cell(95,7,$address_of_home['address_school'],1,0,'L',false);
	$pdf->Cell(10,7,'邮编',1,0,'C',true);
	$pdf->Cell(20,7,$address_of_home['zip_school'],1,0,'L',false);
	$pdf->Cell(15,7,'收件人',1,0,'C',true);
	$pdf->Cell(30,7,$address_of_home['recipient_school'],1,1,'L',false);

	$pdf->SetX(6);
	$pdf->SetFontSize(18);
	$pdf->Cell(194,7.5,'信息确认',1,1,'C',true);
	
	$pdf->SetFontSize(10);
	$pdf->MultiCell(0,0,'    本人确认以上信息均为本人填写，真实有效。如有虚假内容，因此产生的一切后果由本人自行承担。受托代表人可完全代表本人意愿。');
	//$pdf->Cell(194,7,'&nbsp;&nbsp;&nbsp;本人确认以上信息均为本人填写，真实有效。如有虚假内容，因此产生的一切后果由本人自行承担。受托代表人可完全代表本人意愿。',1,'L',false,1,'','',true,0,true);
	
	$pdf->SetX(100);
	$pdf->Cell(38,7.5,'考生(或受托代表人)签名',1,0,'C',false);
	$pdf->SetDrawColor(0,0,0);
	$pdf->Cell(40,7.5,'','B',0,'C',false);
	$pdf->SetDrawColor(255,255,255);
	
	$pdf->setX(6);
	$pdf->setY(-18);
	$pdf->SetFontSize(28);
	
	if($result->ucategory)
		$pro=db_select('vl_province','p')->fields('p',array('simplified_name'))->condition('pid',$result_gk->province)->execute()->fetchField();
	else
		$pro='辅修';
	$pdf->Cell(40,15,$pro,1,0,'L',false);
	$pdf->Cell(63,15,$result->name,1,0,'R',false);
	$pdf->setX(112);
	
	$pdf->write1DBarcode($result->uid,'C128B','','',37,14,0.4,array('stretch'=>TRUE));
	
	$pdf->setX(137);
	$pdf->Cell(65,15,$result->uid,1,1,'R',false);
	
	// ---------------------------------------------------------
	// Close and output PDF document
	// This method has several options, check the source code documentation for more information.
	$pdf->Output($result->uid.'signup_report.pdf', 'I');

}

function signup_ticket_report_perm($user) {
	$isvalidated=db_select('students', 's')->fields('s',array('validated'))->condition('s.uid',$user->name)->execute()->fetchField();
	if(!$isvalidated) return FALSE;
	if(user_access('view draft')) return TRUE;
	if(user_access('print admission ticket', $user) && $user->uid==$GLOBALS['user']->uid) return TRUE;
	return FALSE;
}

function signup_ticket_report($user) {
	$query=db_select('students','s')->condition('s.uid',$user->name);
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('vl_department','d','p.did=d.did');
	$query->fields('s')->fields('p',array('pname'))->fields('d',array('dname'));
	$student=$query->execute()->fetchObject();
	require_once(drupal_get_path('module','signup').'/../tcpdf/config/lang/eng.php');
	require_once(drupal_get_path('module','signup').'/../tcpdf/tcpdf.php');
	
	ini_set('max_execution_time','500');

	// create new PDF document
	$pdf = new TCPDF('L', PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

	// set document information
	$pdf->SetCreator(PDF_CREATOR);
	$pdf->SetTitle('中央音乐学院'.variable_get('zhaoban_current_year',date('Y')).'年本科招生专业考试准考证');
	$pdf->SetAuthor(variable_get('site_name', ''));
	$pdf->SetSubject($student->uid.' '.$student->name);

	// Set font
	// dejavusans is a UTF-8 Unicode font, if you only need to
	// print standard ASCII chars, you can use core fonts like
	// helvetica or times to reduce file size.
	$pdf->SetFont('droidsansfallbackfull', 'B', 14, '', true);
	// set default font subsetting mode
	$pdf->setFontSubsetting(false);
	
	$pdf->setPrintHeader(false);
	$pdf->setPrintFooter(false);

	$pdf->SetMargins(6, 6, 6);
	$pdf->SetAutoPageBreak(false);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	// Add a page
	// This method has several options, check the source code documentation for more information.
	$pdf->AddPage();
	$pdf->SetFillColor(216,216,216);
	$pdf->SetDrawColor(255,255,255);
	$pdf->SetLineWidth(0.5);

	// Header
	$pdf->SetFontSize(30);
	$pdf->Text(23,15,'中央音乐学院本科招生');
	$pdf->Text(22,29,variable_get('zhaoban_current_year',date('Y')).'年专业考试准考证');
	$pdf->LN();
	if($student->picture) {
		$imgstring=base64_decode($student->picture);
		$imgobj=imagecreatefromstring($imgstring);
		$printwidth=imagesx($imgobj)/imagesy($imgobj)*55;
		imagedestroy($imgobj);
		$pdf->Image('@'.$imgstring, 95-$printwidth, 45, $printwidth, 55);
		unset($imgstring);
	}
	
	$pdf->SetFontSize(14);
	$pdf->Text(54,117,'准考证号');
	$pdf->SetFontSize(28);
	$pdf->Text(76,113,$student->uid);
	$pdf->SetFontSize(14);
	$pdf->Text(64,126,'姓名');
	$pdf->Text(76,126,$student->name);
	$pdf->Text(64,135,'性别');
	$pdf->Text(76,135,$student->gender==2?'女':'男');
	$pdf->Text(54,144,'证件号码');
	$pdf->Text(76,144,$student->idcard_number);
	$pdf->Text(54,153,'报考专业');
	$pdf->Text(76,153,$student->pname);

	$pdf->Text(47,183,'中央音乐学院招生委员会办公室');
	$pdf->Text(40,189,'此证需配合有效身份证件原件方为有效');
	$pdf->Text(46,195,'打印时间：'.date('Y年n月j日G:i'));

	$pdf->StartTransform();
	$pdf->Rotate(90, 70, 110);
	$pdf->SetFontSize(8);
	$pdf->Write1DBarcode($student->uid,'C128B',79,141,100,15,'',array('text'=>TRUE));
	$pdf->Write1DBarcode($student->uid,'C128B',10,71,100,15,'',array('text'=>TRUE));
	$pdf->StopTransform();
	$pdf->SetDrawColor(0,0,0);
	$pdf->SetLineWidth(0.1);
	$pdf->Line(150,10,150,205);
	
	unset($student);
	
	$pdf->SetFontSize(20);
	$pdf->Text(200,15,'考试科目及安排');
	
	$pdf->SetXY(155,27);
	$pdf->SetFontSize(11);
	$pdf->SetDrawColor(255,255,255);
	$pdf->SetLineWidth(0.5);
	$pdf->Cell(55,6,'科目',1,0,'C',$fill=TRUE);
	$pdf->Cell(83,6,'安排',1,0,'C',$fill=TRUE);
	$query=db_select('students_going','sg')->condition('sg.uid',$user->name);
	$query->innerJoin('vl_exam','e','e.eid=sg.eid');
	$query->leftJoin('vl_going','g','sg.gid=g.gid');
	$query->leftJoin('vl_room','r','g.place = r.rid');
	$query->addExpression('r.rname','rname');
	$query->leftJoin('vl_room','w','g.waiting_room = w.rid');
	$query->addExpression('w.rname','wname');
	$query->addExpression("IFNULL(g.time, '9999999999999999')",'citera');
	$query->fields('e',array('ename','elevel','etype'))->fields('sg',array('uid','eid','gid','gorder'))->fields('g',array('time','gname'));
	$query->orderBy('citera')->orderBy('sg.eid');
	$result=$query->execute();
	$pdf->setXY(155,35);
	foreach($result as $r) {
		$pdf->setX(155);
		$pdf->Cell(55,7,$r->ename.($r->elevel?$r->elevel:''));
		$date=intval(substr($r->time,4,2)).t('Month').intval(substr($r->time,6,2)).t('Day');
		$starttime=sprintf("%d:%02d",intval(substr($r->time,8,2)), substr($r->time,10,2));
		$endtime=sprintf("%d:%02d",intval(substr($r->time,12,2)), substr($r->time,14,2));
		$rname = ($r->wname?"候考: ".$r->wname:$r->rname);
		if($r->gid) {
			$pdf->Cell(65,7, $date.$starttime.' - '.$endtime.' / '.$rname);
			$pdf->Ln();
			$pdf->setX(210);
			if($r->etype=='2')
				if($r->eid=='146' || $r->eid == '204' || $r->eid == '274' || strpos($r->gname,'专业复试')) ; // HACK FOR INTERVIEW OF ARTS MANAGEMENT
				else
					$pdf->Cell(65,7, sprintf("你是本考场总第%d名参加考试的考生。",$r->gorder));
			else
				$pdf->Cell(65,7, sprintf("你在本考场的座位号是%d。",$r->gorder));
		}
		$i=0;
		$pdf->Ln();
		$pdf->SetDrawColor(216,216,216);
		$pdf->SetLineStyle(array('dash' => '1,2'));
		$pdf->SetLineWidth(0.2);
		$pdf->Line(155,$pdf->getY(),291,$pdf->getY());
	}
	$pdf->Ln();
	$pdf->setX(155);
	$pdf->MultiCell(140,7,'提示：<br/>①考生打印准考证后，考试安排若有变动，我院将于指定地点公布，恕不另行通知考生。考生亦可随时关注我院招生网站。<br/>'.
		'②部分表演专业考试单个考场安排了多种乐器的考生，考试次序为包含所有乐器考生的总次序，请考生务必提前候考，以免贻误考试。', 0, 'J', false, 1, '', '', true, 0, true);
	
	$pdf->SetFontSize(20);
	$pdf->Text(170,185,'请考生自备2B铅笔与黑色签字笔');
	$pdf->SetFontSize(12);
	$pdf->Text(180,195,'请用A4纸横向打印，黑白稿、复印件皆有效');

	$pdf->SetProtection(array('copy','modify','extract','assemble'));
	if($GLOBALS['user']->uid == $user->uid)
		watchdog('user', '!user downloaded ticket report.', array(
			'!user' => $GLOBALS['user']->name),
			WATCHDOG_INFO
		);
	$pdf->Output($r->uid.'_ticket.pdf', 'I');
}

function signup_schools_autocomplete($string) {
	$matches = array();
	if ($string) {
		$result = db_select('vl_schools','s')->fields('s',array('sname'))->condition('s.sname', db_like($string) . '%', 'LIKE')->range(0, 10)->execute();
		foreach ($result as $school) {
			$matches[$school->sname] = check_plain($school->sname);
		}
	}

	drupal_json_output($matches);
}

function signup_cron() {
	// Force set those passthrough students's status
	$result = db_select('students_passthrough','s')->fields('s')->execute();
	foreach ($result as $r) {
		db_update('students')
			->fields(array(
				'pass_round1_major' => 1,
				'pass_round3_major' => 10,
			))
			->condition('idcard_number',$r->idcard_number)
			->condition('validated',1)
			->execute();
	}
}

function signup_search_students($citera) {
	$output='';
	$count=0;
	
	// 1. Search by students uid
	$query=db_select('users','u')->fields('u',array('uid','name'))->condition('u.name','%'.$citera.'%', 'LIKE')->orderBy('u.name');
	$query->innerJoin('students','s','u.name=s.uid');
	$query->addExpression('s.name','sname');
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->fields('p',array('pname'));
	$query->innerJoin('vl_province','pr','sg.province=pr.pid');
	$query->addExpression('pr.name','prname');
	$query->leftJoin('students_contact','sc','s.uid=sc.uid');
	$query->addExpression('IF(sc.contact_phone=sc.phone_roundg, sc.contact_phone, CONCAT(sc.contact_phone,\' / \',sc.phone_roundg))','phone');
	$r=$query->execute();

	// If only one target is found then direct to it right now.
	if($r->rowCount()==1) {
		$uid=$r->fetchObject();
		drupal_set_message(t('Unique result found when searching @citera by student id.',array('@citera'=>$citera)));
		drupal_goto('user/'.$uid->uid);
		return;
	}
	
	// If multiple result found, then list them
	if($r->rowCount()>1) {
		$output.='<div><h3>'.t("Search by student id:").'</h3>';
		if($r->rowCount()>10)
			$output .= '<p>'.t('@num students have been found, but we only list the first ten records. Please consider using more strict search citera.', array('@num'=>$r->rowCount())).'</p>';
		$output .='<ul>';
		foreach($r as $u) {
			$count++;
			$linktext=str_ireplace($citera, '<b>'.$citera.'</b>', $u->name);
			$output .='<li><dl>';
			$output .='<dt>'.l($linktext, 'user/'.$u->uid, array('html'=>TRUE)).'</dt>';
			$output .='<dd>'.sprintf("%s / %s / %s", $u->sname, $u->pname, $u->prname);
			if(isset($u->phone)) {
				$output .= sprintf('<br/><img src="/%s/telephone.png" align="bottom"/>%s', drupal_get_path('module', 'signup'), $u->phone);
			}
			$output .='</dd>';
			$output .='</dl></li>';
			if($count>=10) break;
		}
		$output .='</ul>';
		$output .='</div>';
	}
	
	// 2. Search by students name
	$query=db_select('users','u')->fields('u',array('uid','name'))->orderBy('u.name');
	$query->innerJoin('students','s','u.name=s.uid');
	$query->addExpression('s.name','sname');
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('vl_province','pr','sg.province=pr.pid');
	$query->fields('p',array('pname'));
	$query->addExpression('pr.name','prname');
	$query->condition('s.name','%'.$citera.'%', 'LIKE');
	$query->leftJoin('students_contact','sc','s.uid=sc.uid');
	$query->addExpression('IF(sc.contact_phone=sc.phone_roundg, sc.contact_phone, CONCAT(sc.contact_phone,\' / \',sc.phone_roundg))','phone');
	$r=$query->execute();

	// If only one target is found then direct to it right now.
	if($r->rowCount()==1) {
		$uid=$r->fetchObject();
		drupal_set_message(t('Unique result found when searching @citera by student name.',array('@citera'=>$citera)));
		drupal_goto('user/'.$uid->uid);
		return;
	}
	
	// If multiple result found, then list them
	if($r->rowCount()>1) {
		$count=0;
		$output .='<div><h3>'.t("Search by student name:").'</h3>';
		if($r->rowCount()>10)
			$output .= '<p>'.t('@num students have been found, but we only list the first ten records. Please consider using more strict search citera.', array('@num'=>$r->rowCount())).'</p>';
		$output .= '<ul>';
		foreach($r as $u) {
			$count++;
			$linktext=str_ireplace($citera,'<b>'.$citera.'</b>', $u->sname);
			$output .='<li><dl>';
			$output .='<dt>'.l($linktext, 'user/'.$u->uid, array('html'=>TRUE)).'</dt>';
			$output .='<dd>'.sprintf("%s / %s / %s", $u->name, $u->pname, $u->prname);
			if(isset($u->phone)) {
				$output .= sprintf('<br/><img src="/%s/telephone.png" align="bottom"/>%s', drupal_get_path('module', 'signup'), $u->phone);
			}
			$output .='</dd>';
			$output .='</dl></li>';
			if($count>=10) break;
		}
		$output .='</ul>';
		$output .='</div>';
	}
	
	// 3. Search by students idcard_num
	$query=db_select('users','u')->fields('u',array('uid','name'))->orderBy('u.name');
	$query->innerJoin('students','s','u.name=s.uid');
	$query->addExpression('s.name','sname');
	$query->condition('s.idcard_number',$citera);
	$r=$query->execute();

	// If only one target is found then direct to it right now.
	if($r->rowCount()==1) {
		$uid=$r->fetchObject();
		drupal_set_message(t('Unique result found when searching @citera by student idcard_number.',array('@citera'=>$citera)));
		drupal_goto('user/'.$uid->uid);
		return;
	}
	
	// 4. Search by students sid
	$query=db_select('users','u')->fields('u',array('uid','name'))->orderBy('u.name');
	$query->innerJoin('students','s','u.name=s.uid');
	$query->addExpression('s.name','sname');
	$query->innerJoin('students_gk','sg','s.uid=sg.uid');
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('vl_province','pr','sg.province=pr.pid');
	$query->fields('p',array('pname'));
	$query->addExpression('pr.name','prname');
	$query->leftJoin('students_contact','sc','s.uid=sc.uid');
	$query->addExpression('IF(sc.contact_phone=sc.phone_roundg, sc.contact_phone, CONCAT(sc.contact_phone,\' / \',sc.phone_roundg))','phone');
	$query=$query->condition('sg.sid','%'.$citera, 'LIKE')->isNotNull('sg.sid')->fields('sg',array('sid'));
	$r=$query->execute();

	// If only one target is found then direct to it right now.
	if($r->rowCount()==1) {
		$uid=$r->fetchObject();
		drupal_set_message(t('Unique result found when searching @citera by student sid.',array('@citera'=>$citera)));
		drupal_goto('user/'.$uid->uid);
		return;
	}
	
	// If multiple result found, then list them
	if($r->rowCount()>1) {
		$output.='<div><h3>'.t("Search by student sid:").'</h3><ul>';
		foreach($r as $u) {
			$count++;
			$linktext=str_ireplace($citera,'<b>'.$citera.'</b>', $u->sid);
			$output .='<li><dl>';
			$output .='<dt>'.l($linktext, 'user/'.$u->uid, array('html'=>TRUE)).'</dt>';
			$output .='<dd>'.sprintf("%s / %s / %s / %s", $u->name, $u->sname, $u->pname, $u->prname);
			if(isset($u->phone)) {
				$output .= sprintf('<br/><img src="/%s/telephone.png" align="bottom"/>%s', drupal_get_path('module', 'signup'), $u->phone);
			}
			$output .='</dd>';
			$output .='</dl></li>';
		}
		$output .='</ul>';
		$output .='</div>';
	}
	
	drupal_set_title(t('Search students').' - '.$citera);
	
	return $output;
}

function signup_weixin($request, $user) {
	if($user->uid && $request->msgtype=='text') {
		$query=db_select('students','s')->condition('s.uid',$user->name)->fields('s');
		$result=$query->execute();
		if($result->rowCount()) {
			switch($request->content) {
				case '重设密码':
				case '重置密码':
				case '忘记密码':
					$account = user_load($user->uid);
					$newpass = user_password(6);
					user_save($account, array('pass'=>$newpass));
					return t('The new password of @username is @pass.',
						array('@username'=>$user->name, '@pass'=>$newpass));
			}
		}
	}
}

function signup_simpleoauth($input, $appid=NULL) {
	$output=array();
	if(empty($input) || empty($input['sid']) || empty($input['idcard_number'])) {
		$output=array(
			'status' => '40002',
			'errmsg' => t('Invalid input for @op operation.', array('@op'=>'signup')),
		);
		return $output;
	}
	$query=db_select('students','s')->condition('s.uid',$input['sid'])->condition('s.idcard_number', $input['idcard_number']);
	$query->innerJoin('vl_professions','p','s.profession_major=p.pid');
	$query->innerJoin('vl_department', 'd', 'p.did = d.did');
	$query->fields('s')->fields('p',array('pname'))->fields('d',array('dname'));
	$r=$query->execute()->fetchObject();
	if(empty($r)) {
		$output=array(
			'status' => '40010',
			'errmsg' => t('No such student.'),
		);
	} else {
		$output=array(
			'status' => '0',
			'sid' => $r->uid,
			'name' => $r->name,
			'idcard_number' => $r->idcard_number,
			'validated' => $r->validated,
			'pass_round1' => $r->pass_round1_major,
			'pass_round3' => $r->pass_round3_major,
			'pid' => $r->profession_major,
			'dname' => $r->dname,
			'pname' => $r->pname,
		);
		$appname=simpleoauth_get_appname($appid);
		watchdog(
			'signup',
			'@uid was connected via @appid.',
			array('@uid'=>$r->uid, '@appid'=>$appname)
		);
		variable_set('simpleoauth.connect.'.$appid.'.'.$r->uid, 1);
	}
	return $output;
}
?>
